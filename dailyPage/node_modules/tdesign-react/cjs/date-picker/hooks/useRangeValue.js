/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-8c98b84c.js');
var React = require('react');
var dayjs = require('dayjs');
var hooks_useControlled = require('../../hooks/useControlled.js');
var _common_js_datePicker_format = require('../../_common/js/date-picker/format.js');
var _common_js_datePicker_utils = require('../../_common/js/date-picker/utils.js');
var _common_js_log_log = require('../../_common/js/log/log.js');
require('../../_chunks/dep-789d4bfb.js');
require('../../_chunks/dep-f31114fd.js');
require('../../_chunks/dep-eb2281b7.js');
require('../../_chunks/dep-6d1aecc8.js');
require('../../_chunks/dep-93234904.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-f6abffca.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_util/noop.js');
require('../../_chunks/dep-3415b40f.js');
require('../../_chunks/dep-de26ea20.js');
require('../../_chunks/dep-8afae264.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-39147135.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-c15e2539.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-46b250c3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function initYearMonthTime(_ref) {
  var value = _ref.value,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? "date" : _ref$mode,
      format = _ref.format,
      _ref$timeFormat = _ref.timeFormat,
      timeFormat = _ref$timeFormat === void 0 ? "HH:mm:ss" : _ref$timeFormat,
      enableTimePicker = _ref.enableTimePicker;
  var defaultYearMonthTime = {
    year: [dayjs__default["default"]().year(), dayjs__default["default"]().year()],
    month: [dayjs__default["default"]().month(), dayjs__default["default"]().month()],
    time: [dayjs__default["default"]().format(timeFormat), dayjs__default["default"]().format(timeFormat)]
  };

  if (mode === "year") {
    defaultYearMonthTime.year[1] += 10;
  } else if (mode === "month" || mode === "quarter") {
    defaultYearMonthTime.year[1] += 1;
  } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
    defaultYearMonthTime.month[1] += 1;
  }

  if (!value || !Array.isArray(value) || !value.length) {
    return defaultYearMonthTime;
  }

  return {
    year: value.map(function (v) {
      return _common_js_datePicker_format.parseToDayjs(v, format).year();
    }),
    month: value.map(function (v) {
      return _common_js_datePicker_format.parseToDayjs(v, format).month();
    }),
    time: value.map(function (v) {
      return _common_js_datePicker_format.parseToDayjs(v, format).format(timeFormat);
    })
  };
}
function useRange(props) {
  var _useControlled = hooks_useControlled["default"](props, "value", props.onChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _getDefaultFormat = _common_js_datePicker_format.getDefaultFormat({
    mode: props.mode,
    format: props.format,
    enableTimePicker: props.enableTimePicker
  }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat;

  if (props.enableTimePicker) {
    if (!_common_js_datePicker_utils.extractTimeFormat(format)) _common_js_log_log["default"].error("DatePicker", "format: ".concat(format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }

  if (!Array.isArray(value)) {
    _common_js_log_log["default"].error("DatePicker", "typeof value: ".concat(value, " must be Array!"));
  } else if (!_common_js_datePicker_format.isValidDate(value, format)) {
    _common_js_log_log["default"].error("DatePicker", "value: ".concat(value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(format));
  }

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      isFirstValueSelected = _useState2[0],
      setIsFirstValueSelected = _useState2[1];

  var _useState3 = React.useState(initYearMonthTime({
    value: value,
    mode: props.mode,
    format: format,
    timeFormat: timeFormat
  }).time),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      time = _useState4[0],
      setTime = _useState4[1];

  var _useState5 = React.useState(initYearMonthTime({
    value: value,
    mode: props.mode,
    format: format,
    enableTimePicker: props.enableTimePicker
  }).month),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      month = _useState6[0],
      setMonth = _useState6[1];

  var _useState7 = React.useState(initYearMonthTime({
    value: value,
    mode: props.mode,
    format: format
  }).year),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      year = _useState8[0],
      setYear = _useState8[1];

  var _useState9 = React.useState(_common_js_datePicker_format.formatDate(value, {
    format: format
  })),
      _useState10 = slicedToArray._slicedToArray(_useState9, 2),
      cacheValue = _useState10[0],
      setCacheValue = _useState10[1];

  React.useEffect(function () {
    if (!value) {
      setCacheValue([]);
      return;
    }

    if (!_common_js_datePicker_format.isValidDate(value, format)) return;
    setCacheValue(_common_js_datePicker_format.formatDate(value, {
      format: format
    }));
    setTime(_common_js_datePicker_format.formatTime(value, timeFormat));
  }, [value]);
  return {
    value: value,
    onChange: onChange,
    year: year,
    setYear: setYear,
    month: month,
    setMonth: setMonth,
    time: time,
    setTime: setTime,
    isFirstValueSelected: isFirstValueSelected,
    setIsFirstValueSelected: setIsFirstValueSelected,
    cacheValue: cacheValue,
    setCacheValue: setCacheValue
  };
}

exports.PARTIAL_MAP = PARTIAL_MAP;
exports["default"] = useRange;
exports.initYearMonthTime = initYearMonthTime;
//# sourceMappingURL=useRangeValue.js.map
