/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var toConsumableArray = require('../_chunks/dep-0944d665.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var React = require('react');
var dayjs = require('dayjs');
var datePicker_panel_RangePanel = require('./panel/RangePanel.js');
var datePicker_hooks_useRangeValue = require('./hooks/useRangeValue.js');
var _common_js_datePicker_format = require('../_common/js/date-picker/format.js');
var _common_js_datePicker_utils = require('../_common/js/date-picker/utils.js');
var _common_js_log_log = require('../_common/js/log/log.js');
require('../_chunks/dep-789d4bfb.js');
require('classnames');
require('../hooks/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('./panel/PanelContent.js');
require('./base/Header.js');
require('../locale/LocalReceiver.js');
require('../select/index.js');
require('../select/base/Select.js');
require('../_chunks/dep-e675c809.js');
require('../_chunks/dep-f0b85a46.js');
require('../_chunks/dep-cc5ddaf7.js');
require('../_chunks/dep-f6abffca.js');
require('../_chunks/dep-93234904.js');
require('../hooks/useControlled.js');
require('../_chunks/dep-f31114fd.js');
require('../_chunks/dep-eb2281b7.js');
require('../_chunks/dep-6d1aecc8.js');
require('../_util/noop.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../select/util/helper.js');
require('../select/base/OptionGroup.js');
require('../select/defaultProps.js');
require('../select/base/Option.js');
require('../_chunks/dep-49f84ee3.js');
require('../_chunks/dep-23aa4ed2.js');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../_util/dom.js');
require('raf');
require('../_util/easing.js');
require('../common/FakeArrow.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../select-input/index.js');
require('../select-input/SelectInput.js');
require('../popup/index.js');
require('../popup/Popup.js');
require('react-transition-group');
require('react-popper');
require('../popup/hooks/useTrigger.js');
require('react-is');
require('../popup/utils/ref.js');
require('../_util/composeRefs.js');
require('../popup/utils/transition.js');
require('../_util/useMutationObserver.js');
require('../_chunks/dep-d26534d4.js');
require('../_chunks/dep-8afae264.js');
require('../_util/useWindowSize.js');
require('../popup/defaultProps.js');
require('../select-input/useSingle.js');
require('../_chunks/dep-64a370bf.js');
require('../_chunks/dep-b5d52e6f.js');
require('../_chunks/dep-5cdbc06c.js');
require('../_chunks/dep-7745815b.js');
require('../input/index.js');
require('../input/Input.js');
require('tdesign-icons-react');
require('../_util/useLayoutEffect.js');
require('../hooks/useGlobalIcon.js');
require('../input/InputGroup.js');
require('../input/defaultProps.js');
require('../select-input/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/TagInput.js');
require('../_util/useDragSorter.js');
require('../tag-input/useTagScroll.js');
require('../tag-input/useTagList.js');
require('../tag/index.js');
require('../tag/Tag.js');
require('../tag/CheckTag.js');
require('../tag/defaultProps.js');
require('../tag-input/useHover.js');
require('../tag-input/defaultProps.js');
require('../select-input/useOverlayInnerStyle.js');
require('../select-input/defaultProps.js');
require('../select/base/PopupContent.js');
require('../jumper/index.js');
require('../jumper/Jumper.js');
require('../button/index.js');
require('../button/Button.js');
require('../button/defaultProps.js');
require('../jumper/defaultProps.js');
require('./base/Table.js');
require('./base/Cell.js');
require('../time-picker/index.js');
require('../time-picker/TimePicker.js');
require('../_chunks/dep-de26ea20.js');
require('../time-picker/TimeRangePicker.js');
require('../range-input/index.js');
require('../range-input/RangeInput.js');
require('../range-input/defaultProps.js');
require('../range-input/RangeInputPopup.js');
require('../time-picker/panel/TimePickerPanel.js');
require('../time-picker/panel/SinglePanel.js');
require('../time-picker/hooks/useTimePickerTextConfig.js');
require('../_common/js/time-picker/const.js');
require('../_common/js/time-picker/utils.js');
require('../hooks/useDebounce.js');
require('../_util/usePersistFn.js');
require('../hooks/usePropsRef.js');
require('../time-picker/defaultProps.js');
require('./panel/ExtraContent.js');
require('./base/Footer.js');
require('./hooks/useTableData.js');
require('./hooks/useDisableDate.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DateRangePickerPanel = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      onPanelClick = props.onPanelClick;

  var _useRangeValue = datePicker_hooks_useRangeValue["default"](props),
      value = _useRangeValue.value,
      year = _useRangeValue.year,
      month = _useRangeValue.month,
      time = _useRangeValue.time,
      onChange = _useRangeValue.onChange,
      setTime = _useRangeValue.setTime,
      setYear = _useRangeValue.setYear,
      setMonth = _useRangeValue.setMonth,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected,
      setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected,
      cacheValue = _useRangeValue.cacheValue,
      setCacheValue = _useRangeValue.setCacheValue;

  var _getDefaultFormat = _common_js_datePicker_format.getDefaultFormat({
    mode: mode,
    enableTimePicker: enableTimePicker,
    format: props.format
  }),
      format = _getDefaultFormat.format;

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = React.useState([]),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      hoverValue = _useState6[0],
      setHoverValue = _useState6[1];

  var activeIndex = React.useMemo(function () {
    return isFirstValueSelected ? 1 : 0;
  }, [isFirstValueSelected]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);

    var nextValue = toConsumableArray._toConsumableArray(hoverValue);

    nextValue[activeIndex] = _common_js_datePicker_format.formatDate(date, {
      format: format
    });
    setHoverValue(nextValue);
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setHoverValue(cacheValue);
  }

  function onCellClick(date, _ref) {
    var _props$onCellClick;

    var e = _ref.e,
        partial = _ref.partial;
    setIsSelected(true);

    var nextValue = toConsumableArray._toConsumableArray(cacheValue);

    nextValue[activeIndex] = _common_js_datePicker_format.formatDate(date, {
      format: format
    });
    setCacheValue(nextValue);
    (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
      date: nextValue.map(function (v) {
        return dayjs__default["default"](v).toDate();
      }),
      e: e,
      partial: activeIndex ? "end" : "start"
    });

    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs__default["default"](date).month() !== month[partialIndex];

      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs__default["default"](date).month(), Math.min(dayjs__default["default"](date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs__default["default"](date).month() - 1, 0), dayjs__default["default"](date).month()]);
      }
    }

    if (enableTimePicker) return;

    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(_common_js_datePicker_format.formatDate(nextValue, {
        format: format
      }), {
        dayjsValue: nextValue.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v, format);
        }),
        trigger: "pick"
      });
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }
  }

  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger,
        partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var triggerMap = {
      "-1": "arrow-previous",
      1: "arrow-next"
    };
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;

    if (trigger === "prev") {
      next = _common_js_datePicker_utils.subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = _common_js_datePicker_utils.addMonth(current, monthCount);
    }

    var nextYear = toConsumableArray._toConsumableArray(year);

    nextYear[partialIndex] = next.getFullYear();

    var nextMonth = toConsumableArray._toConsumableArray(month);

    nextMonth[partialIndex] = next.getMonth();

    if (partialIndex === 0) {
      nextYear[1] = Math.max(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      }
    }

    if (partialIndex === 1) {
      nextYear[0] = Math.min(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }
    }

    if (year.some(function (y) {
      return !nextYear.includes(y);
    })) {
      var _props$onYearChange;

      (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
        partial: partial,
        year: nextYear[partialIndex],
        date: value.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v, format).toDate();
        }),
        trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
      });
    }

    if (month.some(function (m) {
      return !nextMonth.includes(m);
    })) {
      var _props$onMonthChange;

      (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v, format).toDate();
        }),
        trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
      });
    }

    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    var _props$onTimeChange;

    var _extractTimeObj = _common_js_datePicker_utils.extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextInputValue = toConsumableArray._toConsumableArray(cacheValue);

    var changedInputValue = cacheValue[activeIndex];
    var currentDate = !dayjs__default["default"](changedInputValue, format).isValid() ? dayjs__default["default"]().year(year[activeIndex]).month(month[activeIndex]) : dayjs__default["default"](changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;

    var nextTime = toConsumableArray._toConsumableArray(time);

    nextTime[activeIndex] = val;
    setTime(nextTime);
    setIsSelected(true);
    setCacheValue(_common_js_datePicker_format.formatDate(nextInputValue, {
      format: format
    }));
    (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
      time: val,
      partial: activeIndex ? "end" : "start",
      date: value.map(function (v) {
        return dayjs__default["default"](v).toDate();
      }),
      trigger: "time-hour"
    });
  }

  function onConfirmClick(_ref3) {
    var _props$onConfirm;

    var e = _ref3.e;

    var nextValue = toConsumableArray._toConsumableArray(cacheValue);

    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(_common_js_datePicker_format.formatDate(nextValue, {
        format: format
      }), {
        dayjsValue: nextValue.map(function (v) {
          return _common_js_datePicker_format.parseToDayjs(v, format);
        }),
        trigger: "confirm"
      });
      setYear(nextValue.map(function (v) {
        return dayjs__default["default"](v, format).year();
      }));
      setMonth(nextValue.map(function (v) {
        return dayjs__default["default"](v, format).month();
      }));
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }

    (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
      date: value.map(function (v) {
        return dayjs__default["default"](v).toDate();
      }),
      e: e
    });
  }

  function onPresetClick(presetValue, _ref4) {
    var _props$onPresetClick;

    var e = _ref4.e,
        preset = _ref4.preset;
    var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;

    if (!Array.isArray(presetVal)) {
      _common_js_log_log["default"].error("DateRangePickerPanel", "preset: ".concat(presetValue, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
    } else {
      onChange(_common_js_datePicker_format.formatDate(presetVal, {
        format: format
      }), {
        dayjsValue: presetVal.map(function (p) {
          return _common_js_datePicker_format.parseToDayjs(p, format);
        }),
        trigger: "preset"
      });
    }

    (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
      e: e,
      preset: preset
    });
  }

  function onYearChange(nextVal, _ref5) {
    var partial = _ref5.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextYear = toConsumableArray._toConsumableArray(year);

    nextYear[partialIndex] = nextVal;
    if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
    if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
    setYear(nextYear);
    props.onYearChange({
      partial: partial,
      year: nextYear[partialIndex],
      date: value.map(function (v) {
        return dayjs__default["default"](v).toDate();
      }),
      trigger: "year-select"
    });
  }

  function onMonthChange(nextVal, _ref6) {
    var partial = _ref6.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextMonth = toConsumableArray._toConsumableArray(month);

    nextMonth[partialIndex] = nextVal;

    if (year[0] === year[1]) {
      if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
    }

    setMonth(nextMonth);
    props.onMonthChange({
      partial: partial,
      month: nextMonth[partialIndex],
      date: value.map(function (v) {
        return dayjs__default["default"](v).toDate();
      }),
      trigger: "month-select"
    });
  }

  var panelProps = {
    hoverValue: isHoverCell ? hoverValue : [],
    value: isSelected ? cacheValue : value,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    activeIndex: activeIndex,
    panelPreselection: panelPreselection,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onCellClick: onCellClick,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange,
    onPanelClick: onPanelClick
  };
  return /* @__PURE__ */React__default["default"].createElement(datePicker_panel_RangePanel["default"], _objectSpread({
    ref: ref,
    className: className,
    style: style
  }, panelProps));
});
DateRangePickerPanel.displayName = "DateRangePickerPanel";
DateRangePickerPanel.defaultProps = {
  mode: "date",
  defaultValue: [],
  panelPreselection: true
};

exports["default"] = DateRangePickerPanel;
//# sourceMappingURL=DateRangePickerPanel.js.map
