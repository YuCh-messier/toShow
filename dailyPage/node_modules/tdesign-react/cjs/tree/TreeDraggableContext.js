/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var React = require('react');
var _util_createHookContext = require('../_util/createHookContext.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TreeDraggableContext = _util_createHookContext.createHookContext(function (value) {
  var props = value.props,
      store = value.store;
  var dragNode = React.useRef(null);

  var onDragStart = function onDragStart(context) {
    var _props$onDragStart;

    dragNode.current = context.node;
    (_props$onDragStart = props.onDragStart) === null || _props$onDragStart === void 0 ? void 0 : _props$onDragStart.call(props, _objectSpread(_objectSpread({}, context), {}, {
      node: context.node.model
    }));
  };

  var onDragEnd = function onDragEnd(context) {
    var _props$onDragEnd;

    dragNode.current = context.node;
    (_props$onDragEnd = props.onDragEnd) === null || _props$onDragEnd === void 0 ? void 0 : _props$onDragEnd.call(props, _objectSpread(_objectSpread({}, context), {}, {
      node: context.node.model
    }));
  };

  var onDragOver = function onDragOver(context) {
    var _props$onDragOver;

    (_props$onDragOver = props.onDragOver) === null || _props$onDragOver === void 0 ? void 0 : _props$onDragOver.call(props, _objectSpread(_objectSpread({}, context), {}, {
      node: context.node.model
    }));
  };

  var onDragLeave = function onDragLeave(context) {
    var _props$onDragLeave;

    (_props$onDragLeave = props.onDragLeave) === null || _props$onDragLeave === void 0 ? void 0 : _props$onDragLeave.call(props, _objectSpread(_objectSpread({}, context), {}, {
      node: context.node.model
    }));
  };

  var onDrop = function onDrop(context) {
    var _props$onDrop;

    var node = context.node,
        dropPosition = context.dropPosition;
    if (node.value === dragNode.current.value || node.getParents().some(function (_node) {
      return _node.value === dragNode.current.value;
    })) return;
    var nodes = store.getNodes();
    nodes.some(function (_node) {
      if (_node.value === node.value) {
        if (dropPosition === 0) {
          var _dragNode$current;

          (_dragNode$current = dragNode.current) === null || _dragNode$current === void 0 ? void 0 : _dragNode$current.appendTo(store, _node);
        } else if (dropPosition < 0) {
          node.insertBefore(dragNode.current);
        } else {
          node.insertAfter(dragNode.current);
        }

        return true;
      }

      return false;
    });
    (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, _objectSpread(_objectSpread({}, context), {}, {
      dragNode: dragNode.current.model,
      dropNode: node.model
    }));
  };

  return {
    onDragStart: onDragStart,
    onDragEnd: onDragEnd,
    onDragOver: onDragOver,
    onDragLeave: onDragLeave,
    onDrop: onDrop
  };
});
var useTreeDraggableContext = function useTreeDraggableContext() {
  return TreeDraggableContext.use();
};

exports.TreeDraggableContext = TreeDraggableContext;
exports.useTreeDraggableContext = useTreeDraggableContext;
//# sourceMappingURL=TreeDraggableContext.js.map
