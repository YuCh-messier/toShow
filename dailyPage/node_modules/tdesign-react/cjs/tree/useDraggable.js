/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var throttle = require('../_chunks/dep-baf60a69.js');
var React = require('react');
var tree_TreeDraggableContext = require('./TreeDraggableContext.js');
var _util_usePersistFn = require('../_util/usePersistFn.js');
require('../_chunks/dep-789d4bfb.js');
require('../_chunks/dep-d26534d4.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-8afae264.js');
require('../_chunks/dep-f6abffca.js');
require('../_chunks/dep-3c510ebe.js');
require('../_util/createHookContext.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useDraggable(props) {
  var nodeRef = props.nodeRef,
      node = props.node;

  var _useTreeDraggableCont = tree_TreeDraggableContext.useTreeDraggableContext(),
      onDragStart = _useTreeDraggableCont.onDragStart,
      onDragEnd = _useTreeDraggableCont.onDragEnd,
      onDragLeave = _useTreeDraggableCont.onDragLeave,
      onDragOver = _useTreeDraggableCont.onDragOver,
      onDrop = _useTreeDraggableCont.onDrop;

  var _useState = React.useState({
    isDragOver: false,
    isDragging: false,
    dropPosition: 0
  }),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var setPartialState = _util_usePersistFn.usePersistFn(function (newState) {
    setState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), newState);
    });
  });
  var updateDropPosition = React.useRef(throttle.throttle_1(function (e) {
    if (!nodeRef.current) return;
    var rect = nodeRef.current.getBoundingClientRect();
    var offsetY = window.pageYOffset + rect.top;
    var pageY = e.pageY;
    var gapHeight = rect.height / 4;
    var diff = pageY - offsetY;

    if (diff < gapHeight) {
      setPartialState({
        dropPosition: -1
      });
    } else if (diff < rect.height - gapHeight) {
      setPartialState({
        dropPosition: 0
      });
    } else {
      setPartialState({
        dropPosition: 1
      });
    }
  })).current;

  var setDragStatus = function setDragStatus(status, e) {
    switch (status) {
      case "dragStart":
        setPartialState({
          isDragging: true,
          dropPosition: 0
        });
        onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart({
          node: node,
          e: e
        });
        break;

      case "dragEnd":
        setPartialState({
          isDragging: false,
          isDragOver: false,
          dropPosition: 0
        });
        updateDropPosition.cancel();
        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd({
          node: node,
          e: e
        });
        break;

      case "dragOver":
        setPartialState({
          isDragOver: true
        });
        updateDropPosition(e);
        onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver({
          node: node,
          e: e
        });
        break;

      case "dragLeave":
        setPartialState({
          isDragOver: false,
          dropPosition: 0
        });
        updateDropPosition.cancel();
        onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave({
          node: node,
          e: e
        });
        break;

      case "drop":
        onDrop === null || onDrop === void 0 ? void 0 : onDrop({
          node: node,
          dropPosition: state.dropPosition,
          e: e
        });
        setPartialState({
          isDragOver: false
        });
        updateDropPosition.cancel();
        break;
    }
  };

  return _objectSpread(_objectSpread({}, state), {}, {
    setDragStatus: setDragStatus
  });
}

exports["default"] = useDraggable;
//# sourceMappingURL=useDraggable.js.map
