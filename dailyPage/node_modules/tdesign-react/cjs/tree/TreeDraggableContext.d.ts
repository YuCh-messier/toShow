import { DragEvent } from 'react';
import TreeStore from '../_common/js/tree/tree-store';
import TreeNode from '../_common/js/tree/tree-node';
import { TreeProps } from './Tree';
interface Value {
    props: TreeProps;
    store: TreeStore;
}
export declare const TreeDraggableContext: {
    Provider: (props: import("react").PropsWithChildren<{
        value: Value;
    }>) => JSX.Element;
    use: () => {
        onDragStart: (context: {
            node: TreeNode;
            e: DragEvent;
        }) => void;
        onDragEnd: (context: {
            node: TreeNode;
            e: DragEvent;
        }) => void;
        onDragOver: (context: {
            node: TreeNode;
            e: DragEvent;
        }) => void;
        onDragLeave: (context: {
            node: TreeNode;
            e: DragEvent;
        }) => void;
        onDrop: (context: {
            node: TreeNode;
            dropPosition: number;
            e: DragEvent;
        }) => void;
    };
};
export declare const useTreeDraggableContext: () => {
    onDragStart: (context: {
        node: TreeNode;
        e: DragEvent;
    }) => void;
    onDragEnd: (context: {
        node: TreeNode;
        e: DragEvent;
    }) => void;
    onDragOver: (context: {
        node: TreeNode;
        e: DragEvent;
    }) => void;
    onDragLeave: (context: {
        node: TreeNode;
        e: DragEvent;
    }) => void;
    onDrop: (context: {
        node: TreeNode;
        dropPosition: number;
        e: DragEvent;
    }) => void;
};
export {};
