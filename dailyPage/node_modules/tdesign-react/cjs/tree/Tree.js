/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var React = require('react');
var reactTransitionGroup = require('react-transition-group');
var classNames = require('classnames');
var _util_usePersistFn = require('../_util/usePersistFn.js');
var tree_useTreeConfig = require('./useTreeConfig.js');
var tree_useControllable = require('./useControllable.js');
var tree_TreeItem = require('./TreeItem.js');
var tree_useStore = require('./useStore.js');
var tree_TreeDraggableContext = require('./TreeDraggableContext.js');
require('../_chunks/dep-789d4bfb.js');
require('../hooks/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../locale/LocalReceiver.js');
require('../hooks/useControlled.js');
require('../_chunks/dep-f31114fd.js');
require('../_chunks/dep-eb2281b7.js');
require('../_chunks/dep-6d1aecc8.js');
require('../_chunks/dep-93234904.js');
require('../_chunks/dep-f6abffca.js');
require('../_util/noop.js');
require('tdesign-icons-react');
require('../loading/index.js');
require('../loading/Loading.js');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-23aa4ed2.js');
require('../_util/easing.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('../_chunks/dep-0944d665.js');
require('../_chunks/dep-e675c809.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../hooks/useGlobalIcon.js');
require('../checkbox/index.js');
require('../_chunks/dep-7a0248f1.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../common/Check.js');
require('../_util/helper.js');
require('../_chunks/dep-c33ee4fc.js');
require('../_chunks/dep-8173fd05.js');
require('../_chunks/dep-49f84ee3.js');
require('../checkbox/defaultProps.js');
require('./useDraggable.js');
require('../_chunks/dep-baf60a69.js');
require('../_chunks/dep-d26534d4.js');
require('../_chunks/dep-8afae264.js');
require('../_util/composeRefs.js');
require('../_chunks/dep-f9ee0156.js');
require('../_chunks/dep-12942e66.js');
require('../_chunks/dep-0dfd91fa.js');
require('../_chunks/dep-7745815b.js');
require('../_util/useUpdateEffect.js');
require('../_util/useLayoutEffect.js');
require('../_common/js/tree/tree-store.js');
require('../_chunks/dep-06b861c2.js');
require('../_chunks/dep-f4742892.js');
require('../_chunks/dep-482517f0.js');
require('../_chunks/dep-5cdbc06c.js');
require('../_common/js/tree/tree-node.js');
require('../_chunks/dep-7769bf72.js');
require('../_chunks/dep-f0b85a46.js');
require('../_chunks/dep-cc5ddaf7.js');
require('../_common/js/tree/tree-node-model.js');
require('../_chunks/dep-64a370bf.js');
require('../_chunks/dep-b5d52e6f.js');
require('../_chunks/dep-172e66ee.js');
require('../_common/js/log/log.js');
require('../_util/createHookContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Tree = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var _useTreeConfig = tree_useTreeConfig.useTreeConfig(),
      treeClassNames = _useTreeConfig.treeClassNames,
      transitionNames = _useTreeConfig.transitionNames,
      transitionClassNames = _useTreeConfig.transitionClassNames,
      transitionDuration = _useTreeConfig.transitionDuration,
      locale = _useTreeConfig.locale;

  var _useState = React.useState([]),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      visibleNodes = _useState2[0],
      setVisibleNodes = _useState2[1];

  var empty = props.empty,
      activable = props.activable,
      disabled = props.disabled,
      checkable = props.checkable,
      checkProps = props.checkProps,
      disableCheck = props.disableCheck,
      hover = props.hover,
      icon = props.icon,
      line = props.line,
      label = props.label,
      operations = props.operations,
      transition = props.transition,
      expandOnClickNode = props.expandOnClickNode,
      onClick = props.onClick;

  var _useControllable = tree_useControllable["default"](props),
      value = _useControllable.value,
      onChange = _useControllable.onChange,
      expanded = _useControllable.expanded,
      onExpand = _useControllable.onExpand,
      onActive = _useControllable.onActive,
      actived = _useControllable.actived;

  var emptyText = locale("empty");
  var store = tree_useStore.useStore(_objectSpread(_objectSpread({}, props), {}, {
    value: value,
    onChange: onChange,
    expanded: expanded,
    onExpand: onExpand,
    onActive: onActive,
    actived: actived
  }), function () {
    var nodes = store.getNodes();
    var newVisibleNodes = nodes.filter(function (node) {
      return node.visible;
    });
    setVisibleNodes(newVisibleNodes);
  });
  var setExpanded = _util_usePersistFn.usePersistFn(function (node, isExpanded, e) {
    var expanded2 = node.setExpanded(isExpanded);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    e && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
      node: treeNodeModel,
      e: e
    }));
    return expanded2;
  });
  var setActived = _util_usePersistFn.usePersistFn(function (node, isActived) {
    var actived2 = node.setActived(isActived);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onActive === null || onActive === void 0 ? void 0 : onActive(actived2, {
      node: treeNodeModel
    });
    return actived2;
  });
  var setChecked = _util_usePersistFn.usePersistFn(function (node, isChecked) {
    var checked = node.setChecked(isChecked);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onChange === null || onChange === void 0 ? void 0 : onChange(checked, {
      node: treeNodeModel
    });
    return checked;
  });

  var handleItemClick = function handleItemClick(node, options) {
    if (!node) {
      return;
    }

    var isDisabled = disabled || node.disabled;
    var expand = options.expand,
        active = options.active,
        event = options.event;
    if (expand) setExpanded(node, !node.isExpanded(), event);

    if (active && !isDisabled) {
      setActived(node, !node.isActived());
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onClick === null || onClick === void 0 ? void 0 : onClick({
        node: treeNodeModel,
        e: event
      });
    }
  };

  var handleChange = function handleChange(node) {
    if (!node || disabled || node.disabled) {
      return;
    }

    setChecked(node, !node.isChecked());
  };

  React.useImperativeHandle(ref, function () {
    return {
      store: store,
      appendTo: function appendTo(value2, newData) {
        var list = [];

        if (Array.isArray(newData)) {
          list = newData;
        } else {
          list = [newData];
        }

        list.forEach(function (item) {
          store.appendNodes(value2, item);
        });
      },
      getIndex: function getIndex(value2) {
        return store.getNodeIndex(value2);
      },
      getItem: function getItem(value2) {
        var node = store.getNode(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value2) {
        var nodes = store.getNodes(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getParent: function getParent(value2) {
        var node = store.getParent(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value2) {
        var nodes = store.getParents(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value2) {
        var node = store.getNode(value2);
        var pathNodes = [];

        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }

        return pathNodes;
      },
      insertAfter: function insertAfter(value2, newData) {
        return store.insertAfter(value2, newData);
      },
      insertBefore: function insertBefore(value2, newData) {
        return store.insertBefore(value2, newData);
      },
      remove: function remove(value2) {
        return store.remove(value2);
      },
      setItem: function setItem(value2, options) {
        var node = this.store.getNode(value2);
        var spec = options;

        if (node && spec) {
          if ("expanded" in options) {
            setExpanded(node, spec.expanded);
            delete spec.expanded;
          }

          if ("actived" in options) {
            setActived(node, spec.actived);
            delete spec.actived;
          }

          if ("checked" in options) {
            setChecked(node, spec.checked);
            delete spec.checked;
          }

          node.set(spec);
        }
      }
    };
  }, [store, setExpanded, setActived, setChecked]);
  var nodeList = React.useMemo(function () {
    return visibleNodes.map(function () {
      return /*#__PURE__*/React__default["default"].createRef();
    });
  }, [visibleNodes]);

  var renderEmpty = function renderEmpty() {
    var emptyView = empty || emptyText;

    if (empty instanceof Function) {
      emptyView = empty();
    }

    return emptyView;
  };

  var renderItems = function renderItems() {
    if (visibleNodes.length <= 0) {
      return renderEmpty();
    }

    return /* @__PURE__ */React__default["default"].createElement(reactTransitionGroup.TransitionGroup, {
      name: transitionNames.treeNode,
      className: treeClassNames.treeList
    }, visibleNodes.map(function (node, index) {
      return /* @__PURE__ */React__default["default"].createElement(reactTransitionGroup.CSSTransition, {
        nodeRef: nodeList[index],
        key: node.value,
        timeout: transitionDuration,
        classNames: transitionClassNames
      }, /* @__PURE__ */React__default["default"].createElement(tree_TreeItem["default"], {
        ref: nodeList[index],
        node: node,
        empty: empty,
        icon: icon,
        label: label,
        line: line,
        transition: transition,
        expandOnClickNode: expandOnClickNode,
        activable: activable,
        operations: operations,
        checkProps: checkProps,
        disableCheck: disableCheck,
        onClick: handleItemClick,
        onChange: handleChange
      }));
    }));
  };

  var draggable = React.useMemo(function () {
    return {
      props: props,
      store: store
    };
  }, [props, store]);
  return /* @__PURE__ */React__default["default"].createElement(tree_TreeDraggableContext.TreeDraggableContext.Provider, {
    value: draggable
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](treeClassNames.tree, (_classNames = {}, defineProperty._defineProperty(_classNames, treeClassNames.disabled, disabled), defineProperty._defineProperty(_classNames, treeClassNames.treeHoverable, hover), defineProperty._defineProperty(_classNames, treeClassNames.treeCheckable, checkable), defineProperty._defineProperty(_classNames, treeClassNames.treeFx, transition), defineProperty._defineProperty(_classNames, treeClassNames.treeBlockNode, expandOnClickNode), _classNames))
  }, renderItems()));
});
Tree.displayName = "Tree";
Tree.defaultProps = {
  data: [],
  empty: "",
  expandLevel: 0,
  icon: true,
  line: false,
  transition: true,
  lazy: true,
  valueMode: "onlyLeaf"
};

exports["default"] = Tree;
//# sourceMappingURL=Tree.js.map
