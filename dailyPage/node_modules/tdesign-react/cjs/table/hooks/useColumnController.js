/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-3415b40f.js');
var slicedToArray = require('../../_chunks/dep-8c98b84c.js');
var toConsumableArray = require('../../_chunks/dep-0944d665.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var intersection = require('../../_chunks/dep-0100323b.js');
var classNames = require('classnames');
var checkbox_index = require('../../checkbox/index.js');
var dialog_plugin = require('../../dialog/plugin.js');
var table_hooks_useTableHeader = require('./useTableHeader.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var hooks_useControlled = require('../../hooks/useControlled.js');
var table_utils = require('../utils.js');
var button_index = require('../../button/index.js');
require('../../_chunks/dep-789d4bfb.js');
require('../../_chunks/dep-93234904.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-f6abffca.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_chunks/dep-482517f0.js');
require('../../_chunks/dep-be113066.js');
require('../../_chunks/dep-7affd9c7.js');
require('../../_chunks/dep-c15e2539.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-ffd983b8.js');
require('../../_chunks/dep-901b688e.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-92d05577.js');
require('../../_chunks/dep-29ecaf93.js');
require('../../_chunks/dep-7a0248f1.js');
require('../../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../../common/Check.js');
require('../../_chunks/dep-e675c809.js');
require('../../_util/helper.js');
require('../../_chunks/dep-c33ee4fc.js');
require('../../_chunks/dep-f31114fd.js');
require('../../_chunks/dep-eb2281b7.js');
require('../../_chunks/dep-6d1aecc8.js');
require('../../_chunks/dep-8173fd05.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-bbbce181.js');
require('../../_chunks/dep-4c1144f0.js');
require('../../_chunks/dep-6b7adfaa.js');
require('../../_chunks/dep-bafabd9b.js');
require('../../_chunks/dep-28bf72fc.js');
require('../../_chunks/dep-46b250c3.js');
require('../../_chunks/dep-6aeda844.js');
require('../../_chunks/dep-39147135.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('../../_util/noop.js');
require('../../_chunks/dep-49f84ee3.js');
require('../../checkbox/defaultProps.js');
require('react-dom');
require('../../dialog/Dialog.js');
require('../../_chunks/dep-23aa4ed2.js');
require('../../locale/LocalReceiver.js');
require('../../dialog/RenderDialog.js');
require('react-transition-group');
require('../../common/Portal.js');
require('../../_util/dom.js');
require('raf');
require('../../_util/easing.js');
require('../../_util/useLayoutEffect.js');
require('../../_util/useDialogEsc.js');
require('../../dialog/defaultProps.js');
require('../../_util/useSetState.js');
require('../../button/Button.js');
require('../../_util/useRipple.js');
require('../../_util/useAnimation.js');
require('../../_util/setStyle.js');
require('../../loading/index.js');
require('../../loading/Loading.js');
require('../../loading/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('../../loading/defaultProps.js');
require('../../loading/plugin.js');
require('../../button/defaultProps.js');
require('../../_common/js/log/log.js');
require('./useMultiHeader.js');
require('./useClassName.js');
require('../Ellipsis.js');
require('../../tooltip/index.js');
require('../../tooltip/Tooltip.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('react-popper');
require('../../popup/hooks/useTrigger.js');
require('react-is');
require('../../popup/utils/ref.js');
require('../../_util/composeRefs.js');
require('../../popup/utils/transition.js');
require('../../_util/useMutationObserver.js');
require('../../_chunks/dep-d26534d4.js');
require('../../_chunks/dep-8afae264.js');
require('../../_util/useWindowSize.js');
require('../../popup/defaultProps.js');
require('../../tooltip/defaultProps.js');
require('../../tooltip/TooltipLite.js');
require('../../_util/useSwitch.js');
require('../../_util/usePersistFn.js');
require('../../_common/js/utils/getPosition.js');
require('../../hooks/useDebounce.js');
require('../../_chunks/dep-f0b85a46.js');
require('../../_chunks/dep-cc5ddaf7.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CheckboxGroup = checkbox_index.Checkbox.Group;
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();

  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;

    var col = columns[i];
    col.colKey && keys.add(col.colKey);

    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    }
  }

  return keys;
}
function useColumnController(props) {
  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix,
      table = _useConfig.table;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    SettingIcon: tdesignIconsReact.SettingIcon
  }),
      SettingIcon = _useGlobalIcon.SettingIcon;

  var columns = props.columns,
      columnController = props.columnController,
      displayColumns = props.displayColumns,
      columnControllerVisible = props.columnControllerVisible;
  var dialogInstance = React.useRef();

  var enabledColKeys = function () {
    var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || toConsumableArray._toConsumableArray(getColumnKeys(columns))).filter(function (v) {
      return v;
    });

    return new Set(arr);
  }();

  var keys = toConsumableArray._toConsumableArray(getColumnKeys(columns));

  var _useControlled = hooks_useControlled["default"](props, "displayColumns", props.onDisplayColumnsChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      tDisplayColumns = _useControlled2[0],
      setTDisplayColumns = _useControlled2[1];

  var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
  var columnCheckboxKeys = React.useRef(defaultColumnCheckboxKeys);
  React.useEffect(function () {
    var _dialogInstance$curre;

    columnCheckboxKeys.current = toConsumableArray._toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
    (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 ? void 0 : _dialogInstance$curre.update({
      body: getDialogContent()
    });
  }, [displayColumns]);

  function getCheckboxOptions(columns2) {
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;

      var item = columns2[i];

      if (item.colKey) {
        arr.push({
          label: table_hooks_useTableHeader.renderTitle(item, i),
          value: item.colKey,
          disabled: !enabledColKeys.has(item.colKey)
        });
      }

      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      }
    }

    return arr;
  }

  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;

    columnCheckboxKeys.current = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: table_utils.getCurrentRowByKey(columns, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };

  var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
    if (checked) {
      var _props$onColumnChange2;

      var checkboxOptions = getCheckboxOptions(columns);
      var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
        return t.value;
      })) || [];
      columnCheckboxKeys.current = newData;
      (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, {
        type: "check",
        columns: newData,
        e: ctx.e
      });
    } else {
      var _props$onColumnChange3;

      var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
        return t.disabled;
      }).map(function (t) {
        return t.value;
      });
      columnCheckboxKeys.current = disabledColKeys;
      (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, {
        type: "uncheck",
        columns: disabledColKeys,
        e: ctx.e
      });
    }

    dialogInstance.current.update({
      body: getDialogContent()
    });
  };

  function getDialogContent() {
    var checkboxOptions = getCheckboxOptions(columns);
    var intersectionChecked = intersection.intersection_1(columnCheckboxKeys.current, toConsumableArray._toConsumableArray(enabledColKeys));
    var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
    var checkedLength = intersectionChecked.length;
    var isCheckedAll = checkedLength === enabledColKeys.size;
    var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"](["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-body")
    }, /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-table__column-controller-desc")
    }, table.columnConfigDescriptionText), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React__default["default"].createElement(checkbox_index.Checkbox, {
      indeterminate: isIndeterminate,
      checked: isCheckedAll,
      onChange: handleClickAllShowColumns
    }, table.selectAllText)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React__default["default"].createElement(CheckboxGroup, _objectSpread(_objectSpread({
      options: checkboxOptions
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
      value: columnCheckboxKeys.current,
      onChange: handleCheckChange
    })))));
  }

  var handleToggleColumnController = function handleToggleColumnController() {
    dialogInstance.current = dialog_plugin.DialogPlugin.confirm(_objectSpread({
      header: table.columnConfigTitleText,
      body: getDialogContent(),
      confirmBtn: table.confirmText,
      cancelBtn: table.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        setTDisplayColumns(toConsumableArray._toConsumableArray(columnCheckboxKeys.current));

        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro;

          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
            trigger: "cancel"
          });
        }
      },
      onClose: function onClose() {
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro2;

          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
            trigger: "confirm"
          });
        }
      }
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
  };

  React.useEffect(function () {
    if (columnControllerVisible === void 0) return;

    if (dialogInstance.current) {
      columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
    } else {
      columnControllerVisible && handleToggleColumnController();
    }
  }, [columnControllerVisible, dialogInstance]);

  var renderColumnController = function renderColumnController() {
    var _props$columnControll;

    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    if (isColumnController && columnController.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), defineProperty._defineProperty({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"](classes)
    }, /* @__PURE__ */React__default["default"].createElement(button_index.Button, _objectSpread({
      theme: "default",
      variant: "outline",
      onClick: handleToggleColumnController,
      content: table.columnConfigButtonText,
      icon: /* @__PURE__ */React__default["default"].createElement(SettingIcon, null)
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
  };

  return {
    tDisplayColumns: tDisplayColumns,
    renderColumnController: renderColumnController
  };
}

exports["default"] = useColumnController;
exports.getColumnKeys = getColumnKeys;
//# sourceMappingURL=useColumnController.js.map
