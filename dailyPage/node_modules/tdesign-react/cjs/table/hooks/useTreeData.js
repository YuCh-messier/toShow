/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-3415b40f.js');
var toConsumableArray = require('../../_chunks/dep-0944d665.js');
var slicedToArray = require('../../_chunks/dep-8c98b84c.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var cloneDeep = require('../../_chunks/dep-f9ee0156.js');
var get = require('../../_chunks/dep-f0b85a46.js');
var classNames = require('classnames');
var _common_js_table_treeStore = require('../../_common/js/table/tree-store.js');
var table_hooks_useClassName = require('./useClassName.js');
var table_TR = require('../TR.js');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
require('../../_chunks/dep-789d4bfb.js');
require('../../_chunks/dep-12942e66.js');
require('../../_chunks/dep-4c1144f0.js');
require('../../_chunks/dep-be113066.js');
require('../../_chunks/dep-7affd9c7.js');
require('../../_chunks/dep-c15e2539.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-6b7adfaa.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_chunks/dep-ffd983b8.js');
require('../../_chunks/dep-bafabd9b.js');
require('../../_chunks/dep-29ecaf93.js');
require('../../_chunks/dep-28bf72fc.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-46b250c3.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-0dfd91fa.js');
require('../../_chunks/dep-7745815b.js');
require('../../_chunks/dep-cc5ddaf7.js');
require('../../_chunks/dep-f6abffca.js');
require('../../_chunks/dep-93234904.js');
require('../../_chunks/dep-06b861c2.js');
require('../../_common/js/table/utils.js');
require('../../_chunks/dep-49f84ee3.js');
require('../../_common/js/log/log.js');
require('../../hooks/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-bbbce181.js');
require('../../_chunks/dep-901b688e.js');
require('../../_chunks/dep-92d05577.js');
require('../../_chunks/dep-6aeda844.js');
require('../../_chunks/dep-39147135.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('../utils.js');
require('./useFixed.js');
require('../../_common/js/utils/helper.js');
require('../../_chunks/dep-e675c809.js');
require('../../_common/js/utils/getScrollbarWidth.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-23aa4ed2.js');
require('../../_util/easing.js');
require('../../hooks/useDebounce.js');
require('../../_chunks/dep-d26534d4.js');
require('../../_chunks/dep-8afae264.js');
require('../../_util/usePersistFn.js');
require('../Ellipsis.js');
require('../../tooltip/index.js');
require('../../tooltip/Tooltip.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('react-transition-group');
require('react-popper');
require('../../hooks/useControlled.js');
require('../../_chunks/dep-f31114fd.js');
require('../../_chunks/dep-eb2281b7.js');
require('../../_chunks/dep-6d1aecc8.js');
require('../../_util/noop.js');
require('../../_util/useAnimation.js');
require('../../common/Portal.js');
require('react-dom');
require('../../popup/hooks/useTrigger.js');
require('react-is');
require('../../popup/utils/ref.js');
require('../../_util/composeRefs.js');
require('../../popup/utils/transition.js');
require('../../_util/useMutationObserver.js');
require('../../_util/useWindowSize.js');
require('../../popup/defaultProps.js');
require('../../tooltip/defaultProps.js');
require('../../tooltip/TooltipLite.js');
require('../../_util/useSwitch.js');
require('../../_common/js/utils/getPosition.js');
require('./useLazyLoad.js');
require('../../_common/js/utils/observe.js');
require('./useRowspanAndColspan.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTreeData(props) {
  var _props$tree;

  var data = props.data,
      columns = props.columns,
      tree = props.tree,
      rowKey = props.rowKey,
      treeExpandAndFoldIcon = props.treeExpandAndFoldIcon;

  var _useState = React.useState(new _common_js_table_treeStore["default"]()),
      _useState2 = slicedToArray._slicedToArray(_useState, 1),
      store = _useState2[0];

  var _useState3 = React.useState(function () {
    return getTreeNodeColumnCol();
  }),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      treeNodeCol = _useState4[0],
      setTreeNodeCol = _useState4[1];

  var _useState5 = React.useState(data || []),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      dataSource = _useState6[0],
      setDataSource = _useState6[1];

  var _useClassName = table_hooks_useClassName["default"](),
      tableTreeClasses = _useClassName.tableTreeClasses;

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("table"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    AddRectangleIcon: tdesignIconsReact.AddRectangleIcon,
    MinusRectangleIcon: tdesignIconsReact.MinusRectangleIcon
  }),
      AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;

  var rowDataKeys = React.useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  var checkedColumn = React.useMemo(function () {
    return columns.find(function (col) {
      return col.colKey === "row-select";
    });
  }, [columns]);
  var uniqueKeys = React.useMemo(function () {
    var _store$getAllUniqueKe;

    return (store === null || store === void 0 ? void 0 : (_store$getAllUniqueKe = store.getAllUniqueKeys(data, rowDataKeys)) === null || _store$getAllUniqueKe === void 0 ? void 0 : _store$getAllUniqueKe.join()) || "";
  }, [data, rowDataKeys, store]);
  React.useEffect(function () {
    if (!store || !checkedColumn) return;
    var rowValue = get.get_1(dataSource[0], rowDataKeys.rowKey);
    if (!store.treeDataMap.get(rowValue)) return;
    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
  }, [checkedColumn]);
  React.useEffect(function () {
    if (!data || !store) return;

    if (!tree || !Object.keys(tree).length) {
      setDataSource(data);
      return;
    }

    resetData(data);
  }, [uniqueKeys]);
  React.useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns, (_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.treeNodeColumnIndex]);

  function resetData(data2) {
    var _props$tree2;

    var newVal = cloneDeep.cloneDeep_1(data2);
    store.initialTreeStore(newVal, props.columns, rowDataKeys);

    if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
      newVal = store.expandAll(newVal, rowDataKeys);
    }

    setDataSource(newVal);
  }

  function getTreeNodeStyle(level) {
    var _props$tree3, _props$tree4;

    if (level === void 0) return;
    var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) === void 0 ? 24 : (_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent;
    return indent ? {
      paddingLeft: "".concat(level * indent || 1, "px")
    } : {};
  }

  function toggleExpandData(p) {
    var newData = store.toggleExpandData(p, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));

    if (p.trigger === "inner") {
      var _props$onTreeExpandCh, _store$treeDataMap;

      var rowValue = get.get_1(p.row, rowDataKeys.rowKey);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: store === null || store === void 0 ? void 0 : (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue)
      });
    }
  }

  function getTreeNodeColumnCol() {
    var _props$tree5;

    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.treeNodeColumnIndex) || 0;

    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;

      treeNodeColumnIndex += 1;
    }

    return columns2[treeNodeColumnIndex];
  }

  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;

    var newCol = _objectSpread({}, treeNodeCol);

    newCol.cell = function (p) {
      var cellInfo = table_TR.renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }), {
        cellEmptyContent: props.cellEmptyContent
      });
      var currentState = store.treeDataMap.get(get.get_1(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

      var classes = defineProperty._defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);

      var childrenNodes = get.get_1(p.row, rowDataKeys.childrenKey);

      if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
        var _store$treeDataMap$ge;

        var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get.get_1(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
        var type = expanded ? "fold" : "expand";
        var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
          type: type
        }) || (expanded ? /* @__PURE__ */React__default["default"].createElement(MinusRectangleIcon, null) : /* @__PURE__ */React__default["default"].createElement(AddRectangleIcon, null));
        var iconNode = treeExpandAndFoldIcon ? treeExpandAndFoldIcon(_objectSpread({
          type: type
        }, p)) : defaultIconNode;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames__default["default"]([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React__default["default"].createElement("span", {
          className: tableTreeClasses.icon,
          onClick: function onClick() {
            return toggleExpandData(_objectSpread(_objectSpread({}, p), {}, {
              trigger: "inner"
            }));
          }
        }, iconNode), cellInfo);
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: colStyle,
        className: classNames__default["default"]([classes, tableTreeClasses.leafNode])
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: tableTreeClasses.icon
      }), cellInfo);
    };

    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return table_TR.renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }

    return newCol;
  }

  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);

    var newData = toConsumableArray._toConsumableArray(dataSource);

    newData[rowIndex] = newRowData;
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }

  function getData(key) {
    return store.getData(key);
  }

  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }

  function appendTo(key, newData) {
    if (!key) {
      setDataSource(toConsumableArray._toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
      return;
    }

    setDataSource(toConsumableArray._toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
  }

  function insertAfter(rowValue, newData) {
    setDataSource(toConsumableArray._toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
  }

  function insertBefore(rowValue, newData) {
    setDataSource(toConsumableArray._toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
  }

  function expandAll() {
    setDataSource(toConsumableArray._toConsumableArray(store.expandAll(dataSource, rowDataKeys)));
  }

  function foldAll() {
    setDataSource(toConsumableArray._toConsumableArray(store.foldAll(dataSource, rowDataKeys)));
  }

  function swapData(params) {
    var r = store.swapData(params.data, params, rowDataKeys);

    if (r.result) {
      setDataSource(toConsumableArray._toConsumableArray(r.dataSource));
    } else {
      var _props$onAbnormalDrag;

      var params2 = {
        code: r.code,
        reason: r.reason
      };
      (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
    }
  }

  function getTreeNode() {
    return store.getTreeNode(dataSource, rowDataKeys);
  }

  function getTreeExpandedRow() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
  }

  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    swapData: swapData,
    setData: setData,
    getData: getData,
    remove: remove,
    appendTo: appendTo,
    insertAfter: insertAfter,
    insertBefore: insertBefore,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData,
    expandAll: expandAll,
    foldAll: foldAll,
    getTreeNode: getTreeNode,
    resetData: resetData,
    getTreeExpandedRow: getTreeExpandedRow
  };
}

exports["default"] = useTreeData;
//# sourceMappingURL=useTreeData.js.map
