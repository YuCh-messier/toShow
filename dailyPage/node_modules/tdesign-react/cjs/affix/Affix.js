/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var isFunction = require('../_chunks/dep-c15e2539.js');
var _util_dom = require('../_util/dom.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var affix_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('raf');
require('../_chunks/dep-23aa4ed2.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-3c510ebe.js');
require('../_util/easing.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-3415b40f.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var Affix = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      zIndex = props.zIndex,
      container = props.container,
      offsetBottom = props.offsetBottom,
      offsetTop = props.offsetTop,
      className = props.className,
      style = props.style,
      onFixedChange = props.onFixedChange;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var affixRef = React.useRef(null);
  var affixWrapRef = React.useRef(null);
  var placeholderEL = React.useRef(null);
  var scrollContainer = React.useRef(null);
  var ticking = React.useRef(false);
  var handleScroll = React.useCallback(function () {
    if (!ticking.current) {
      window.requestAnimationFrame(function () {
        var _affixWrapRef$current, _affixWrapRef$current2;

        var _ref = (_affixWrapRef$current = (_affixWrapRef$current2 = affixWrapRef.current) === null || _affixWrapRef$current2 === void 0 ? void 0 : _affixWrapRef$current2.getBoundingClientRect()) !== null && _affixWrapRef$current !== void 0 ? _affixWrapRef$current : {
          top: 0
        },
            _ref$top = _ref.top,
            wrapToTop = _ref$top === void 0 ? 0 : _ref$top,
            _ref$width = _ref.width,
            wrapWidth = _ref$width === void 0 ? 0 : _ref$width,
            _ref$height = _ref.height,
            wrapHeight = _ref$height === void 0 ? 0 : _ref$height;

        var containerToTop = 0;

        if (scrollContainer.current instanceof HTMLElement) {
          containerToTop = scrollContainer.current.getBoundingClientRect().top;
        }

        var calcTop = wrapToTop - containerToTop;
        var containerHeight = scrollContainer.current[scrollContainer.current instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
        var calcBottom = containerToTop + containerHeight - (offsetBottom !== null && offsetBottom !== void 0 ? offsetBottom : 0);
        var fixedTop;

        if (offsetTop !== void 0 && calcTop <= offsetTop) {
          fixedTop = containerToTop + offsetTop;
        } else if (offsetBottom !== void 0 && wrapToTop >= calcBottom) {
          fixedTop = calcBottom;
        } else {
          fixedTop = false;
        }

        if (affixRef.current) {
          var affixed = fixedTop !== false;
          var placeholderStatus = affixWrapRef.current.contains(placeholderEL.current);

          if (affixed) {
            affixRef.current.className = "".concat(classPrefix, "-affix");
            affixRef.current.style.top = "".concat(fixedTop, "px");
            affixRef.current.style.width = "".concat(wrapWidth, "px");
            affixRef.current.style.height = "".concat(wrapHeight, "px");

            if (zIndex) {
              affixRef.current.style.zIndex = "".concat(zIndex);
            }

            if (!placeholderStatus) {
              placeholderEL.current.style.width = "".concat(wrapWidth, "px");
              placeholderEL.current.style.height = "".concat(wrapHeight, "px");
              affixWrapRef.current.appendChild(placeholderEL.current);
            }
          } else {
            affixRef.current.removeAttribute("class");
            affixRef.current.removeAttribute("style");
            placeholderStatus && placeholderEL.current.remove();
          }

          if (isFunction.isFunction_1(onFixedChange)) {
            onFixedChange(affixed, {
              top: +fixedTop
            });
          }
        }

        ticking.current = false;
      });
    }

    ticking.current = true;
  }, [classPrefix, offsetBottom, offsetTop, onFixedChange, zIndex]);
  React.useImperativeHandle(ref, function () {
    return {
      handleScroll: handleScroll
    };
  });
  React.useEffect(function () {
    placeholderEL.current = document.createElement("div");
  }, []);
  React.useEffect(function () {
    scrollContainer.current = _util_dom.getScrollContainer(container);

    if (scrollContainer.current) {
      handleScroll();
      scrollContainer.current.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleScroll);
      return function () {
        scrollContainer.current.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleScroll);
      };
    }
  }, [container, handleScroll]);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixWrapRef,
    className: className,
    style: style
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixRef
  }, children));
});
Affix.displayName = "Affix";
Affix.defaultProps = affix_defaultProps.affixDefaultProps;

exports["default"] = Affix;
//# sourceMappingURL=Affix.js.map
