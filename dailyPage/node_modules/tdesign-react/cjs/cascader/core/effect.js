/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-8c98b84c.js');
var isNumber = require('../../_chunks/dep-49f84ee3.js');
var isFunction = require('../../_chunks/dep-c15e2539.js');
var cloneDeep = require('../../_chunks/dep-f9ee0156.js');
var cascader_core_helper = require('./helper.js');
require('../../_chunks/dep-789d4bfb.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-12942e66.js');
require('../../_chunks/dep-4c1144f0.js');
require('../../_chunks/dep-be113066.js');
require('../../_chunks/dep-7affd9c7.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-6b7adfaa.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-ffd983b8.js');
require('../../_chunks/dep-bafabd9b.js');
require('../../_chunks/dep-29ecaf93.js');
require('../../_chunks/dep-28bf72fc.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-46b250c3.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-0dfd91fa.js');
require('../../_chunks/dep-7745815b.js');
require('../../_chunks/dep-239e4706.js');

function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
  var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      setTreeNodes = cascaderContext.setTreeNodes,
      setExpend = cascaderContext.setExpend,
      value = cascaderContext.value,
      max = cascaderContext.max,
      valueType = cascaderContext.valueType;
  var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
  if (isDisabled) return;

  if (propsTrigger === trigger && !node.isLeaf()) {
    var expanded = node.setExpanded(true);
    treeStore.refreshNodes();
    treeStore.replaceExpanded(expanded);
    var nodes = treeStore.getNodes().filter(function (node2) {
      return node2.visible;
    });
    setTreeNodes(nodes);

    if (multiple) {
      setExpend(expanded);
    }
  }

  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
    treeStore.resetChecked();
    var checked = node.setChecked(!node.checked);

    var _checked = slicedToArray._slicedToArray(checked, 1),
        value2 = _checked[0];

    setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
      return item.value;
    }), "check", node.getModel());

    if (!checkStrictly) {
      setVisible(false, {});
    }
  }
}
function valueChangeEffect(node, cascaderContext) {
  var disabled = cascaderContext.disabled,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal,
      multiple = cascaderContext.multiple,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      treeNodes = cascaderContext.treeNodes,
      treeStore = cascaderContext.treeStore,
      valueType = cascaderContext.valueType;

  if (!node || disabled || node.disabled) {
    return;
  }

  var checked = node.setChecked(!node.isChecked());

  if (isNumber.isNumber_1(max) && max < 0) {
    console.warn("TDesign Warn:", "max should > 0");
  }

  if (checked.length > max && isNumber.isNumber_1(max) && max > 0) {
    return;
  }

  if (checked.length === 0) {
    var expanded = treeStore.getExpanded();
    setTimeout(function () {
      treeStore.replaceExpanded(expanded);
      treeStore.refreshNodes();
    }, 0);
  }

  if (!multiple) {
    setVisible(false, {});
  }

  var isSelectAll = treeNodes.every(function (item) {
    return checked.indexOf(item.value) > -1;
  });

  if (inputVal && isSelectAll) {
    setVisible(false, {});
  }

  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, "check", node.getModel());
}
function closeIconClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setExpend = cascaderContext.setExpend,
      setValue = cascaderContext.setValue;
  setVisible(false, {});

  if (multiple) {
    setExpend([]);
  }

  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext, index, onRemove) {
  var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue,
      value = cascaderContext.value,
      valueType = cascaderContext.valueType,
      treeStore = cascaderContext.treeStore;
  if (disabled) return;
  var newValue = cloneDeep.cloneDeep_1(value);
  var res = newValue.splice(index, 1);
  var node = treeStore.getNodes(res[0])[0];
  setValue(newValue, "uncheck", node.getModel());
  var checked = node.setChecked(!node.isChecked());
  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, "uncheck", node.getModel());

  if (isFunction.isFunction_1(onRemove)) {
    onRemove({
      value: checked,
      node: node
    });
  }
}
var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
  if (!treeStore) return;
  var nodes = [];

  if (inputVal) {
    var filterMethods = function filterMethods(node) {
      if (!node.isLeaf()) return;

      if (isFunction.isFunction_1(filter)) {
        return filter("".concat(inputVal), node);
      }

      var fullPathLabel = cascader_core_helper.getFullPathLabel(node, "");
      return fullPathLabel.indexOf("".concat(inputVal)) > -1;
    };

    nodes = treeStore.nodes.filter(filterMethods);
  } else {
    nodes = treeStore.getNodes().filter(function (node) {
      return node.visible;
    });
  }

  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
  var treeValue = cascader_core_helper.getTreeValue(value);
  if (!treeStore) return;

  if (Array.isArray(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */new Map();

    var _treeValue = slicedToArray._slicedToArray(treeValue, 1),
        val = _treeValue[0];

    if (val) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);

      if (!node) {
        treeStore.refreshNodes();
        return;
      }

      node.getParents().forEach(function (tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    } else {
      treeStore.resetExpanded();
    }
  }

  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }

  treeStore.refreshNodes();
};

exports.closeIconClickEffect = closeIconClickEffect;
exports.expendClickEffect = expendClickEffect;
exports.handleRemoveTagEffect = handleRemoveTagEffect;
exports.treeNodesEffect = treeNodesEffect;
exports.treeStoreExpendEffect = treeStoreExpendEffect;
exports.valueChangeEffect = valueChangeEffect;
//# sourceMappingURL=effect.js.map
