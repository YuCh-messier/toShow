/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-3415b40f.js');
var React = require('react');
var classNames = require('classnames');
var hooks_useConfig = require('../../hooks/useConfig.js');
var _util_renderTNode = require('../../_util/renderTNode.js');
var form_const = require('../const.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-bbbce181.js');
require('../../_chunks/dep-4c1144f0.js');
require('../../_chunks/dep-be113066.js');
require('../../_chunks/dep-7affd9c7.js');
require('../../_chunks/dep-c15e2539.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-6b7adfaa.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_chunks/dep-ffd983b8.js');
require('../../_chunks/dep-bafabd9b.js');
require('../../_chunks/dep-29ecaf93.js');
require('../../_chunks/dep-28bf72fc.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-46b250c3.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-901b688e.js');
require('../../_chunks/dep-92d05577.js');
require('../../_chunks/dep-6aeda844.js');
require('../../_chunks/dep-39147135.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function useFormItemStyle(props) {
  var _classNames, _classNames2;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var className = props.className,
      help = props.help,
      tips = props.tips,
      name = props.name,
      status = props.status,
      successBorder = props.successBorder,
      errorList = props.errorList,
      successList = props.successList,
      layout = props.layout,
      verifyStatus = props.verifyStatus,
      colon = props.colon,
      label = props.label,
      labelWidth = props.labelWidth,
      labelAlign = props.labelAlign,
      requiredMark = props.requiredMark,
      showErrorMessage = props.showErrorMessage,
      innerRules = props.innerRules;
  var renderName = Array.isArray(name) ? name.join("-") : name;
  var renderStatus = status || verifyStatus;
  var helpNode = help && /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-input__help")
  }, _util_renderTNode["default"](help));
  var extraNode = React.useMemo(function () {
    var _errorList$;

    var extra = tips ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__extra"),
      title: tips
    }, tips) : null;

    if (showErrorMessage && errorList !== null && errorList !== void 0 && (_errorList$ = errorList[0]) !== null && _errorList$ !== void 0 && _errorList$.message) {
      extra = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: errorList[0].message
      }, errorList[0].message);
    } else if (successList.length) {
      extra = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: successList[0].message
      }, successList[0].message);
    }

    return extra;
  }, [showErrorMessage, errorList, successList, tips, classPrefix]);
  var formItemClass = classNames__default["default"]("".concat(classPrefix, "-form__item"), className, (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form-item__").concat(renderName), renderName), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-help"), helpNode), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-extra"), extraNode), _classNames));
  var formItemLabelClass = classNames__default["default"]("".concat(classPrefix, "-form__label"), (_classNames2 = {}, defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
    return rule.required;
  }).length > 0), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--top"), labelAlign === "top" || !labelWidth), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--left"), labelAlign === "left" && labelWidth), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--right"), labelAlign === "right" && labelWidth), _classNames2));

  var contentClass = function contentClass() {
    var _classNames4;

    var controlCls = "".concat(classPrefix, "-form__controls");
    if (!showErrorMessage) return controlCls;
    var isSuccess = renderStatus === form_const.ValidateStatus.SUCCESS;

    if (isSuccess) {
      return classNames__default["default"](controlCls, "".concat(classPrefix, "-is-success"), defineProperty._defineProperty({}, "".concat(classPrefix, "-form--success-border"), successBorder));
    }

    return classNames__default["default"](controlCls, (_classNames4 = {}, defineProperty._defineProperty(_classNames4, "".concat(classPrefix, "-is-warning"), renderStatus === "warning"), defineProperty._defineProperty(_classNames4, "".concat(classPrefix, "-is-error"), ["fail", "error"].includes(renderStatus)), _classNames4));
  };

  var labelStyle = {};
  var contentStyle = {};

  if (label && labelWidth && labelAlign !== "top") {
    if (typeof labelWidth === "number") {
      labelStyle = {
        width: "".concat(labelWidth, "px")
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? "".concat(labelWidth, "px") : ""
      };
    } else {
      labelStyle = {
        width: labelWidth
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? labelWidth : ""
      };
    }
  }

  return {
    formItemClass: formItemClass,
    formItemLabelClass: formItemLabelClass,
    contentClass: contentClass,
    labelStyle: labelStyle,
    contentStyle: contentStyle,
    helpNode: helpNode,
    extraNode: extraNode
  };
}

exports["default"] = useFormItemStyle;
//# sourceMappingURL=useFormItemStyle.js.map
