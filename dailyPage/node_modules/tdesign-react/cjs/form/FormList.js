/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../_chunks/dep-0944d665.js');
var defineProperty = require('../_chunks/dep-3415b40f.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var React = require('react');
var merge = require('../_chunks/dep-bbbce181.js');
var get = require('../_chunks/dep-f0b85a46.js');
var form_FormContext = require('./FormContext.js');
var form_utils_index = require('./utils/index.js');
var _common_js_log_log = require('../_common/js/log/log.js');
require('../_chunks/dep-789d4bfb.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_chunks/dep-cc5ddaf7.js');
require('../_chunks/dep-f6abffca.js');
require('../_chunks/dep-93234904.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var key = 0;

var FormList = function FormList(props) {
  var _useFormContext = form_FormContext.useFormContext(),
      formMapRef = _useFormContext.formMapRef;

  var name = props.name,
      _props$initialData = props.initialData,
      initialData = _props$initialData === void 0 ? [] : _props$initialData,
      rules = props.rules,
      children = props.children;

  var _useState = React.useState(initialData),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      initialValue = _useState2[0],
      setInitialValue = _useState2[1];

  var _useState3 = React.useState(initialData.map(function (data, index) {
    return _objectSpread({
      key: key += 1,
      name: index,
      isListField: true
    }, data);
  })),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      fields = _useState4[0],
      setFields = _useState4[1];

  var formListMapRef = React.useRef( /* @__PURE__ */new Map());
  var formListRef = React.useRef();
  var operation = {
    add: function add(defaultValue, insertIndex) {
      var cloneFields = toConsumableArray._toConsumableArray(fields);

      var index = insertIndex !== null && insertIndex !== void 0 ? insertIndex : cloneFields.length;
      cloneFields.splice(index, 0, {
        key: key += 1,
        name: index,
        isListField: true
      });
      cloneFields.forEach(function (field, index2) {
        return Object.assign(field, {
          name: index2
        });
      });
      setFields(cloneFields);

      if (typeof defaultValue !== "undefined") {
        var nextInitialValue = toConsumableArray._toConsumableArray(initialValue);

        nextInitialValue[index] = defaultValue;
        setInitialValue(nextInitialValue);
      }
    },
    remove: function remove(index) {
      var nextFields = fields.filter(function (_, i) {
        if (Array.isArray(index)) return !index.includes(i);
        return i !== index;
      }).map(function (field, index2) {
        return Object.assign(field, {
          name: index2
        });
      });
      setInitialValue(initialValue.filter(function (_, idx) {
        return idx !== index;
      }));
      setFields(nextFields);
    },
    move: function move(from, to) {
      var cloneFields = toConsumableArray._toConsumableArray(fields);

      var fromItem = _objectSpread({}, cloneFields[from]);

      var toItem = _objectSpread({}, cloneFields[to]);

      cloneFields[to] = fromItem;
      cloneFields[from] = toItem;
      setFields(cloneFields);
    }
  };

  function setListFields(fieldData, callback) {
    setFields(fieldData.map(function (_, index) {
      return {
        key: key += 1,
        name: index,
        isListField: true
      };
    }));
    requestAnimationFrame(function () {
      toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
        var name2 = formItemRef.current.name;
        var data = get.get_1(fieldData, name2);
        callback(formItemRef, data);
      });
    });
  }

  React.useEffect(function () {
    toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
      var _formItemRef$current = formItemRef.current,
          name2 = _formItemRef$current.name,
          value = _formItemRef$current.value;
      if (value) return;
      var data = get.get_1(initialValue, name2);
      formItemRef.current.setField({
        value: data,
        status: "not"
      });
    });
  }, [fields, initialValue]);
  React.useEffect(function () {
    if (!name || !formMapRef) return;
    formMapRef.current.set(name, formListRef);
    return function () {
      formMapRef.current["delete"](name);
    };
  }, [name]);
  React.useImperativeHandle(formListRef, function () {
    return {
      name: name,
      getValue: function getValue() {
        var formListValue = [];

        toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current2 = formItemRef.current,
              name2 = _formItemRef$current2.name,
              getValue = _formItemRef$current2.getValue;
          var fieldValue = form_utils_index.calcFieldValue(name2, getValue());
          merge.merge_1(formListValue, fieldValue);
        });

        return formListValue;
      },
      validate: function validate() {
        var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";
        var resultList = [];

        var validates = toConsumableArray._toConsumableArray(formListMapRef.current.values()).map(function (formItemRef) {
          return formItemRef.current.validate(trigger);
        });

        return new Promise(function (resolve) {
          Promise.all(validates).then(function (validateResult) {
            validateResult.forEach(function (result) {
              var errorKey = Object.keys(result)[0];
              var errorKeyList = errorKey.split(",");
              var errorValue = Object.values(result)[0];
              errorValue = form_utils_index.calcFieldValue(errorKeyList, errorValue);
              merge.merge_1(resultList, errorValue);
            });
            var errorItems = validateResult.filter(function (item) {
              return Object.values(item)[0] !== true;
            });

            if (errorItems.length) {
              resolve(defineProperty._defineProperty({}, String(name), resultList));
            } else {
              resolve(defineProperty._defineProperty({}, String(name), true));
            }
          });
        });
      },
      setValue: function setValue(fieldData) {
        setListFields(fieldData, function (formItemRef, data) {
          var _formItemRef$current3;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current3 = formItemRef.current) === null || _formItemRef$current3 === void 0 ? void 0 : _formItemRef$current3.setValue(data);
        });
      },
      setField: function setField(fieldData) {
        var value = fieldData.value,
            status = fieldData.status;
        setListFields(value, function (formItemRef, data) {
          var _formItemRef$current4;

          formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 ? void 0 : _formItemRef$current4.setField({
            value: data,
            status: status
          });
        });
      },
      resetField: function resetField() {
        toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          formItemRef.current.resetField();
        });

        setInitialValue([]);
      },
      setValidateMessage: function setValidateMessage(fieldData) {
        toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          var name2 = formItemRef.current.name;
          var data = get.get_1(fieldData, name2);
          formItemRef.current.setValidateMessage(data);
        });
      },
      resetValidate: function resetValidate() {
        toConsumableArray._toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          formItemRef.current.resetValidate();
        });
      }
    };
  });

  if (typeof children !== "function") {
    _common_js_log_log["default"].error("Form", "FormList's children must be a function!");
    return null;
  }

  return /* @__PURE__ */React__default["default"].createElement(form_FormContext.FormListContext.Provider, {
    value: {
      name: name,
      rules: rules,
      formListMapRef: formListMapRef
    }
  }, children(fields, operation));
};

FormList.displayName = "FormList";

exports["default"] = FormList;
//# sourceMappingURL=FormList.js.map
