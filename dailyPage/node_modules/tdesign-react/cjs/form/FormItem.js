/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('../_chunks/dep-6c4c2f3e.js');
var index = require('../_chunks/dep-7769bf72.js');
var defineProperty = require('../_chunks/dep-3415b40f.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var React = require('react');
var isObject = require('../_chunks/dep-b282bced.js');
var isString = require('../_chunks/dep-23aa4ed2.js');
var get = require('../_chunks/dep-f0b85a46.js');
var merge = require('../_chunks/dep-bbbce181.js');
var isFunction = require('../_chunks/dep-c15e2539.js');
var keysIn$1 = require('../_chunks/dep-4c1144f0.js');
var _setToString = require('../_chunks/dep-92d05577.js');
var _baseRest = require('../_chunks/dep-901b688e.js');
var _baseGetTag = require('../_chunks/dep-1ad27019.js');
var isObjectLike$1 = require('../_chunks/dep-3c510ebe.js');
var isPlainObject$1 = require('../_chunks/dep-6aeda844.js');
var toString$2 = require('../_chunks/dep-93234904.js');
var eq$1 = require('../_chunks/dep-b8187df5.js');
var _isIterateeCall = require('../_chunks/dep-39147135.js');
var _baseClone = require('../_chunks/dep-12942e66.js');
var _createCompounder = require('../_chunks/dep-8173fd05.js');
var tdesignIconsReact = require('tdesign-icons-react');
var form_utils_index = require('./utils/index.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var form_hooks_useForm = require('./hooks/useForm.js');
var form_formModel = require('./formModel.js');
var form_FormContext = require('./FormContext.js');
var form_hooks_useFormItemStyle = require('./hooks/useFormItemStyle.js');
var form_defaultProps = require('./defaultProps.js');
var form_useInitialData = require('./useInitialData.js');
var form_const = require('./const.js');
require('../_chunks/dep-789d4bfb.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-cc5ddaf7.js');
require('../_chunks/dep-f6abffca.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-0dfd91fa.js');
require('../_chunks/dep-7745815b.js');
require('../_chunks/dep-0944d665.js');
require('../config-provider/ConfigContext.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('../_chunks/dep-06b861c2.js');
require('../_common/js/log/log.js');
require('../_chunks/dep-239e4706.js');
require('../_chunks/dep-49f84ee3.js');
require('../_common/js/utils/helper.js');
require('../_chunks/dep-e675c809.js');
require('classnames');
require('../_util/renderTNode.js');
require('../tree/Tree.js');
require('react-transition-group');
require('../_util/usePersistFn.js');
require('../tree/useTreeConfig.js');
require('../locale/LocalReceiver.js');
require('../tree/useControllable.js');
require('../hooks/useControlled.js');
require('../_chunks/dep-f31114fd.js');
require('../_chunks/dep-eb2281b7.js');
require('../_chunks/dep-6d1aecc8.js');
require('../_util/noop.js');
require('../tree/TreeItem.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../_util/dom.js');
require('raf');
require('../_util/easing.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../checkbox/index.js');
require('../_chunks/dep-7a0248f1.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../common/Check.js');
require('../_util/helper.js');
require('../_chunks/dep-c33ee4fc.js');
require('../checkbox/defaultProps.js');
require('../tree/useDraggable.js');
require('../_chunks/dep-baf60a69.js');
require('../_chunks/dep-d26534d4.js');
require('../_chunks/dep-8afae264.js');
require('../tree/TreeDraggableContext.js');
require('../_util/createHookContext.js');
require('../_util/composeRefs.js');
require('../tree/useStore.js');
require('../_chunks/dep-f9ee0156.js');
require('../_util/useUpdateEffect.js');
require('../_util/useLayoutEffect.js');
require('../_common/js/tree/tree-store.js');
require('../_chunks/dep-f4742892.js');
require('../_chunks/dep-482517f0.js');
require('../_chunks/dep-5cdbc06c.js');
require('../_common/js/tree/tree-node.js');
require('../_common/js/tree/tree-node-model.js');
require('../_chunks/dep-64a370bf.js');
require('../_chunks/dep-b5d52e6f.js');
require('../_chunks/dep-172e66ee.js');
require('../cascader/Cascader.js');
require('../cascader/components/Panel.js');
require('../cascader/components/Item.js');
require('../_util/useCommonClassName.js');
require('../cascader/core/helper.js');
require('../cascader/core/className.js');
require('../cascader/core/effect.js');
require('../select-input/index.js');
require('../select-input/SelectInput.js');
require('../popup/index.js');
require('../popup/Popup.js');
require('react-popper');
require('../popup/hooks/useTrigger.js');
require('react-is');
require('../popup/utils/ref.js');
require('../popup/utils/transition.js');
require('../_util/useMutationObserver.js');
require('../_util/useWindowSize.js');
require('../popup/defaultProps.js');
require('../select-input/useSingle.js');
require('../input/index.js');
require('../input/Input.js');
require('../input/InputGroup.js');
require('../input/defaultProps.js');
require('../select-input/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/TagInput.js');
require('../_util/useDragSorter.js');
require('../tag-input/useTagScroll.js');
require('../tag-input/useTagList.js');
require('../tag/index.js');
require('../tag/Tag.js');
require('../tag/CheckTag.js');
require('../tag/defaultProps.js');
require('../tag-input/useHover.js');
require('../tag-input/defaultProps.js');
require('../select-input/useOverlayInnerStyle.js');
require('../select-input/defaultProps.js');
require('../common/FakeArrow.js');
require('../cascader/hooks.js');
require('../cascader/defaultProps.js');
require('../upload/upload.js');
require('../upload/themes/NormalFile.js');
require('../link/index.js');
require('../link/Link.js');
require('../_common/js/upload/utils.js');
require('../upload/themes/DraggerFile.js');
require('../button/index.js');
require('../button/Button.js');
require('../button/defaultProps.js');
require('../hooks/useCommonClassName.js');
require('../upload/hooks/useDrag.js');
require('../upload/themes/ImageCard.js');
require('../image-viewer/index.js');
require('../image-viewer/ImageViewer.js');
require('../_chunks/dep-a6e7c47b.js');
require('../tooltip/index.js');
require('../tooltip/Tooltip.js');
require('../tooltip/defaultProps.js');
require('../tooltip/TooltipLite.js');
require('../_util/useSwitch.js');
require('../_common/js/utils/getPosition.js');
require('../image-viewer/utils.js');
require('../dialog/index.js');
require('../dialog/Dialog.js');
require('../dialog/RenderDialog.js');
require('../_util/useDialogEsc.js');
require('../dialog/defaultProps.js');
require('../_util/useSetState.js');
require('../dialog/plugin.js');
require('../image-viewer/hooks/useMirror.js');
require('../image-viewer/hooks/usePosition.js');
require('../image-viewer/hooks/useIndex.js');
require('../image-viewer/hooks/useRotate.js');
require('../image-viewer/hooks/useScale.js');
require('../image-viewer/hooks/useIconMap.js');
require('../image-viewer/defaultProps.js');
require('../image-viewer/hooks/useImageScale.js');
require('../image-viewer/hooks/useList.js');
require('../image-viewer/hooks/useViewerScale.js');
require('../upload/themes/MultipleFlowList.js');
require('../upload/hooks/useUpload.js');
require('../_common/js/upload/main.js');
require('../_common/js/upload/xhr.js');
require('../upload/defaultProps.js');
require('../upload/themes/CustomFile.js');
require('../range-input/RangeInput.js');
require('../range-input/defaultProps.js');
require('../transfer/Transfer.js');
require('../transfer/TransferList.js');
require('../transfer/utils.js');
require('../pagination/index.js');
require('../pagination/Pagination.js');
require('../select/index.js');
require('../select/base/Select.js');
require('../select/util/helper.js');
require('../select/base/OptionGroup.js');
require('../select/defaultProps.js');
require('../select/base/Option.js');
require('../select/base/PopupContent.js');
require('../input-number/index.js');
require('../input-number/InputNumber.js');
require('../input-number/useInputNumber.js');
require('../_common/js/input-number/number.js');
require('../_common/js/input-number/large-number.js');
require('../input-number/defaultProps.js');
require('../input-adornment/InputAdornment.js');
require('../pagination/hooks/useBoundaryJumper.js');
require('../pagination/hooks/usePrevNextJumper.js');
require('../pagination/hooks/usePageNumber.js');
require('../pagination/hooks/useTotal.js');
require('../pagination/validators.js');
require('../pagination/defaultProps.js');
require('../transfer/defaultProps.js');
require('../date-picker/DateRangePicker.js');
require('dayjs');
require('../range-input/index.js');
require('../range-input/RangeInputPopup.js');
require('../date-picker/panel/RangePanel.js');
require('../date-picker/panel/PanelContent.js');
require('../date-picker/base/Header.js');
require('../jumper/index.js');
require('../jumper/Jumper.js');
require('../jumper/defaultProps.js');
require('../date-picker/base/Table.js');
require('../date-picker/base/Cell.js');
require('../_common/js/date-picker/utils.js');
require('../_chunks/dep-de26ea20.js');
require('../_common/js/date-picker/format.js');
require('../time-picker/index.js');
require('../time-picker/TimePicker.js');
require('../time-picker/TimeRangePicker.js');
require('../time-picker/panel/TimePickerPanel.js');
require('../time-picker/panel/SinglePanel.js');
require('../time-picker/hooks/useTimePickerTextConfig.js');
require('../_common/js/time-picker/const.js');
require('../_common/js/time-picker/utils.js');
require('../hooks/useDebounce.js');
require('../hooks/usePropsRef.js');
require('../time-picker/defaultProps.js');
require('../date-picker/panel/ExtraContent.js');
require('../date-picker/base/Footer.js');
require('../date-picker/hooks/useTableData.js');
require('../date-picker/hooks/useDisableDate.js');
require('../date-picker/hooks/useRange.js');
require('../date-picker/hooks/useRangeValue.js');
require('../date-picker/defaultProps.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var copyObject = keysIn$1._copyObject,
    createAssigner = merge._createAssigner,
    keysIn = keysIn$1.keysIn_1;
/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */

var assignInWith$1 = createAssigner(function (object, source, srcIndex, customizer) {
  copyObject(source, keysIn(source), object, customizer);
});
var assignInWith_1 = assignInWith$1;

var baseGetTag = _baseGetTag._baseGetTag,
    isObjectLike = isObjectLike$1.isObjectLike_1,
    isPlainObject = isPlainObject$1.isPlainObject_1;
/** `Object#toString` result references. */

var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */

function isError$2(value) {
  if (!isObjectLike(value)) {
    return false;
  }

  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
}

var isError_1 = isError$2;

var apply = _setToString._apply,
    baseRest = _baseRest._baseRest,
    isError$1 = isError_1;
/**
 * Attempts to invoke `func`, returning either the result or the caught error
 * object. Any additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Function} func The function to attempt.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the `func` result or error object.
 * @example
 *
 * // Avoid throwing errors for invalid selectors.
 * var elements = _.attempt(function(selector) {
 *   return document.querySelectorAll(selector);
 * }, '>_>');
 *
 * if (_.isError(elements)) {
 *   elements = [];
 * }
 */

var attempt$1 = baseRest(function (func, args) {
  try {
    return apply(func, undefined, args);
  } catch (e) {
    return isError$1(e) ? e : new Error(e);
  }
});
var attempt_1 = attempt$1;

var arrayMap = toString$2._arrayMap;
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */

function baseValues$1(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

var _baseValues = baseValues$1;

var eq = eq$1.eq_1;
/** Used for built-in method references. */

var objectProto$1 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
/**
 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
 * of source objects to the destination object for all destination properties
 * that resolve to `undefined`.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */

function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
  if (objValue === undefined || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
    return srcValue;
  }

  return objValue;
}

var _customDefaultsAssignIn = customDefaultsAssignIn$1;

/** Used to escape characters for inclusion in compiled string literals. */
var stringEscapes = {
  '\\': '\\',
  "'": "'",
  '\n': 'n',
  '\r': 'r',
  "\u2028": 'u2028',
  "\u2029": 'u2029'
};
/**
 * Used by `_.template` to escape characters for inclusion in compiled string literals.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */

function escapeStringChar$1(chr) {
  return '\\' + stringEscapes[chr];
}

var _escapeStringChar = escapeStringChar$1;

/** Used to match template delimiters. */
var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
var _reInterpolate = reInterpolate$2;

var basePropertyOf = _createCompounder._basePropertyOf;
/** Used to map characters to HTML entities. */

var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */

var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
var _escapeHtmlChar = escapeHtmlChar$1;

var escapeHtmlChar = _escapeHtmlChar,
    toString$1 = toString$2.toString_1;
/** Used to match HTML entities and HTML characters. */

var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */

function escape$1(string) {
  string = toString$1(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
}

var _escape = escape$1;

/** Used to match template delimiters. */
var reEscape$1 = /<%-([\s\S]+?)%>/g;
var _reEscape = reEscape$1;

/** Used to match template delimiters. */
var reEvaluate$1 = /<%([\s\S]+?)%>/g;
var _reEvaluate = reEvaluate$1;

var escape = _escape,
    reEscape = _reEscape,
    reEvaluate = _reEvaluate,
    reInterpolate$1 = _reInterpolate;
/**
 * By default, the template delimiters used by lodash are like those in
 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
 * following template settings to use alternative delimiters.
 *
 * @static
 * @memberOf _
 * @type {Object}
 */

var templateSettings$1 = {
  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'escape': reEscape,

  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'evaluate': reEvaluate,

  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'interpolate': reInterpolate$1,

  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  'variable': '',

  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  'imports': {
    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    '_': {
      'escape': escape
    }
  }
};
var templateSettings_1 = templateSettings$1;

var assignInWith = assignInWith_1,
    attempt = attempt_1,
    baseValues = _baseValues,
    customDefaultsAssignIn = _customDefaultsAssignIn,
    escapeStringChar = _escapeStringChar,
    isError = isError_1,
    isIterateeCall = _isIterateeCall._isIterateeCall,
    keys = _baseClone.keys_1,
    reInterpolate = _reInterpolate,
    templateSettings = templateSettings_1,
    toString = toString$2.toString_1;
/** Error message constants. */

var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
/** Used to match empty string literals in compiled template source. */

var reEmptyStringLeading = /\b__p \+= '';/g,
    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
/**
 * Used to validate the `validate` option in `_.template` variable.
 *
 * Forbids characters which could potentially change the meaning of the function argument definition:
 * - "()," (modification of function parameters)
 * - "=" (default value)
 * - "[]{}" (destructuring of function parameters)
 * - "/" (beginning of a comment)
 * - whitespace
 */

var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */

var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
/** Used to ensure capturing order of template delimiters. */

var reNoMatch = /($^)/;
/** Used to match unescaped characters in compiled string literals. */

var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a compiled template function that can interpolate data properties
 * in "interpolate" delimiters, HTML-escape interpolated data properties in
 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
 * properties may be accessed as free variables in the template. If a setting
 * object is given, it takes precedence over `_.templateSettings` values.
 *
 * **Note:** In the development build `_.template` utilizes
 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
 * for easier debugging.
 *
 * For more information on precompiling templates see
 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
 *
 * For more information on Chrome extension sandboxes see
 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The template string.
 * @param {Object} [options={}] The options object.
 * @param {RegExp} [options.escape=_.templateSettings.escape]
 *  The HTML "escape" delimiter.
 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
 *  The "evaluate" delimiter.
 * @param {Object} [options.imports=_.templateSettings.imports]
 *  An object to import into the template as free variables.
 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
 *  The "interpolate" delimiter.
 * @param {string} [options.sourceURL='templateSources[n]']
 *  The sourceURL of the compiled template.
 * @param {string} [options.variable='obj']
 *  The data object variable name.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the compiled template function.
 * @example
 *
 * // Use the "interpolate" delimiter to create a compiled template.
 * var compiled = _.template('hello <%= user %>!');
 * compiled({ 'user': 'fred' });
 * // => 'hello fred!'
 *
 * // Use the HTML "escape" delimiter to escape data property values.
 * var compiled = _.template('<b><%- value %></b>');
 * compiled({ 'value': '<script>' });
 * // => '<b>&lt;script&gt;</b>'
 *
 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the internal `print` function in "evaluate" delimiters.
 * var compiled = _.template('<% print("hello " + user); %>!');
 * compiled({ 'user': 'barney' });
 * // => 'hello barney!'
 *
 * // Use the ES template literal delimiter as an "interpolate" delimiter.
 * // Disable support by replacing the "interpolate" delimiter.
 * var compiled = _.template('hello ${ user }!');
 * compiled({ 'user': 'pebbles' });
 * // => 'hello pebbles!'
 *
 * // Use backslashes to treat delimiters as plain text.
 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
 * compiled({ 'value': 'ignored' });
 * // => '<%- value %>'
 *
 * // Use the `imports` option to import `jQuery` as `jq`.
 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
 * compiled(data);
 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
 *
 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
 * compiled.source;
 * // => function(data) {
 * //   var __t, __p = '';
 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
 * //   return __p;
 * // }
 *
 * // Use custom template delimiters.
 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
 * var compiled = _.template('hello {{ user }}!');
 * compiled({ 'user': 'mustache' });
 * // => 'hello mustache!'
 *
 * // Use the `source` property to inline compiled templates for meaningful
 * // line numbers in error messages and stack traces.
 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
 *   var JST = {\
 *     "main": ' + _.template(mainText).source + '\
 *   };\
 * ');
 */

function template(string, options, guard) {
  // Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings = templateSettings.imports._.templateSettings || templateSettings;

  if (guard && isIterateeCall(string, options, guard)) {
    options = undefined;
  }

  string = toString(string);
  options = assignInWith({}, options, settings, customDefaultsAssignIn);
  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
      importsKeys = keys(imports),
      importsValues = baseValues(imports, importsKeys);
  var isEscaping,
      isEvaluating,
      index = 0,
      interpolate = options.interpolate || reNoMatch,
      source = "__p += '"; // Compile the regexp to match each delimiter.

  var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.

  var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
  string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }

    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }

    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }

    index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
    // order to produce the correct `offset` value.

    return match;
  });
  source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.

  var variable = hasOwnProperty.call(options, 'variable') && options.variable;

  if (!variable) {
    source = 'with (obj) {\n' + source + '\n}\n';
  } // Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  } // Cleanup code by stripping empty strings.


  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

  source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
  var result = attempt(function () {
    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
  }); // Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.

  result.source = source;

  if (isError(result)) {
    throw result;
  }

  return result;
}

var template_1 = template;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var FormItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix,
      globalFormConfig = _useConfig.form;

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    CheckCircleFilledIcon: tdesignIconsReact.CheckCircleFilledIcon,
    CloseCircleFilledIcon: tdesignIconsReact.CloseCircleFilledIcon,
    ErrorCircleFilledIcon: tdesignIconsReact.ErrorCircleFilledIcon
  }),
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;

  var _useFormContext = form_FormContext.useFormContext(),
      form = _useFormContext.form,
      colon = _useFormContext.colon,
      layout = _useFormContext.layout,
      initialDataFromContext = _useFormContext.initialData,
      requiredMarkFromContext = _useFormContext.requiredMark,
      labelAlignFromContext = _useFormContext.labelAlign,
      labelWidthFromContext = _useFormContext.labelWidth,
      showErrorMessageFromContext = _useFormContext.showErrorMessage,
      disabledFromContext = _useFormContext.disabled,
      resetTypeFromContext = _useFormContext.resetType,
      rulesFromContext = _useFormContext.rules,
      statusIconFromContext = _useFormContext.statusIcon,
      errorMessage = _useFormContext.errorMessage,
      formMapRef = _useFormContext.formMapRef,
      onFormItemValueChange = _useFormContext.onFormItemValueChange;

  var _useFormListContext = form_FormContext.useFormListContext(),
      formListName = _useFormListContext.name,
      formListRules = _useFormListContext.rules,
      formListMapRef = _useFormListContext.formListMapRef;

  var children = props.children,
      style = props.style,
      label = props.label,
      name = props.name,
      status = props.status,
      tips = props.tips,
      help = props.help,
      initialData = props.initialData,
      className = props.className,
      shouldUpdate = props.shouldUpdate,
      successBorder = props.successBorder,
      _props$statusIcon = props.statusIcon,
      statusIcon = _props$statusIcon === void 0 ? statusIconFromContext : _props$statusIcon,
      _props$rules = props.rules,
      innerRules = _props$rules === void 0 ? getInnerRules(name, rulesFromContext, formListName, formListRules) : _props$rules,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? labelWidthFromContext : _props$labelWidth,
      _props$labelAlign = props.labelAlign,
      labelAlign = _props$labelAlign === void 0 ? labelAlignFromContext : _props$labelAlign,
      _props$requiredMark = props.requiredMark,
      requiredMark = _props$requiredMark === void 0 ? requiredMarkFromContext : _props$requiredMark;

  var _useState = React.useState({}),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      forceUpdate = _useState2[1];

  var _useState3 = React.useState(void 0),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      freeShowErrorMessage = _useState4[0],
      setFreeShowErrorMessage = _useState4[1];

  var _useState5 = React.useState([]),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      errorList = _useState6[0],
      setErrorList = _useState6[1];

  var _useState7 = React.useState([]),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      successList = _useState8[0],
      setSuccessList = _useState8[1];

  var _useState9 = React.useState("validating"),
      _useState10 = slicedToArray._slicedToArray(_useState9, 2),
      verifyStatus = _useState10[0],
      setVerifyStatus = _useState10[1];

  var _useState11 = React.useState(false),
      _useState12 = slicedToArray._slicedToArray(_useState11, 2),
      resetValidating = _useState12[0],
      setResetValidating = _useState12[1];

  var _useState13 = React.useState(false),
      _useState14 = slicedToArray._slicedToArray(_useState13, 2),
      needResetField = _useState14[0],
      setNeedResetField = _useState14[1];

  var _useState15 = React.useState(form_useInitialData.getDefaultInitialData({
    name: name,
    formListName: formListName,
    children: children,
    initialData: initialData,
    initialDataFromContext: initialDataFromContext
  })),
      _useState16 = slicedToArray._slicedToArray(_useState15, 2),
      formValue = _useState16[0],
      setFormValue = _useState16[1];

  var formItemRef = React.useRef();
  var innerFormItemsRef = React.useRef([]);
  var shouldValidate = React.useRef(false);
  var valueRef = React.useRef(formValue);
  var errorMessages = React.useMemo(function () {
    return errorMessage !== null && errorMessage !== void 0 ? errorMessage : globalFormConfig.errorMessage;
  }, [errorMessage, globalFormConfig]);
  var showErrorMessage = React.useMemo(function () {
    if (typeof freeShowErrorMessage === "boolean") return freeShowErrorMessage;
    if (typeof props.showErrorMessage === "boolean") return props.showErrorMessage;
    return showErrorMessageFromContext;
  }, [freeShowErrorMessage, props.showErrorMessage, showErrorMessageFromContext]);

  var _useFormItemStyle = form_hooks_useFormItemStyle["default"]({
    className: className,
    help: help,
    tips: tips,
    name: name,
    status: status,
    successBorder: successBorder,
    errorList: errorList,
    successList: successList,
    layout: layout,
    verifyStatus: verifyStatus,
    colon: colon,
    label: label,
    labelWidth: labelWidth,
    labelAlign: labelAlign,
    requiredMark: requiredMark,
    showErrorMessage: showErrorMessage,
    innerRules: innerRules
  }),
      formItemClass = _useFormItemStyle.formItemClass,
      formItemLabelClass = _useFormItemStyle.formItemLabelClass,
      contentClass = _useFormItemStyle.contentClass,
      labelStyle = _useFormItemStyle.labelStyle,
      contentStyle = _useFormItemStyle.contentStyle,
      helpNode = _useFormItemStyle.helpNode,
      extraNode = _useFormItemStyle.extraNode;

  var updateFormValue = function updateFormValue(newVal) {
    var _form$getInternalHook, _form$getFieldsValue;

    var validate2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var _ref = (form === null || form === void 0 ? void 0 : (_form$getInternalHook = form.getInternalHooks) === null || _form$getInternalHook === void 0 ? void 0 : _form$getInternalHook.call(form, form_hooks_useForm.HOOK_MARK)) || {},
        setPrevStore = _ref.setPrevStore;

    setPrevStore === null || setPrevStore === void 0 ? void 0 : setPrevStore(form === null || form === void 0 ? void 0 : (_form$getFieldsValue = form.getFieldsValue) === null || _form$getFieldsValue === void 0 ? void 0 : _form$getFieldsValue.call(form, true));
    shouldValidate.current = validate2;
    valueRef.current = newVal;
    setFormValue(newVal);
  };

  function getInnerRules(name2, formRules, formListName2, formListRules2) {
    if (Array.isArray(name2)) {
      return get.get_1(formRules === null || formRules === void 0 ? void 0 : formRules[formListName2], name2) || get.get_1(formListRules2, name2) || [];
    }

    return (formRules === null || formRules === void 0 ? void 0 : formRules[name2]) || formListRules2 || [];
  }

  var renderSuffixIcon = function renderSuffixIcon() {
    if (statusIcon === false) return null;

    var resultIcon = function resultIcon(iconSlot) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-form__status")
      }, iconSlot);
    };

    var getDefaultIcon = function getDefaultIcon() {
      var iconMap = {
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
          size: "25px"
        }),
        error: /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
          size: "25px"
        }),
        warning: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, {
          size: "25px"
        })
      };

      if (verifyStatus === form_const.ValidateStatus.SUCCESS) {
        return resultIcon(iconMap[verifyStatus]);
      }

      if (errorList && errorList[0]) {
        var type = errorList[0].type || "error";
        return resultIcon(iconMap[type]);
      }

      return null;
    };

    if ( /*#__PURE__*/React__default["default"].isValidElement(statusIcon)) {
      return resultIcon( /*#__PURE__*/React__default["default"].cloneElement(statusIcon, _objectSpread({
        style: {
          color: "unset"
        }
      }, statusIcon.props)));
    }

    if (statusIcon === true) {
      return getDefaultIcon();
    }

    return null;
  };

  function analysisValidateResult(_x) {
    return _analysisValidateResult.apply(this, arguments);
  }

  function _analysisValidateResult() {
    _analysisValidateResult = index._asyncToGenerator( /*#__PURE__*/index.regenerator.mark(function _callee(trigger) {
      var _result$rules;

      var result;
      return index.regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = {
                successList: [],
                errorList: [],
                rules: [],
                resultList: [],
                allowSetValue: false
              };
              result.rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
                return (item.trigger || "change") === trigger;
              });

              if ((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length) {
                _context.next = 5;
                break;
              }

              setResetValidating(false);
              return _context.abrupt("return", result);

            case 5:
              result.allowSetValue = true;
              _context.next = 8;
              return form_formModel.validate(formValue, result.rules);

            case 8:
              result.resultList = _context.sent;
              result.errorList = result.resultList.filter(function (item) {
                return item.result !== true;
              }).map(function (item) {
                Object.keys(item).forEach(function (key) {
                  if (!item.message && errorMessages[key]) {
                    var compiled = template_1(errorMessages[key]);
                    item.message = compiled({
                      name: isString.isString_1(label) ? label : name,
                      validate: item[key]
                    });
                  }
                });
                return item;
              });
              result.successList = result.resultList.filter(function (item) {
                return item.result === true && item.message && item.type === "success";
              });
              return _context.abrupt("return", result);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _analysisValidateResult.apply(this, arguments);
  }

  function validate() {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = index._asyncToGenerator( /*#__PURE__*/index.regenerator.mark(function _callee2() {
      var trigger,
          showErrorMessage2,
          _yield$analysisValida,
          innerSuccessList,
          innerErrorList,
          validateRules,
          resultList,
          allowSetValue,
          status2,
          _innerErrorList$,
          _args2 = arguments;

      return index.regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              trigger = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : "all";
              showErrorMessage2 = _args2.length > 1 ? _args2[1] : undefined;

              if (!innerFormItemsRef.current.length) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", innerFormItemsRef.current.map(function (innerFormItem) {
                return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate(trigger, showErrorMessage2);
              }));

            case 4:
              setResetValidating(true);
              setFreeShowErrorMessage(showErrorMessage2);
              _context2.next = 8;
              return analysisValidateResult(trigger);

            case 8:
              _yield$analysisValida = _context2.sent;
              innerSuccessList = _yield$analysisValida.successList;
              innerErrorList = _yield$analysisValida.errorList;
              validateRules = _yield$analysisValida.rules;
              resultList = _yield$analysisValida.resultList;
              allowSetValue = _yield$analysisValida.allowSetValue;

              if (allowSetValue) {
                setSuccessList(innerSuccessList);
                setErrorList(innerErrorList);
              }

              if (validateRules.length) {
                status2 = form_const.ValidateStatus.SUCCESS;

                if (innerErrorList.length) {
                  status2 = (innerErrorList === null || innerErrorList === void 0 ? void 0 : (_innerErrorList$ = innerErrorList[0]) === null || _innerErrorList$ === void 0 ? void 0 : _innerErrorList$.type) || form_const.ValidateStatus.ERROR;
                }

                setVerifyStatus(status2);
              } else {
                setVerifyStatus(form_const.ValidateStatus.VALIDATING);
              }

              if (needResetField) {
                resetHandler();
              }

              setResetValidating(false);
              return _context2.abrupt("return", defineProperty._defineProperty({}, String(name), innerErrorList.length === 0 ? true : resultList));

            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  function validateOnly() {
    return _validateOnly.apply(this, arguments);
  }

  function _validateOnly() {
    _validateOnly = index._asyncToGenerator( /*#__PURE__*/index.regenerator.mark(function _callee3() {
      var trigger,
          _yield$analysisValida2,
          innerErrorList,
          resultList,
          _args3 = arguments;

      return index.regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              trigger = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : "all";
              _context3.next = 3;
              return analysisValidateResult(trigger);

            case 3:
              _yield$analysisValida2 = _context3.sent;
              innerErrorList = _yield$analysisValida2.errorList;
              resultList = _yield$analysisValida2.resultList;
              return _context3.abrupt("return", defineProperty._defineProperty({}, String(name), innerErrorList.length === 0 ? true : resultList));

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _validateOnly.apply(this, arguments);
  }

  function handleItemBlur() {
    var filterRules = innerRules.filter(function (item) {
      return item.trigger === "blur";
    });
    filterRules.length && validate("blur");
  }

  function getResetValue(resetType) {
    if (resetType === "initial") {
      return form_useInitialData.getDefaultInitialData({
        name: name,
        formListName: formListName,
        children: children,
        initialData: initialData,
        initialDataFromContext: initialDataFromContext
      });
    }

    var emptyValue = "";

    if (Array.isArray(formValue)) {
      emptyValue = [];
    } else if (isObject.isObject_1(formValue)) {
      emptyValue = {};
    }

    return emptyValue;
  }

  function resetField(type) {
    if (typeof name === "undefined") return;
    var resetType = type || resetTypeFromContext;
    var resetValue = getResetValue(resetType);
    updateFormValue(resetValue, false);

    if (resetValidating) {
      setNeedResetField(true);
    } else {
      resetHandler();
    }
  }

  function resetHandler() {
    setNeedResetField(false);
    setErrorList([]);
    setSuccessList([]);
    setVerifyStatus(form_const.ValidateStatus.VALIDATING);
  }

  function setField(field) {
    var value = field.value,
        status2 = field.status,
        validateMessage = field.validateMessage;

    if (typeof status2 !== "undefined") {
      setErrorList(validateMessage ? [validateMessage] : []);
      setSuccessList(validateMessage ? [validateMessage] : []);
      setNeedResetField(false);
      setVerifyStatus(status2);
    }

    if (typeof value !== "undefined") {
      updateFormValue(value, typeof status2 === "undefined" ? true : false);
    }
  }

  function setValidateMessage(validateMessage) {
    var _validateMessage$;

    if (!validateMessage || !Array.isArray(validateMessage)) return;

    if (validateMessage.length === 0) {
      setErrorList([]);
      setVerifyStatus(form_const.ValidateStatus.SUCCESS);
      return;
    }

    setErrorList(validateMessage);
    var status2 = (validateMessage === null || validateMessage === void 0 ? void 0 : (_validateMessage$ = validateMessage[0]) === null || _validateMessage$ === void 0 ? void 0 : _validateMessage$.type) || form_const.ValidateStatus.ERROR;
    setVerifyStatus(status2);
  }

  React.useEffect(function () {
    var _form$getInternalHook2;

    if (!shouldUpdate || !form) return;

    var _ref2 = (form === null || form === void 0 ? void 0 : (_form$getInternalHook2 = form.getInternalHooks) === null || _form$getInternalHook2 === void 0 ? void 0 : _form$getInternalHook2.call(form, form_hooks_useForm.HOOK_MARK)) || {},
        getPrevStore = _ref2.getPrevStore,
        registerWatch = _ref2.registerWatch;

    var cancelRegister = registerWatch === null || registerWatch === void 0 ? void 0 : registerWatch(function () {
      var _form$getFieldsValue2;

      var currStore = (form === null || form === void 0 ? void 0 : (_form$getFieldsValue2 = form.getFieldsValue) === null || _form$getFieldsValue2 === void 0 ? void 0 : _form$getFieldsValue2.call(form, true)) || {};
      var updateFlag = shouldUpdate;
      if (isFunction.isFunction_1(shouldUpdate)) updateFlag = shouldUpdate(getPrevStore === null || getPrevStore === void 0 ? void 0 : getPrevStore(), currStore);
      if (updateFlag) forceUpdate({});
    });
    return cancelRegister;
  }, [shouldUpdate, form]);
  React.useEffect(function () {
    if (typeof name === "undefined") return;

    if (formListName) {
      formListMapRef.current.set(name, formItemRef);
      return function () {
        formListMapRef.current["delete"](name);
      };
    }

    if (!formMapRef) return;
    formMapRef.current.set(name, formItemRef);
    return function () {
      formMapRef.current["delete"](name);
    };
  }, [name, formListName]);
  React.useEffect(function () {
    var _form$getInternalHook3, _form$getInternalHook4, _form$getInternalHook5;

    form === null || form === void 0 ? void 0 : (_form$getInternalHook3 = form.getInternalHooks) === null || _form$getInternalHook3 === void 0 ? void 0 : (_form$getInternalHook4 = (_form$getInternalHook5 = _form$getInternalHook3.call(form, form_hooks_useForm.HOOK_MARK)).notifyWatch) === null || _form$getInternalHook4 === void 0 ? void 0 : _form$getInternalHook4.call(_form$getInternalHook5, name);
    if (!shouldValidate.current) return;

    if (typeof name !== "undefined") {
      if (formListName) {
        var formListValue = merge.merge_1([], form_utils_index.calcFieldValue(name, formValue));
        var fieldValue = form_utils_index.calcFieldValue(formListName, formListValue);
        onFormItemValueChange === null || onFormItemValueChange === void 0 ? void 0 : onFormItemValueChange(_objectSpread({}, fieldValue));
      } else {
        var _fieldValue = form_utils_index.calcFieldValue(name, formValue);

        onFormItemValueChange === null || onFormItemValueChange === void 0 ? void 0 : onFormItemValueChange(_objectSpread({}, _fieldValue));
      }
    }

    var filterRules = innerRules.filter(function (item) {
      return (item.trigger || "change") === "change";
    });
    filterRules.length && validate("change");
  }, [formValue]);
  var instance = {
    name: name,
    value: formValue,
    getValue: function getValue() {
      return valueRef.current;
    },
    setValue: function setValue(newVal) {
      return updateFormValue(newVal);
    },
    setField: setField,
    validate: validate,
    validateOnly: validateOnly,
    resetField: resetField,
    setValidateMessage: setValidateMessage,
    resetValidate: resetHandler
  };
  React.useImperativeHandle(ref, function () {
    return instance;
  });
  React.useImperativeHandle(formItemRef, function () {
    return instance;
  });
  if (isFunction.isFunction_1(children)) return children(form);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: formItemClass,
    style: style
  }, label && /* @__PURE__ */React__default["default"].createElement("div", {
    className: formItemLabelClass,
    style: labelStyle
  }, /* @__PURE__ */React__default["default"].createElement("label", {
    htmlFor: props === null || props === void 0 ? void 0 : props["for"]
  }, label)), /* @__PURE__ */React__default["default"].createElement("div", {
    className: contentClass(),
    style: contentStyle
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-form__controls-content")
  }, React__default["default"].Children.map(children, function (child, index) {
    if (!child) return null;
    var ctrlKey = "value";

    if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
      var _objectSpread2;

      if (child.type === FormItem) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, {
          ref: function ref(el) {
            if (!el) return;
            innerFormItemsRef.current[index] = el;
          }
        });
      }

      if (_typeof._typeof(child.type) === "object") {
        ctrlKey = form_useInitialData.ctrlKeyMap.get(child.type) || "value";
      }

      return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread(_objectSpread({
        disabled: disabledFromContext
      }, child.props), {}, (_objectSpread2 = {}, defineProperty._defineProperty(_objectSpread2, ctrlKey, formValue), defineProperty._defineProperty(_objectSpread2, "onChange", function onChange(value) {
        var _child$props$onChange, _child$props$onChange2;

        updateFormValue(value);

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_child$props$onChange = child.props.onChange) === null || _child$props$onChange === void 0 ? void 0 : (_child$props$onChange2 = _child$props$onChange.call) === null || _child$props$onChange2 === void 0 ? void 0 : _child$props$onChange2.call.apply(_child$props$onChange2, [_child$props$onChange, null, value].concat(args));
      }), defineProperty._defineProperty(_objectSpread2, "onBlur", function onBlur(value) {
        var _child$props$onBlur, _child$props$onBlur$c;

        handleItemBlur();

        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        (_child$props$onBlur = child.props.onBlur) === null || _child$props$onBlur === void 0 ? void 0 : (_child$props$onBlur$c = _child$props$onBlur.call) === null || _child$props$onBlur$c === void 0 ? void 0 : _child$props$onBlur$c.call.apply(_child$props$onBlur$c, [_child$props$onBlur, null, value].concat(args));
      }), _objectSpread2)));
    }

    return child;
  }), renderSuffixIcon()), helpNode, extraNode));
});
FormItem.displayName = "FormItem";
FormItem.defaultProps = form_defaultProps.formItemDefaultProps;

exports["default"] = FormItem;
//# sourceMappingURL=FormItem.js.map
