/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var objectWithoutProperties = require('../_chunks/dep-e675c809.js');
var React = require('react');
var classNames = require('classnames');
var isObject = require('../_chunks/dep-b282bced.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var _util_dom = require('../_util/dom.js');
var grid_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-789d4bfb.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('raf');
require('../_chunks/dep-23aa4ed2.js');
require('../_util/easing.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["align", "gutter", "justify", "tag", "style", "className", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var calcSize = function calcSize(width) {
  var smWidth = _util_dom.getCssVarsValue("--td-screen-sm") || 768;
  var mdWidth = _util_dom.getCssVarsValue("--td-screen-md") || 992;
  var lgWidth = _util_dom.getCssVarsValue("--td-screen-lg") || 1200;
  var xlWidth = _util_dom.getCssVarsValue("--td-screen-xl") || 1400;
  var xxlWidth = _util_dom.getCssVarsValue("--td-screen-xxl") || 1880;
  var size = "xs";

  if (width >= xxlWidth) {
    size = "xxl";
  } else if (width >= xlWidth) {
    size = "xl";
  } else if (width >= lgWidth) {
    size = "lg";
  } else if (width >= mdWidth) {
    size = "md";
  } else if (width >= smWidth) {
    size = "sm";
  } else {
    size = "xs";
  }

  return size;
};

var calcRowStyle = function calcRowStyle(gutter, currentSize) {
  var rowStyle = {};

  if (typeof gutter === "number") {
    Object.assign(rowStyle, {
      marginLeft: "".concat(gutter / -2, "px"),
      marginRight: "".concat(gutter / -2, "px")
    });
  } else if (Array.isArray(gutter) && gutter.length) {
    if (typeof gutter[0] === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0] / -2, "px"),
        marginRight: "".concat(gutter[0] / -2, "px")
      });
    }

    if (typeof gutter[1] === "number") {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1], "px")
      });
    }

    if (isObject.isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
        marginRight: "".concat(gutter[0][currentSize] / -2, "px")
      });
    }

    if (isObject.isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1][currentSize], "px")
      });
    }
  } else if (isObject.isObject_1(gutter) && gutter[currentSize]) {
    if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
        marginRight: "".concat(gutter[currentSize][0] / -2, "px")
      });
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[currentSize][1], "px")
      });
    } else {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize] / -2, "px"),
        marginRight: "".concat(gutter[currentSize] / -2, "px")
      });
    }
  }

  return rowStyle;
};

var RowContext = /*#__PURE__*/React.createContext({
  gutter: void 0,
  size: void 0
});
var Row = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var align = props.align,
      gutter = props.gutter,
      justify = props.justify,
      tag = props.tag,
      propStyle = props.style,
      className = props.className,
      children = props.children,
      otherRowProps = objectWithoutProperties._objectWithoutProperties(props, _excluded);

  var _useState = React.useState(_util_dom.canUseDocument ? calcSize(window.innerWidth) : "md"),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var updateSize = function updateSize() {
    var currentSize = calcSize(window.innerWidth);

    if (currentSize !== size) {
      setSize(size);
    }
  };

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var rowClassNames = classNames__default["default"]("".concat(classPrefix, "-row"), className, (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(justify), true), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(align), true), _classNames));

  var rowStyle = _objectSpread(_objectSpread({}, calcRowStyle(gutter, size)), propStyle);

  React.useEffect(function () {
    window.addEventListener("resize", updateSize);
    return function () {
      window.removeEventListener("resize", updateSize);
    };
  });
  return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread({
    ref: ref,
    className: rowClassNames,
    style: rowStyle
  }, otherRowProps), /* @__PURE__ */React__default["default"].createElement(RowContext.Provider, {
    value: {
      gutter: gutter,
      size: size
    }
  }, children));
});
Row.displayName = "Row";
Row.defaultProps = grid_defaultProps.rowDefaultProps;

exports.RowContext = RowContext;
exports["default"] = Row;
//# sourceMappingURL=Row.js.map
