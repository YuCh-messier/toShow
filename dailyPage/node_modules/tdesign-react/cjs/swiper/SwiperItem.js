/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-3415b40f.js');
var React = require('react');
var classNames = require('classnames');
var hooks_useConfig = require('../hooks/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var CARD_SCALE = 210 / 332;
var itemWidth = 0.415;

var disposeIndex = function disposeIndex(index, currentIndex, childrenLength) {
  if (currentIndex === 0 && index === childrenLength - 1) {
    return -1;
  }

  if (currentIndex === childrenLength - 1 && index === 0) {
    return childrenLength;
  }

  if (index < currentIndex - 1 && currentIndex - index >= childrenLength / 2) {
    return childrenLength + 1;
  }

  if (index > currentIndex + 1 && index - currentIndex >= childrenLength / 2) {
    return -2;
  }

  return index;
};

var calculateTranslate = function calculateTranslate(index, currentIndex, parentWidth, inStage) {
  if (inStage) {
    return parentWidth * ((index - currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
  }

  if (index < currentIndex) {
    return -itemWidth * (1 + CARD_SCALE) * parentWidth / 2;
  }

  return (2 + itemWidth * (CARD_SCALE - 1)) * parentWidth / 2;
};

var getZindex = function getZindex(isActivity, inStage) {
  if (isActivity) {
    return 2;
  }

  if (inStage) {
    return 1;
  }

  return 0;
};

var SwiperItem = function SwiperItem(props) {
  var _classnames;

  var children = props.children,
      currentIndex = props.currentIndex,
      index = props.index,
      animation = props.animation,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 300 : _props$duration,
      needAnimation = props.needAnimation,
      _props$type = props.type,
      type = _props$type === void 0 ? "default" : _props$type,
      childrenLength = props.childrenLength,
      getWrapAttribute = props.getWrapAttribute;

  var _useConfig = hooks_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var getSwiperItemStyle = function getSwiperItemStyle() {
    if (animation === "fade") {
      return {
        opacity: currentIndex === index ? 1 : 0,
        transition: needAnimation ? "opacity ".concat(duration / 1e3, "s") : ""
      };
    }

    if (type === "card") {
      var wrapWidth = getWrapAttribute("offsetWidth");
      var translateIndex = index !== currentIndex && childrenLength > 2 ? disposeIndex(index, currentIndex, childrenLength) : index;
      var inStage = Math.round(Math.abs(translateIndex - currentIndex)) <= 1;
      var translate = calculateTranslate(translateIndex, currentIndex, wrapWidth, inStage).toFixed(2);
      var isActivity = translateIndex === currentIndex;
      var zIndex = getZindex(isActivity, inStage);
      return {
        msTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        WebkitTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        transform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        transition: "transform ".concat(duration / 1e3, "s ease"),
        zIndex: zIndex
      };
    }

    return {};
  };

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]("".concat(classPrefix, "-swiper__container__item"), (_classnames = {}, defineProperty._defineProperty(_classnames, "".concat(classPrefix, "-swiper__card"), type === "card"), defineProperty._defineProperty(_classnames, "".concat(classPrefix, "-is-active"), type === "card" && index === currentIndex), defineProperty._defineProperty(_classnames, "".concat(classPrefix, "-swiper__fade"), animation === "fade"), _classnames)),
    style: getSwiperItemStyle()
  }, children);
};

SwiperItem.displayName = "SwiperItem";

exports["default"] = SwiperItem;
//# sourceMappingURL=SwiperItem.js.map
