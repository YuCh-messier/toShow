/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../_chunks/dep-8c98b84c.js');
var React = require('react');
var hooks_useConfig = require('../hooks/useConfig.js');
var calendar_hooks_usePrefixClass = require('./hooks/usePrefixClass.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var calendar__util = require('./_util.js');
require('../_chunks/dep-789d4bfb.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-3415b40f.js');
require('../_chunks/dep-bbbce181.js');
require('../_chunks/dep-4c1144f0.js');
require('../_chunks/dep-be113066.js');
require('../_chunks/dep-7affd9c7.js');
require('../_chunks/dep-c15e2539.js');
require('../_chunks/dep-1ad27019.js');
require('../_chunks/dep-6c4c2f3e.js');
require('../_chunks/dep-b282bced.js');
require('../_chunks/dep-b8187df5.js');
require('../_chunks/dep-6b7adfaa.js');
require('../_chunks/dep-bdb568fa.js');
require('../_chunks/dep-3c510ebe.js');
require('../_chunks/dep-ffd983b8.js');
require('../_chunks/dep-bafabd9b.js');
require('../_chunks/dep-29ecaf93.js');
require('../_chunks/dep-28bf72fc.js');
require('../_chunks/dep-72f2b815.js');
require('../_chunks/dep-46b250c3.js');
require('../_chunks/dep-6f0ad8f9.js');
require('../_chunks/dep-901b688e.js');
require('../_chunks/dep-92d05577.js');
require('../_chunks/dep-6aeda844.js');
require('../_chunks/dep-39147135.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_common/js/global-config/default-config.js');
require('dayjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var CalendarCellComp = function CalendarCellComp(props) {
  var mode = props.mode,
      cell = props.cell,
      cellAppend = props.cellAppend,
      theme = props.theme,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      cellData = props.cellData,
      isCurrent = props.isCurrent,
      isNow = props.isNow,
      fillWithZero = props.fillWithZero,
      createCalendarCell = props.createCalendarCell,
      onCellClick = props.onCellClick,
      onCellDoubleClick = props.onCellDoubleClick,
      onCellRightClick = props.onCellRightClick;

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var monthLabelList = t(local.cellMonth).split(",");

  var getMonthCN = function getMonthCN(month) {
    return monthLabelList[month];
  };

  var _useConfig = hooks_useConfig["default"](),
      calendarConfig = _useConfig.calendar;

  var fix0 = function fix0(num) {
    var _ref;

    var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : calendarConfig.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
    return fillZero ? "0".concat(num) : num;
  };

  var prefixCls = calendar_hooks_usePrefixClass["default"]();
  return /* @__PURE__ */React__default["default"].createElement("td", {
    className: prefixCls([calendar__util.blockName, "table-body-cell"], isDisabled ? "is-disabled" : null, isCurrent ? "is-checked" : null, isNow ? [calendar__util.blockName, "table-body-cell--now"] : null),
    onClick: onCellClick,
    onDoubleClick: onCellDoubleClick,
    onContextMenu: onCellRightClick
  }, function () {
    if (cell && typeof cell === "function") return cell(mode === "month" ? createCalendarCell(cellData) : cellData);
    if (cell && typeof cell !== "function") return cell;
    var cellCtx;

    if (mode === "year") {
      var mIndex = cellData.date.getMonth();
      cellCtx = theme === "full" ? getMonthCN(mIndex) : t(local.monthSelection, {
        month: "".concat(mIndex + 1)
      });
    } else {
      cellCtx = fix0(cellData.date.getDate());
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([calendar__util.blockName, "table-body-cell-display"])
    }, cellCtx);
  }(), function () {
    var cellCtx;

    if (cellAppend && typeof cellAppend === "function") {
      cellCtx = cellAppend(mode === "month" ? createCalendarCell(cellData) : cellData);
    }

    if (cellAppend && typeof cellAppend !== "function") {
      cellCtx = cellAppend;
    }

    return cellAppend && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([calendar__util.blockName, "table-body-cell-content"])
    }, cellCtx);
  }());
};

exports["default"] = CalendarCellComp;
//# sourceMappingURL=CalendarCellComp.js.map
