/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-3415b40f.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var _common_js_upload_utils = require('../../_common/js/upload/utils.js');
var button_index = require('../../button/index.js');
var hooks_useCommonClassName = require('../../hooks/useCommonClassName.js');
var loading_index = require('../../loading/index.js');
var upload_hooks_useDrag = require('../hooks/useDrag.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
require('../../_common/js/log/log.js');
require('../../button/Button.js');
require('../../_chunks/dep-e675c809.js');
require('../../hooks/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-bbbce181.js');
require('../../_chunks/dep-4c1144f0.js');
require('../../_chunks/dep-be113066.js');
require('../../_chunks/dep-7affd9c7.js');
require('../../_chunks/dep-c15e2539.js');
require('../../_chunks/dep-1ad27019.js');
require('../../_chunks/dep-6c4c2f3e.js');
require('../../_chunks/dep-b282bced.js');
require('../../_chunks/dep-b8187df5.js');
require('../../_chunks/dep-6b7adfaa.js');
require('../../_chunks/dep-bdb568fa.js');
require('../../_chunks/dep-3c510ebe.js');
require('../../_chunks/dep-ffd983b8.js');
require('../../_chunks/dep-bafabd9b.js');
require('../../_chunks/dep-29ecaf93.js');
require('../../_chunks/dep-28bf72fc.js');
require('../../_chunks/dep-72f2b815.js');
require('../../_chunks/dep-46b250c3.js');
require('../../_chunks/dep-6f0ad8f9.js');
require('../../_chunks/dep-901b688e.js');
require('../../_chunks/dep-92d05577.js');
require('../../_chunks/dep-6aeda844.js');
require('../../_chunks/dep-39147135.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_common/js/global-config/default-config.js');
require('../../_util/useRipple.js');
require('../../_util/useAnimation.js');
require('../../_util/setStyle.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-23aa4ed2.js');
require('../../_util/easing.js');
require('../../button/defaultProps.js');
require('../../loading/Loading.js');
require('../../_chunks/dep-8c98b84c.js');
require('../../_chunks/dep-789d4bfb.js');
require('../../common/Portal.js');
require('react-dom');
require('../../loading/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('../../_chunks/dep-0944d665.js');
require('../../loading/defaultProps.js');
require('../../loading/plugin.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var DraggerFile = function DraggerFile(props) {
  var _props$trigger;

  var displayFiles = props.displayFiles,
      locale = props.locale,
      disabled = props.disabled;

  var _useCommonClassName = hooks_useCommonClassName["default"](),
      SIZE = _useCommonClassName.SIZE;

  var uploadPrefix = "".concat(props.classPrefix, "-upload");
  var drag = upload_hooks_useDrag["default"](props.dragEvents);
  var dragActive = drag.dragActive;
  var draggerFileRef = React.useRef();

  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
    CheckCircleFilledIcon: tdesignIconsReact.CheckCircleFilledIcon,
    ErrorCircleFilledIcon: tdesignIconsReact.ErrorCircleFilledIcon
  }),
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;

  var classes = React.useMemo(function () {
    var _displayFiles$;

    return ["".concat(uploadPrefix, "__dragger"), defineProperty._defineProperty({}, "".concat(uploadPrefix, "__dragger-center"), !displayFiles[0]), defineProperty._defineProperty({}, "".concat(uploadPrefix, "__dragger-error"), ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail")];
  }, [displayFiles, uploadPrefix]);

  var renderImage = function renderImage() {
    var file = displayFiles[0];
    if (!file) return null;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-img-wrap")
    }, file.url && /* @__PURE__ */React__default["default"].createElement("img", {
      src: file.url
    }));
  };

  var renderUploading = function renderUploading() {
    var file = displayFiles[0];
    if (!file) return null;

    if (file.status === "progress") {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__single-progress")
      }, /* @__PURE__ */React__default["default"].createElement(loading_index.Loading, null), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-percent")
      }, file.percent, "%"));
    }
  };

  var renderMainPreview = function renderMainPreview() {
    var file = displayFiles[0];
    if (!file) return null;
    var fileName = props.abridgeName ? _common_js_upload_utils.abridgeName(file.name, props.abridgeName[0], props.abridgeName[1]) : file.name;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress")
    }, props.theme === "image" && renderImage(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress-info")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-text")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(uploadPrefix, "__single-name")
    }, fileName), file.status === "progress" && renderUploading(), file.status === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, null), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null)), /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileSizeText, "\uFF1A", _common_js_upload_utils.getFileSizeText(file.size)), /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileOperationDateText, "\uFF1A", file.uploadTime || "-"), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, ["progress", "waiting"].includes(file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      theme: "primary",
      variant: "text",
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: function onClick(e) {
        var _props$cancelUpload;

        return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
          e: e,
          file: props.toUploadFiles[0] || props.files[0]
        });
      }
    }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), !props.autoUpload && file.status === "waiting" && /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      variant: "text",
      theme: "primary",
      disabled: disabled,
      onClick: function onClick() {
        var _props$uploadFiles;

        return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
      },
      className: "".concat(uploadPrefix, "__dragger-upload-btn")
    }, locale.triggerUploadText.normal)), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      theme: "primary",
      variant: "text",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: props.triggerUpload
    }, locale.triggerUploadText.reupload), /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      theme: "danger",
      variant: "text",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-delete-btn"),
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: 0,
          file: file
        });
      }
    }, locale.triggerUploadText["delete"]))));
  };

  var renderDefaultDragElement = function renderDefaultDragElement() {
    var _locale$triggerUpload;

    var unActiveElement = /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(uploadPrefix, "--highlight")
    }, (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.normal), /* @__PURE__ */React__default["default"].createElement("span", null, "\xA0\xA0/\xA0\xA0", locale.dragger.draggingText));
    var activeElement = /* @__PURE__ */React__default["default"].createElement("div", null, locale.dragger.dragDropText);
    return dragActive ? activeElement : unActiveElement;
  };

  var getContent = function getContent() {
    var file = displayFiles[0];

    if (file && ["progress", "success", "fail", "waiting"].includes(file.status)) {
      return renderMainPreview();
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__trigger"),
      onClick: props.triggerUpload
    }, props.children || renderDefaultDragElement());
  };

  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: draggerFileRef,
    className: classNames__default["default"](classes),
    onDrop: drag.handleDrop,
    onDragEnter: drag.handleDragenter,
    onDragOver: drag.handleDragover,
    onDragLeave: drag.handleDragleave
  }, ((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, {
    files: displayFiles,
    dragActive: dragActive
  })) || getContent());
};

DraggerFile.displayName = "DraggerFile";

exports["default"] = DraggerFile;
//# sourceMappingURL=DraggerFile.js.map
