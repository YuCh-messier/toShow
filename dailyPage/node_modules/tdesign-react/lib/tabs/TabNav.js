/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { useRef, useCallback, useState, useEffect } from 'react';
import classNames from 'classnames';
import { AddIcon, ChevronLeftIcon, ChevronRightIcon } from 'tdesign-icons-react';
import { d as debounce_1 } from '../_chunks/dep-1997a475.js';
import noop from '../_util/noop.js';
import { useTabClass } from './useTabClass.js';
import TabNavItem from './TabNavItem.js';
import TabBar from './TabBar.js';
import tabBase from '../_common/js/tabs/base.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-d502af5f.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-090fa3b2.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var moveActiveTabIntoView = tabBase.moveActiveTabIntoView,
    calcScrollLeft = tabBase.calcScrollLeft,
    scrollToLeft = tabBase.scrollToLeft,
    scrollToRight = tabBase.scrollToRight,
    calculateCanToLeft = tabBase.calculateCanToLeft,
    calculateCanToRight = tabBase.calculateCanToRight;

var TabNav = function TabNav(props) {
  var _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      itemList = props.itemList,
      _props$tabClick = props.tabClick,
      tabClick = _props$tabClick === void 0 ? noop : _props$tabClick,
      theme = props.theme,
      addable = props.addable,
      onAdd = props.onAdd,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onRemove = props.onRemove,
      onRemove = _props$onRemove === void 0 ? noop : _props$onRemove,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      activeValue = props.activeValue,
      children = props.children;

  var _useGlobalIcon = useGlobalIcon({
    AddIcon: AddIcon,
    ChevronLeftIcon: ChevronLeftIcon,
    ChevronRightIcon: ChevronRightIcon
  }),
      AddIcon$1 = _useGlobalIcon.AddIcon,
      ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

  var isCard = theme === "card";

  var _useTabClass = useTabClass(),
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator,
      tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

  var navsContainerRef = useRef(null);
  var navsWrapRef = useRef(null);
  var getIndex = useCallback(function (value) {
    var index = itemList.findIndex(function (item) {
      return item.value === value;
    });
    return index > -1 ? index : -1;
  }, [itemList]);
  var activeIndex = getIndex(activeValue);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      canToLeft = _useState2[0],
      setToLeftBtnVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      canToRight = _useState4[0],
      setToRightBtnVisible = _useState4[1];

  var scrollBarRef = useRef(null);
  var leftOperationsRef = useRef(null);
  var rightOperationsRef = useRef(null);
  var toLeftBtnRef = useRef(null);
  var toRightBtnRef = useRef(null);

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      scrollLeft = _useState6[0],
      setScrollLeft = _useState6[1];

  var _useState7 = useState(null),
      _useState8 = _slicedToArray(_useState7, 2),
      activeTab = _useState8[0],
      setActiveTab = _useState8[1];

  useEffect(function () {
    var left = moveActiveTabIntoView({
      activeTab: activeTab,
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      toLeftBtn: toLeftBtnRef.current,
      toRightBtn: toRightBtnRef.current,
      leftOperations: leftOperationsRef.current,
      rightOperations: rightOperationsRef.current
    }, scrollLeft);
    setScrollLeft(left);
  }, [activeTab, scrollLeft]);
  var setScrollBtnVisibleHandler = useCallback(function () {
    var canToleft = calculateCanToLeft({
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      leftOperations: leftOperationsRef.current,
      toLeftBtn: toLeftBtnRef.current
    }, scrollLeft, placement);
    var canToRight2 = calculateCanToRight({
      navsContainer: navsContainerRef.current,
      navsWrap: navsWrapRef.current,
      rightOperations: rightOperationsRef.current,
      toRightBtn: toRightBtnRef.current
    }, scrollLeft, placement);
    setToLeftBtnVisible(canToleft);
    setToRightBtnVisible(canToRight2);
  }, [scrollLeft, placement, children]);

  var handleScroll = function handleScroll(position) {
    var val = position === "left" ? scrollToLeft({
      navsContainer: navsContainerRef.current,
      leftOperations: leftOperationsRef.current,
      toLeftBtn: toLeftBtnRef.current
    }, scrollLeft) : scrollToRight({
      navsWrap: navsWrapRef.current,
      navsContainer: navsContainerRef.current,
      rightOperations: rightOperationsRef.current,
      toRightBtn: toRightBtnRef.current
    }, scrollLeft);
    setScrollLeft(val);
  };

  useEffect(function () {
    var onResize = debounce_1(function () {
      if (["top", "bottom"].includes(placement.toLowerCase())) {
        var left = calcScrollLeft({
          navsContainer: navsContainerRef.current,
          navsWrap: navsWrapRef.current,
          rightOperations: rightOperationsRef.current
        }, scrollLeft);
        setScrollLeft(left);
        setScrollBtnVisibleHandler();
      }
    }, 300);
    window.addEventListener("resize", onResize);
    return function () {
      window.removeEventListener("resize", onResize);
      onResize.cancel();
    };
  });
  useEffect(function () {
    if (["top", "bottom"].includes(placement.toLowerCase())) {
      var left = calcScrollLeft({
        navsContainer: navsContainerRef.current,
        navsWrap: navsWrapRef.current,
        rightOperations: rightOperationsRef.current
      }, scrollLeft);
      setScrollLeft(left);
    }
  }, [itemList.length, scrollLeft, placement]);
  var TabBarCom = isCard ? null : /* @__PURE__ */React.createElement(TabBar, {
    tabPosition: placement,
    activeId: activeIndex,
    containerRef: navsWrapRef
  });
  useEffect(function () {
    setScrollBtnVisibleHandler();
  }, [setScrollBtnVisibleHandler]);

  var handleTabItemRemove = function handleTabItemRemove(removeItem) {
    var removeValue = removeItem.value,
        removeIndex = removeItem.index;

    if (removeValue === activeValue) {
      var _itemList;

      onChange(removeIndex === 0 ? (_itemList = itemList[removeIndex + 1]) === null || _itemList === void 0 ? void 0 : _itemList.value : itemList[removeIndex - 1].value);
    }

    onRemove(removeItem);
  };

  var handleTabItemClick = function handleTabItemClick(clickItem) {
    tabClick(clickItem.value);
    onChange(clickItem.value);
  };

  var handleTabAdd = function handleTabAdd(e) {
    onAdd({
      e: e
    });
  };

  return /* @__PURE__ */React.createElement("div", {
    ref: navsContainerRef,
    className: classNames(tdTabsClassGenerator("nav")),
    style: {
      minHeight: 48
    }
  }, /* @__PURE__ */React.createElement("div", {
    ref: leftOperationsRef,
    className: classNames(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
  }, canToLeft ? /* @__PURE__ */React.createElement("div", {
    onClick: function onClick() {
      handleScroll("left");
    },
    className: classNames(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size)),
    ref: toLeftBtnRef
  }, /* @__PURE__ */React.createElement(ChevronLeftIcon$1, null)) : null), /* @__PURE__ */React.createElement("div", {
    ref: rightOperationsRef,
    className: classNames(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
  }, canToRight ? /* @__PURE__ */React.createElement("div", {
    onClick: function onClick() {
      handleScroll("right");
    },
    className: classNames(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size)),
    ref: toRightBtnRef
  }, /* @__PURE__ */React.createElement(ChevronRightIcon$1, null)) : null, addable ? /* @__PURE__ */React.createElement("div", {
    className: classNames(tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
    onClick: handleTabAdd
  }, /* @__PURE__ */React.createElement(AddIcon$1, null)) : null), /* @__PURE__ */React.createElement("div", {
    className: classNames(tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(tdTabsClassGenerator("nav-scroll"), canToLeft || canToRight ? tdClassGenerator("is-scrollable") : ""),
    ref: scrollBarRef
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : "", tdClassGenerator("is-smooth")),
    style: {
      transform: "translate(".concat(-scrollLeft, "px, 0)")
    },
    ref: navsWrapRef
  }, placement !== "bottom" ? TabBarCom : null, !isCard && /* @__PURE__ */React.createElement("div", {
    className: classNames(tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
  }), itemList.map(function (v, index) {
    return /* @__PURE__ */React.createElement(TabNavItem, _objectSpread(_objectSpread(_objectSpread({}, props), v), {}, {
      onRemove: v.onRemove,
      key: v.value,
      label: v.label,
      isActive: activeValue === v.value,
      theme: theme,
      placement: placement,
      index: index,
      disabled: disabled || v.disabled,
      onClick: function onClick() {
        return handleTabItemClick(v);
      },
      onTabRemove: handleTabItemRemove,
      innerRef: function innerRef(ref) {
        if (activeValue === v.value) {
          setActiveTab(ref);
        }
      }
    }));
  }), placement === "bottom" ? TabBarCom : null))));
};

TabNav.displayName = "TabNav";

export { TabNav as default };
//# sourceMappingURL=TabNav.js.map
