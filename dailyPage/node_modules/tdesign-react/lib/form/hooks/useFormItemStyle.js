/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import React, { useMemo } from 'react';
import classNames from 'classnames';
import useConfig from '../../hooks/useConfig.js';
import renderTNode from '../../_util/renderTNode.js';
import { ValidateStatus } from '../const.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-98b209dd.js';
import '../../_chunks/dep-1304d812.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-00ad7a91.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-7a725039.js';
import '../../_chunks/dep-e48ce47b.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-75ee7646.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-7237da98.js';
import '../../_chunks/dep-d905b9e9.js';
import '../../_chunks/dep-87e9108c.js';
import '../../_chunks/dep-873eecd0.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';

function useFormItemStyle(props) {
  var _classNames, _classNames2;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var className = props.className,
      help = props.help,
      tips = props.tips,
      name = props.name,
      status = props.status,
      successBorder = props.successBorder,
      errorList = props.errorList,
      successList = props.successList,
      layout = props.layout,
      verifyStatus = props.verifyStatus,
      colon = props.colon,
      label = props.label,
      labelWidth = props.labelWidth,
      labelAlign = props.labelAlign,
      requiredMark = props.requiredMark,
      showErrorMessage = props.showErrorMessage,
      innerRules = props.innerRules;
  var renderName = Array.isArray(name) ? name.join("-") : name;
  var renderStatus = status || verifyStatus;
  var helpNode = help && /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-input__help")
  }, renderTNode(help));
  var extraNode = useMemo(function () {
    var _errorList$;

    var extra = tips ? /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-input__extra"),
      title: tips
    }, tips) : null;

    if (showErrorMessage && errorList !== null && errorList !== void 0 && (_errorList$ = errorList[0]) !== null && _errorList$ !== void 0 && _errorList$.message) {
      extra = /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: errorList[0].message
      }, errorList[0].message);
    } else if (successList.length) {
      extra = /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: successList[0].message
      }, successList[0].message);
    }

    return extra;
  }, [showErrorMessage, errorList, successList, tips, classPrefix]);
  var formItemClass = classNames("".concat(classPrefix, "-form__item"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-form-item__").concat(renderName), renderName), _defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-help"), helpNode), _defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-extra"), extraNode), _classNames));
  var formItemLabelClass = classNames("".concat(classPrefix, "-form__label"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
    return rule.required;
  }).length > 0), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--top"), labelAlign === "top" || !labelWidth), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--left"), labelAlign === "left" && labelWidth), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--right"), labelAlign === "right" && labelWidth), _classNames2));

  var contentClass = function contentClass() {
    var _classNames4;

    var controlCls = "".concat(classPrefix, "-form__controls");
    if (!showErrorMessage) return controlCls;
    var isSuccess = renderStatus === ValidateStatus.SUCCESS;

    if (isSuccess) {
      return classNames(controlCls, "".concat(classPrefix, "-is-success"), _defineProperty({}, "".concat(classPrefix, "-form--success-border"), successBorder));
    }

    return classNames(controlCls, (_classNames4 = {}, _defineProperty(_classNames4, "".concat(classPrefix, "-is-warning"), renderStatus === "warning"), _defineProperty(_classNames4, "".concat(classPrefix, "-is-error"), ["fail", "error"].includes(renderStatus)), _classNames4));
  };

  var labelStyle = {};
  var contentStyle = {};

  if (label && labelWidth && labelAlign !== "top") {
    if (typeof labelWidth === "number") {
      labelStyle = {
        width: "".concat(labelWidth, "px")
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? "".concat(labelWidth, "px") : ""
      };
    } else {
      labelStyle = {
        width: labelWidth
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? labelWidth : ""
      };
    }
  }

  return {
    formItemClass: formItemClass,
    formItemLabelClass: formItemLabelClass,
    contentClass: contentClass,
    labelStyle: labelStyle,
    contentStyle: contentStyle,
    helpNode: helpNode,
    extraNode: extraNode
  };
}

export { useFormItemStyle as default };
//# sourceMappingURL=useFormItemStyle.js.map
