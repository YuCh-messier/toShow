/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _objectWithoutProperties } from '../../_chunks/dep-fe234c83.js';
import { _ as _asyncToGenerator, r as regenerator } from '../../_chunks/dep-18bd07e0.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import { i as isEmpty_1 } from '../../_chunks/dep-fbe9bd73.js';
import { i as isFunction_1 } from '../../_chunks/dep-00ad7a91.js';
import { m as merge_1 } from '../../_chunks/dep-98b209dd.js';
import useConfig from '../../hooks/useConfig.js';
import { getMapValue, calcFieldValue, travelMapFromObject } from '../utils/index.js';
import log from '../../_common/js/log/log.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-37dd0f2e.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-1304d812.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-7a725039.js';
import '../../_chunks/dep-e48ce47b.js';
import '../../_chunks/dep-75ee7646.js';
import '../../_chunks/dep-7237da98.js';
import '../../_chunks/dep-d905b9e9.js';
import '../../_chunks/dep-87e9108c.js';
import '../../_chunks/dep-873eecd0.js';
import 'react';
import '../../config-provider/ConfigContext.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';

var _excluded = ["name"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function needValidate(name, fields) {
  if (!fields || !Array.isArray(fields)) return true;
  return fields.indexOf(name) !== -1;
}

function formatValidateResult(validateResultList) {
  var result = validateResultList.reduce(function (r, err) {
    return Object.assign(r || {}, err);
  }, {});
  Object.keys(result).forEach(function (key) {
    if (result[key] === true) {
      delete result[key];
    } else {
      result[key] = result[key].filter(function (fr) {
        return fr.result === false;
      });
    }

    if (result[key] && key.includes(",")) {
      var keyList = key.split(",");
      var fieldValue = calcFieldValue(keyList, result[key]);
      merge_1(result, fieldValue);
      delete result[key];
    }
  });
  return isEmpty_1(result) ? true : result;
}

function useInstance(props, formRef, formMapRef) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var FORM_ITEM_CLASS_PREFIX = "".concat(classPrefix, "-form-item__");
  var scrollToFirstError = props.scrollToFirstError,
      _props$preventSubmitD = props.preventSubmitDefault,
      preventSubmitDefault = _props$preventSubmitD === void 0 ? true : _props$preventSubmitD,
      onSubmit = props.onSubmit;

  function getFirstError(r) {
    var _r$firstKey$;

    if (r === true) return;

    var _Object$keys = Object.keys(r),
        _Object$keys2 = _slicedToArray(_Object$keys, 1),
        firstKey = _Object$keys2[0];

    if (scrollToFirstError) {
      scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
    }

    return (_r$firstKey$ = r[firstKey][0]) === null || _r$firstKey$ === void 0 ? void 0 : _r$firstKey$.message;
  }

  function scrollTo(selector) {
    var _formRef$current$quer, _formRef$current;

    var dom = (_formRef$current$quer = (_formRef$current = formRef.current).querySelector) === null || _formRef$current$quer === void 0 ? void 0 : _formRef$current$quer.call(_formRef$current, selector);
    var behavior = scrollToFirstError;
    dom && dom.scrollIntoView({
      behavior: behavior
    });
  }

  function submit(e) {
    if (preventSubmitDefault) {
      var _e$preventDefault, _e$stopPropagation;

      e === null || e === void 0 ? void 0 : (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
      e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
    }

    validate().then(function (r) {
      var firstError = getFirstError(r);
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit({
        validateResult: r,
        firstError: firstError,
        e: e
      });
    });
  }

  function validate(_x) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(param) {
      var _ref, fields, _ref$trigger, trigger, showErrorMessage, list, validateList;

      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref = param || {}, fields = _ref.fields, _ref$trigger = _ref.trigger, trigger = _ref$trigger === void 0 ? "all" : _ref$trigger, showErrorMessage = _ref.showErrorMessage;
              list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                var _formItemRef$current13, _formItemRef$current14;

                return isFunction_1(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current13 = formItemRef.current) === null || _formItemRef$current13 === void 0 ? void 0 : _formItemRef$current13.validate) && needValidate(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current14 = formItemRef.current) === null || _formItemRef$current14 === void 0 ? void 0 : _formItemRef$current14.name, fields);
              }).map(function (formItemRef) {
                return formItemRef === null || formItemRef === void 0 ? void 0 : formItemRef.current.validate(trigger, showErrorMessage);
              });
              _context.next = 4;
              return Promise.all(list);

            case 4:
              validateList = _context.sent;
              return _context.abrupt("return", formatValidateResult(validateList));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validate.apply(this, arguments);
  }

  function validateOnly(_x2) {
    return _validateOnly.apply(this, arguments);
  }

  function _validateOnly() {
    _validateOnly = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(param) {
      var _ref2, fields, _ref2$trigger, trigger, list, validateList;

      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
              list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                var _formItemRef$current15, _formItemRef$current16;

                return isFunction_1(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current15 = formItemRef.current) === null || _formItemRef$current15 === void 0 ? void 0 : _formItemRef$current15.validateOnly) && needValidate(formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current16 = formItemRef.current) === null || _formItemRef$current16 === void 0 ? void 0 : _formItemRef$current16.name, fields);
              }).map(function (formItemRef) {
                var _formItemRef$current$4, _formItemRef$current17;

                return formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$4 = (_formItemRef$current17 = formItemRef.current).validateOnly) === null || _formItemRef$current$4 === void 0 ? void 0 : _formItemRef$current$4.call(_formItemRef$current17, trigger);
              });
              _context2.next = 4;
              return Promise.all(list);

            case 4:
              validateList = _context2.sent;
              return _context2.abrupt("return", formatValidateResult(validateList));

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validateOnly.apply(this, arguments);
  }

  function getFieldValue(name) {
    var _formItemRef$current$, _formItemRef$current;

    if (!name) return null;
    var formItemRef = getMapValue(name, formMapRef);
    return formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$ = (_formItemRef$current = formItemRef.current).getValue) === null || _formItemRef$current$ === void 0 ? void 0 : _formItemRef$current$.call(_formItemRef$current);
  }

  function getFieldsValue(nameList) {
    var fieldsValue = {};

    if (nameList === true) {
      var _iterator = _createForOfIteratorHelper(formMapRef.current.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _formItemRef$current$2, _formItemRef$current2;

          var _step$value = _slicedToArray(_step.value, 2),
              name = _step$value[0],
              formItemRef = _step$value[1];

          var fieldValue = calcFieldValue(name, formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$2 = (_formItemRef$current2 = formItemRef.current).getValue) === null || _formItemRef$current$2 === void 0 ? void 0 : _formItemRef$current$2.call(_formItemRef$current2));
          merge_1(fieldsValue, fieldValue);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      if (!Array.isArray(nameList)) {
        log.error("Form", "`getFieldsValue` \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
        return {};
      }

      nameList.forEach(function (name) {
        var _formItemRef$current$3, _formItemRef$current3;

        var formItemRef = getMapValue(name, formMapRef);
        if (!formItemRef) return;
        var fieldValue = calcFieldValue(name, formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current$3 = (_formItemRef$current3 = formItemRef.current).getValue) === null || _formItemRef$current$3 === void 0 ? void 0 : _formItemRef$current$3.call(_formItemRef$current3));
        merge_1(fieldsValue, fieldValue);
      });
    }

    return fieldsValue;
  }

  function setFieldsValue() {
    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    travelMapFromObject(fields, formMapRef, function (formItemRef, fieldValue) {
      var _formItemRef$current4, _formItemRef$current5;

      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 ? void 0 : (_formItemRef$current5 = _formItemRef$current4.setValue) === null || _formItemRef$current5 === void 0 ? void 0 : _formItemRef$current5.call(_formItemRef$current4, fieldValue);
    });
  }

  function setFields() {
    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!Array.isArray(fields)) throw new Error("setFields \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
    fields.forEach(function (field) {
      var _formItemRef$current6;

      var name = field.name,
          restFields = _objectWithoutProperties(field, _excluded);

      var formItemRef = getMapValue(name, formMapRef);
      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current6 = formItemRef.current) === null || _formItemRef$current6 === void 0 ? void 0 : _formItemRef$current6.setField(_objectSpread({}, restFields));
    });
  }

  function reset(params) {
    if (typeof params === "undefined") {
      _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        var _formItemRef$current7;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current7 = formItemRef.current) === null || _formItemRef$current7 === void 0 ? void 0 : _formItemRef$current7.resetField();
      });
    } else {
      var _params$type = params.type,
          type = _params$type === void 0 ? "initial" : _params$type,
          _params$fields = params.fields,
          fields = _params$fields === void 0 ? [] : _params$fields;
      fields.forEach(function (name) {
        var _formItemRef$current8;

        var formItemRef = getMapValue(name, formMapRef);
        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current8 = formItemRef.current) === null || _formItemRef$current8 === void 0 ? void 0 : _formItemRef$current8.resetField(type);
      });
    }
  }

  function clearValidate(fields) {
    if (typeof fields === "undefined") {
      _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        var _formItemRef$current9;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current9 = formItemRef.current) === null || _formItemRef$current9 === void 0 ? void 0 : _formItemRef$current9.resetValidate();
      });
    } else {
      if (!Array.isArray(fields)) throw new Error("clearValidate \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      fields.forEach(function (name) {
        var _formItemRef$current10;

        var formItemRef = getMapValue(name, formMapRef);
        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current10 = formItemRef.current) === null || _formItemRef$current10 === void 0 ? void 0 : _formItemRef$current10.resetValidate();
      });
    }
  }

  function setValidateMessage(message) {
    travelMapFromObject(message, formMapRef, function (formItemRef, fieldValue) {
      var _formItemRef$current11, _formItemRef$current12;

      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current11 = formItemRef.current) === null || _formItemRef$current11 === void 0 ? void 0 : (_formItemRef$current12 = _formItemRef$current11.setValidateMessage) === null || _formItemRef$current12 === void 0 ? void 0 : _formItemRef$current12.call(_formItemRef$current11, fieldValue);
    });
  }

  return {
    submit: submit,
    reset: reset,
    validate: validate,
    validateOnly: validateOnly,
    clearValidate: clearValidate,
    setFields: setFields,
    setFieldsValue: setFieldsValue,
    setValidateMessage: setValidateMessage,
    getFieldValue: getFieldValue,
    getFieldsValue: getFieldsValue,
    currentElement: formRef.current,
    getCurrentElement: function getCurrentElement() {
      return formRef.current;
    }
  };
}

export { useInstance as default };
//# sourceMappingURL=useInstance.js.map
