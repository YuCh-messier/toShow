/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { i as isPlainObject_1 } from '../../_chunks/dep-87e9108c.js';
import { g as get_1 } from '../../_chunks/dep-bca278f2.js';
import OptionGroup from '../base/OptionGroup.js';
import Option from '../base/Option.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-1304d812.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-00ad7a91.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-7a725039.js';
import '../../_chunks/dep-e48ce47b.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-75ee7646.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-6a110e92.js';
import '../../_chunks/dep-893e0247.js';
import '../../_chunks/dep-2998e451.js';
import 'react';
import 'classnames';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-98b209dd.js';
import '../../_chunks/dep-7237da98.js';
import '../../_chunks/dep-d905b9e9.js';
import '../../_chunks/dep-873eecd0.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../defaultProps.js';
import '../../_chunks/dep-04fa7e7c.js';
import '../../_chunks/dep-f3228585.js';
import '../../_util/useRipple.js';
import '../../_util/useAnimation.js';
import '../../_util/setStyle.js';
import '../../_util/dom.js';
import 'raf';
import '../../_util/easing.js';

function setValueToOptionFormOptionDom(dom, valueToOption, keys) {
  var _valueToOption$value;

  var _dom$props = dom.props,
      value = _dom$props.value,
      label = _dom$props.label,
      children = _dom$props.children;
  valueToOption[value] = (_valueToOption$value = {}, _defineProperty(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", value), _defineProperty(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label || children || value), _valueToOption$value);
}

var getValueToOption = function getValueToOption(children, options, keys) {
  var valueToOption = {};

  if (Array.isArray(options)) {
    options.forEach(function (option) {
      valueToOption[get_1(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = option;
    });
    return valueToOption;
  }

  if (isPlainObject_1(children)) {
    if (children.type === Option) {
      setValueToOptionFormOptionDom(children, valueToOption, keys);
      return valueToOption;
    }

    if (children.type === OptionGroup) {
      var groupChildren = children.props.children;

      if (Array.isArray(groupChildren)) {
        groupChildren.forEach(function (item) {
          setValueToOptionFormOptionDom(item, valueToOption, keys);
        });
        return valueToOption;
      }
    }
  }

  if (Array.isArray(children)) {
    children.forEach(function (item) {
      if (item.type === Option) {
        setValueToOptionFormOptionDom(item, valueToOption, keys);
      }

      if (item.type === OptionGroup) {
        var _groupChildren = item.props.children;

        if (Array.isArray(_groupChildren)) {
          _groupChildren.forEach(function (groupItem) {
            setValueToOptionFormOptionDom(groupItem, valueToOption, keys);
          });
        }
      }
    });
  }

  return valueToOption;
};
var getLabel = function getLabel(children, value, options, keys) {
  var selectedLabel = "";

  if (Array.isArray(options)) {
    options.some(function (option) {
      if ([get_1(value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"), value].includes(option.value)) {
        selectedLabel = option.label;
        return true;
      }

      return false;
    });
    return selectedLabel;
  }

  if (isPlainObject_1(children)) {
    selectedLabel = children.props.label;

    if (children.type === OptionGroup) {
      var groupChildren = children.props.children;

      if (Array.isArray(groupChildren)) {
        groupChildren.some(function (item) {
          var selectedValue = isPlainObject_1(value) ? get_1(value, "value") : value;

          if (isPlainObject_1(item.props) && item.props.value === selectedValue) {
            selectedLabel = item.props.label || item.props.children;
            return true;
          }

          return false;
        });
      }
    }
  }

  if (Array.isArray(children)) {
    children.some(function (item) {
      if (item.type === OptionGroup) {
        var _groupChildren2 = item.props.children;

        if (Array.isArray(_groupChildren2)) {
          var isSelected = _groupChildren2.some(function (item2) {
            var selectedValue2 = isPlainObject_1(value) ? get_1(value, "value") : value;

            if (isPlainObject_1(item2.props) && item2.props.value === selectedValue2) {
              selectedLabel = item2.props.label || item2.props.children;
              return true;
            }

            return false;
          });

          return isSelected;
        }
      }

      var selectedValue = isPlainObject_1(value) ? get_1(value, "value") : value;

      if (isPlainObject_1(item.props) && item.props.value === selectedValue) {
        selectedLabel = item.props.label || item.props.children;
        return true;
      }

      return false;
    });
  }

  return selectedLabel;
};
var getMultipleTags = function getMultipleTags(values, keys) {
  var tags = values.map(function (item) {
    return {
      label: get_1(item, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || item.toString(),
      value: get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") || item
    };
  });
  return tags;
};
var getSelectValueArr = function getSelectValueArr(values, activeValue, selected, valueType, keys, objVal) {
  values = Array.isArray(values) ? values : [];

  if (Array.isArray(values)) {
    var currentValues = _toConsumableArray(values);

    var isValueObj = valueType === "object";

    if (selected) {
      currentValues = currentValues.filter(function (item) {
        if (isValueObj) {
          if (isPlainObject_1(activeValue)) {
            return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== get_1(activeValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
          }

          return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== activeValue;
        }

        return item !== activeValue;
      });
    } else {
      var item = isValueObj ? objVal : activeValue;
      currentValues.push(item);
    }

    return currentValues;
  }
};

export { getLabel, getMultipleTags, getSelectValueArr, getValueToOption };
//# sourceMappingURL=helper.js.map
