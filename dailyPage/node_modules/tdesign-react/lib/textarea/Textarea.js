/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _typeof } from '../_chunks/dep-3627969a.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-fe234c83.js';
import React, { forwardRef, useState, useRef, useMemo, useCallback, useEffect, useImperativeHandle } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import noop from '../_util/noop.js';
import useControlled from '../hooks/useControlled.js';
import { getUnicodeLength, getCharacterLength, limitUnicodeMaxLength } from '../_common/js/utils/helper.js';
import calcTextareaHeight from '../_common/js/utils/calcTextareaHeight.js';
import { textareaDefaultProps } from './defaultProps.js';
import '../_chunks/dep-24599104.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-88be14a4.js';

var _excluded = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "style", "onKeydown", "onKeypress", "onKeyup", "autosize", "status", "tips", "allowInputOverMax"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Textarea = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames, _classNames2;

  var disabled = props.disabled,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      className = props.className,
      readonly = props.readonly,
      autofocus = props.autofocus,
      style = props.style,
      _props$onKeydown = props.onKeydown,
      onKeydown = _props$onKeydown === void 0 ? noop : _props$onKeydown,
      _props$onKeypress = props.onKeypress,
      onKeypress = _props$onKeypress === void 0 ? noop : _props$onKeypress,
      _props$onKeyup = props.onKeyup,
      onKeyup = _props$onKeyup === void 0 ? noop : _props$onKeyup,
      autosize = props.autosize,
      status = props.status,
      tips = props.tips,
      allowInputOverMax = props.allowInputOverMax,
      otherProps = _objectWithoutProperties(props, _excluded);

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      _useControlled2$ = _useControlled2[0],
      value = _useControlled2$ === void 0 ? "" : _useControlled2$,
      setValue = _useControlled2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isOvermax = _useState4[0],
      setIsOvermax = _useState4[1];

  var _useState5 = useState({}),
      _useState6 = _slicedToArray(_useState5, 2),
      textareaStyle = _useState6[0],
      setTextareaStyle = _useState6[1];

  var composingRef = useRef(false);
  var hasMaxcharacter = typeof maxcharacter !== "undefined";
  var textareaRef = useRef();
  var wrapperRef = useRef();
  var currentLength = useMemo(function () {
    return getUnicodeLength(value);
  }, [value]);
  var characterLength = useMemo(function () {
    var characterInfo = getCharacterLength(String(value), allowInputOverMax ? Infinity : maxcharacter);
    if (_typeof(characterInfo) === "object") return characterInfo.length;
    return characterInfo;
  }, [value, allowInputOverMax, maxcharacter]);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
    return !/^on[A-Z]/.test(key);
  });
  var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
    return Object.assign(textareaProps2, _defineProperty({}, key, props[key]));
  }, {});
  var eventPropsNames = Object.keys(otherProps).filter(function (key) {
    return /^on[A-Z]/.test(key);
  });
  var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
    Object.assign(eventProps2, _defineProperty({}, key, function (e) {
      if (disabled) return;
      if (key === "onFocus") setIsFocused(true);
      if (key === "onBlur") setIsFocused(false);
      props[key](e.currentTarget.value, {
        e: e
      });
    }));
    return eventProps2;
  }, {});
  var textareaClassNames = classNames("".concat(classPrefix, "-textarea__inner"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty(_classNames, "".concat(classPrefix, "-resize-none"), _typeof(autosize) === "object"), _classNames));
  var adjustTextareaHeight = useCallback(function () {
    if (autosize === true) {
      setTextareaStyle(calcTextareaHeight(textareaRef.current));
    } else if (_typeof(autosize) === "object") {
      setTextareaStyle(calcTextareaHeight(textareaRef.current, autosize === null || autosize === void 0 ? void 0 : autosize.minRows, autosize === null || autosize === void 0 ? void 0 : autosize.maxRows));
    }
  }, [autosize]);
  useEffect(function () {
    adjustTextareaHeight();
  }, [textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current]);

  function inputValueChangeHandle(e) {
    var target = e.target;
    var val = target.value;

    if (!allowInputOverMax && !composingRef.current) {
      val = limitUnicodeMaxLength(val, maxlength);

      if (maxcharacter && maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, maxcharacter);
        val = _typeof(stringInfo) === "object" && stringInfo.characters;
      }
    }

    setValue(val, {
      e: e
    });
  }

  function handleCompositionStart() {
    composingRef.current = true;
  }

  function handleCompositionEnd(e) {
    if (composingRef.current) {
      composingRef.current = false;
      inputValueChangeHandle(e);
    }
  }

  var renderLimitText = function renderLimitText(current, max) {
    return /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-textarea__limit")
    }, isOvermax && allowInputOverMax ? /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-textarea__tips--warning")
    }, " ", current) : "".concat(current), "/".concat(max));
  };

  useEffect(function () {
    if (autosize === false) {
      setTextareaStyle({
        height: "auto",
        minHeight: "auto"
      });
    }
  }, [adjustTextareaHeight, autosize]);
  useEffect(function () {
    adjustTextareaHeight();
  }, [adjustTextareaHeight, value]);
  useEffect(function () {
    if (allowInputOverMax) {
      setIsOvermax(!!(maxlength && currentLength > maxlength) || !!(maxcharacter && characterLength > maxcharacter));
    }
  }, [allowInputOverMax, characterLength, currentLength, maxcharacter, maxlength]);
  useImperativeHandle(ref, function () {
    return {
      currentElement: wrapperRef.current,
      textareaElement: textareaRef.current
    };
  });
  return /* @__PURE__ */React.createElement("div", {
    style: style,
    ref: wrapperRef,
    className: classNames("".concat(classPrefix, "-textarea"), className)
  }, /* @__PURE__ */React.createElement("textarea", _objectSpread(_objectSpread(_objectSpread({}, textareaProps), eventProps), {}, {
    value: value,
    style: textareaStyle,
    className: textareaClassNames,
    readOnly: readonly,
    autoFocus: autofocus,
    disabled: disabled,
    onChange: inputValueChangeHandle,
    onKeyDown: function onKeyDown(e) {
      return onKeydown(e.currentTarget.value, {
        e: e
      });
    },
    onKeyPress: function onKeyPress(e) {
      return onKeypress(e.currentTarget.value, {
        e: e
      });
    },
    onKeyUp: function onKeyUp(e) {
      return onKeyup(e.currentTarget.value, {
        e: e
      });
    },
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd,
    ref: textareaRef
  })), hasMaxcharacter && renderLimitText(characterLength, maxcharacter), !hasMaxcharacter && maxlength && renderLimitText(currentLength, maxlength), tips ? /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-textarea__tips"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(classPrefix, "-textarea__tips--normal"), !status), _defineProperty(_classNames2, "".concat(classPrefix, "-textarea__tips--").concat(status), status), _classNames2))
  }, tips) : null);
});
Textarea.displayName = "Textarea";
Textarea.defaultProps = textareaDefaultProps;

export { Textarea as default };
//# sourceMappingURL=Textarea.js.map
