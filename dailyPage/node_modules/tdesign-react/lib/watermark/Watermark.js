/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { useState, useRef, useEffect } from 'react';
import generateBase64Url from '../_common/js/watermark/generateBase64Url.js';
import randomMovingStyle from '../_common/js/watermark/randomMovingStyle.js';
import injectStyle from '../_common/js/utils/injectStyle.js';
import useConfig from '../hooks/useConfig.js';
import useMutationObservable from '../_util/useMutationObserver.js';
import { watermarkDefaultProps } from './defaultProps.js';
import '../_chunks/dep-24599104.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import '../_chunks/dep-893e0247.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Watermark = function Watermark(_ref) {
  var _ref$alpha = _ref.alpha,
      alpha = _ref$alpha === void 0 ? watermarkDefaultProps.alpha : _ref$alpha,
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? 200 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 210 : _ref$y,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 120 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 60 : _ref$height,
      _ref$rotate = _ref.rotate,
      tempRotate = _ref$rotate === void 0 ? watermarkDefaultProps.rotate : _ref$rotate,
      _ref$zIndex = _ref.zIndex,
      zIndex = _ref$zIndex === void 0 ? 10 : _ref$zIndex,
      _ref$lineSpace = _ref.lineSpace,
      lineSpace = _ref$lineSpace === void 0 ? watermarkDefaultProps.lineSpace : _ref$lineSpace,
      _ref$isRepeat = _ref.isRepeat,
      isRepeat = _ref$isRepeat === void 0 ? watermarkDefaultProps.isRepeat : _ref$isRepeat,
      _ref$removable = _ref.removable,
      removable = _ref$removable === void 0 ? watermarkDefaultProps.removable : _ref$removable,
      _ref$movable = _ref.movable,
      movable = _ref$movable === void 0 ? watermarkDefaultProps.movable : _ref$movable,
      _ref$moveInterval = _ref.moveInterval,
      moveInterval = _ref$moveInterval === void 0 ? watermarkDefaultProps.moveInterval : _ref$moveInterval,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [] : _ref$offset,
      content = _ref.content,
      children = _ref.children,
      watermarkContent = _ref.watermarkContent,
      className = _ref.className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var gapX = x;
  var gapY = y;
  var rotate = tempRotate;

  if (movable) {
    gapX = 0;
    gapY = 0;
    rotate = 0;
  }

  var clsName = "".concat(classPrefix, "-watermark");

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      base64Url = _useState2[0],
      setBase64Url = _useState2[1];

  var watermarkRef = useRef();
  var offsetLeft = offset[0] || gapX / 2;
  var offsetTop = offset[1] || gapY / 2;
  useEffect(function () {
    generateBase64Url({
      width: width,
      height: height,
      rotate: rotate,
      lineSpace: lineSpace,
      alpha: alpha,
      gapX: gapX,
      gapY: gapY,
      watermarkContent: watermarkContent,
      offsetLeft: offsetLeft,
      offsetTop: offsetTop
    }, function (url) {
      setBase64Url(url);
    });
  }, [width, height, rotate, zIndex, lineSpace, alpha, offsetLeft, offsetTop, gapX, gapY, watermarkContent]);
  useMutationObservable(watermarkRef.current, function (mutations) {
    if (removable) return;
    mutations.forEach(function (mutation) {
      if (mutation.type === "childList") {
        var removeNodes = mutation.removedNodes;
        removeNodes.forEach(function (node) {
          watermarkRef.current.appendChild(node);
        });
      }
    });
  });
  var parent = useRef();
  useEffect(function () {
    parent.current = watermarkRef.current.parentElement;
    var keyframesStyle = randomMovingStyle();
    injectStyle(keyframesStyle);
  }, []);
  useMutationObservable(document.body, function (mutations) {
    if (removable) return;
    mutations.forEach(function (mutation) {
      if (mutation.type === "childList") {
        var removeNodes = mutation.removedNodes;
        removeNodes.forEach(function (node) {
          var element = node;

          if (element === watermarkRef.current) {
            parent.current.appendChild(element);
          }
        });
      }
    });
  });
  return /* @__PURE__ */React.createElement("div", {
    style: {
      position: "relative",
      overflow: "hidden"
    },
    className: clsName,
    ref: watermarkRef
  }, children || content, /* @__PURE__ */React.createElement("div", {
    className: className,
    style: _objectSpread({
      zIndex: zIndex,
      position: "absolute",
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      width: "100%",
      height: "100%",
      backgroundSize: "".concat(gapX + width, "px"),
      pointerEvents: "none",
      backgroundRepeat: movable ? "no-repeat" : isRepeat ? "repeat" : "no-repeat",
      backgroundImage: "url('".concat(base64Url, "')"),
      animation: movable ? "watermark infinite ".concat(moveInterval * 4 / 60, "s") : "none"
    }, style)
  }));
};

export { Watermark as default };
//# sourceMappingURL=Watermark.js.map
