/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import React, { forwardRef, useEffect } from 'react';
import classNames from 'classnames';
import dayjs from 'dayjs';
import useConfig from '../hooks/useConfig.js';
import { SelectInput } from '../select-input/index.js';
import SinglePanel from './panel/SinglePanel.js';
import useSingleInput from './hooks/useSingle.js';
import { getDefaultFormat, formatDate, parseToDayjs, formatTime } from '../_common/js/date-picker/format.js';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils.js';
import { datePickerDefaultProps } from './defaultProps.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import '../_chunks/dep-2baf8638.js';
import '../_chunks/dep-24599104.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-893e0247.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../common/Portal.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-e5ce5161.js';
import '../_chunks/dep-6a110e92.js';
import '../_chunks/dep-fd4264c2.js';
import '../_chunks/dep-e65dabd7.js';
import '../_chunks/dep-de8845e2.js';
import '../input/index.js';
import '../input/Input.js';
import '../_chunks/dep-fe234c83.js';
import 'tdesign-icons-react';
import '../_util/useLayoutEffect.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../hooks/useGlobalIcon.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-88be14a4.js';
import '../input/InputGroup.js';
import '../locale/LocalReceiver.js';
import '../input/defaultProps.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-bca278f2.js';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_chunks/dep-04fa7e7c.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../common/FakeArrow.js';
import '../select/base/PopupContent.js';
import '../jumper/index.js';
import '../jumper/Jumper.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../jumper/defaultProps.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/index.js';
import '../time-picker/TimePicker.js';
import '../_chunks/dep-df494df9.js';
import '../time-picker/TimeRangePicker.js';
import '../range-input/index.js';
import '../range-input/RangeInput.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../time-picker/panel/SinglePanel.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../_common/js/time-picker/const.js';
import '../_common/js/time-picker/utils.js';
import '../hooks/useDebounce.js';
import '../_util/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../time-picker/defaultProps.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './hooks/useTableData.js';
import './hooks/useDisableDate.js';
import './hooks/useSingleValue.js';
import '../_common/js/log/log.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DatePicker = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      onPick = props.onPick;

  var _useSingle = useSingleInput(props),
      inputValue = _useSingle.inputValue,
      popupVisible = _useSingle.popupVisible,
      inputProps = _useSingle.inputProps,
      popupProps = _useSingle.popupProps,
      value = _useSingle.value,
      year = _useSingle.year,
      month = _useSingle.month,
      time = _useSingle.time,
      inputRef = _useSingle.inputRef,
      onChange = _useSingle.onChange,
      setIsHoverCell = _useSingle.setIsHoverCell,
      setInputValue = _useSingle.setInputValue,
      setPopupVisible = _useSingle.setPopupVisible,
      setTime = _useSingle.setTime,
      setYear = _useSingle.setYear,
      setMonth = _useSingle.setMonth,
      cacheValue = _useSingle.cacheValue,
      setCacheValue = _useSingle.setCacheValue;

  var _getDefaultFormat = getDefaultFormat({
    mode: props.mode,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;

  useEffect(function () {
    setCacheValue(formatDate(value, {
      format: format
    }));
    setInputValue(formatDate(value, {
      format: format
    }));

    if (popupVisible) {
      setYear(parseToDayjs(value, format).year());
      setMonth(parseToDayjs(value, format).month());
      setTime(formatTime(value, timeFormat));
    } else {
      setIsHoverCell(false);
    }
  }, [popupVisible]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);
    setInputValue(formatDate(date, {
      format: format
    }));
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setInputValue(formatDate(cacheValue, {
      format: format
    }));
  }

  function onCellClick(date) {
    onPick === null || onPick === void 0 ? void 0 : onPick(date);
    setIsHoverCell(false);

    if (mode === "date") {
      setYear(date.getFullYear());
      setMonth(date.getMonth());
    }

    if (enableTimePicker) {
      setCacheValue(formatDate(date, {
        format: format
      }));
    } else {
      onChange(formatDate(date, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: parseToDayjs(date, format),
        trigger: "pick"
      });
      setPopupVisible(false);
    }
  }

  function onJumperClick(_ref) {
    var trigger = _ref.trigger;
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year, month);
    var next = null;

    if (trigger === "prev") {
      next = subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = addMonth(current, monthCount);
    }

    var nextYear = next.getFullYear();
    var nextMonth = next.getMonth();
    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    setTime(val);

    var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var currentDate = !dayjs(inputValue, format).isValid() ? dayjs() : dayjs(inputValue, format);
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    setInputValue(formatDate(nextDate, {
      format: format
    }));
    onPick === null || onPick === void 0 ? void 0 : onPick(nextDate);
  }

  function onConfirmClick() {
    var nextValue = formatDate(inputValue, {
      format: format
    });

    if (nextValue) {
      onChange(formatDate(inputValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: parseToDayjs(inputValue, format),
        trigger: "confirm"
      });
    } else {
      setInputValue(formatDate(value, {
        format: format
      }));
    }

    setPopupVisible(false);
  }

  function onPresetClick(preset) {
    var presetValue = preset;

    if (typeof preset === "function") {
      presetValue = preset();
    }

    onChange(formatDate(presetValue, {
      format: format,
      targetFormat: valueType
    }), {
      dayjsValue: parseToDayjs(presetValue, format),
      trigger: "preset"
    });
    setPopupVisible(false);
  }

  function onYearChange(year2) {
    setYear(year2);
  }

  function onMonthChange(month2) {
    setMonth(month2);
  }

  var panelProps = {
    value: cacheValue,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    popupVisible: popupVisible,
    onCellClick: onCellClick,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange,
    onPanelClick: function onPanelClick() {
      var _inputRef$current, _inputRef$current$foc;

      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : (_inputRef$current$foc = _inputRef$current.focus) === null || _inputRef$current$foc === void 0 ? void 0 : _inputRef$current$foc.call(_inputRef$current);
    }
  };
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-date-picker"), className),
    style: style,
    ref: ref
  }, /* @__PURE__ */React.createElement(SelectInput, {
    disabled: disabled,
    value: inputValue,
    status: props.status,
    tips: props.tips,
    popupProps: popupProps,
    inputProps: inputProps,
    popupVisible: popupVisible,
    panel: /* @__PURE__ */React.createElement(SinglePanel, _objectSpread({}, panelProps))
  }));
});
DatePicker.displayName = "DatePicker";
DatePicker.defaultProps = datePickerDefaultProps;

export { DatePicker as default };
//# sourceMappingURL=DatePicker.js.map
