{"version":3,"file":"EnhancedTable.js","sources":["../../src/table/EnhancedTable.tsx"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport PrimaryTable from './PrimaryTable';\nimport { PrimaryTableCol, TableRowData, DragSortContext } from './type';\nimport useTreeData from './hooks/useTreeData';\nimport useTreeSelect from './hooks/useTreeSelect';\nimport { EnhancedTableProps, EnhancedTableRef, PrimaryTableProps } from './interface';\n\nimport { StyledProps } from '../common';\n\nexport interface TEnhancedTableProps extends EnhancedTableProps, StyledProps {}\n\nconst EnhancedTable = forwardRef<EnhancedTableRef, TEnhancedTableProps>((props, ref) => {\n  const { tree, columns, style, className } = props;\n\n  const primaryTableRef = useRef<EnhancedTableRef>();\n\n  // treeInstanceFunctions 属于对外暴露的 Ref 方法\n  const { store, dataSource, formatTreeColumn, swapData, ...treeInstanceFunctions } = useTreeData(props);\n\n  const treeDataMap = store?.treeDataMap;\n\n  const { tIndeterminateSelectedRowKeys, onInnerSelectChange } = useTreeSelect(props, treeDataMap);\n\n  // 影响列和单元格内容的因素有：树形节点需要添加操作符 [+] [-]\n  const getColumns = (columns: PrimaryTableCol<TableRowData>[]) => {\n    const arr: PrimaryTableCol<TableRowData>[] = [];\n    for (let i = 0, len = columns.length; i < len; i++) {\n      let item = { ...columns[i] };\n      item = formatTreeColumn(item);\n      if (item.children?.length) {\n        item.children = getColumns(item.children);\n      }\n      // 多级表头和自定义列配置特殊逻辑：要么子节点不存在，要么子节点长度大于 1，方便做自定义列配置\n      if (!item.children || item.children?.length) {\n        arr.push(item);\n      }\n    }\n    return arr;\n  };\n\n  const tColumns = (() => {\n    // 暂时只有树形结构需要处理 column.cell\n    const isTreeData = !tree || !Object.keys(tree).length;\n    return isTreeData ? columns : getColumns(columns);\n  })();\n\n  useImperativeHandle(ref, () => ({\n    treeDataMap,\n    ...treeInstanceFunctions,\n    ...primaryTableRef.current,\n  }));\n\n  const onDragSortChange = (params: DragSortContext<TableRowData>) => {\n    if (props.beforeDragSort && !props.beforeDragSort(params)) return;\n    swapData({\n      data: params.data,\n      current: params.current,\n      target: params.target,\n      currentIndex: params.currentIndex,\n      targetIndex: params.targetIndex,\n    });\n    props.onDragSort?.(params);\n  };\n\n  const primaryTableProps: PrimaryTableProps = {\n    ...props,\n    data: dataSource,\n    columns: tColumns,\n    // 半选状态节点\n    indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys,\n    // 树形结构不允许本地数据分页\n    disableDataPage: Boolean(tree && Object.keys(tree).length),\n    onSelectChange: onInnerSelectChange,\n    onDragSort: onDragSortChange,\n    style,\n    className,\n  };\n  return <PrimaryTable {...primaryTableProps} ref={primaryTableRef} />;\n});\n\nEnhancedTable.displayName = 'EnhancedTable';\n\nexport default EnhancedTable as <T extends TableRowData = TableRowData>(\n  props: EnhancedTableProps<T> & {\n    ref?: React.Ref<EnhancedTableRef>;\n  },\n) => React.ReactElement;\n"],"names":["EnhancedTable","forwardRef","props","ref","tree","columns","style","className","primaryTableRef","useRef","useTreeData","store","dataSource","formatTreeColumn","swapData","treeInstanceFunctions","treeDataMap","useTreeSelect","tIndeterminateSelectedRowKeys","onInnerSelectChange","getColumns","arr","i","len","length","item","children","push","tColumns","isTreeData","Object","keys","useImperativeHandle","current","onDragSortChange","params","beforeDragSort","data","target","currentIndex","targetIndex","onDragSort","primaryTableProps","indeterminateSelectedRowKeys","disableDataPage","Boolean","onSelectChange","React","createElement","PrimaryTable","displayName"],"mappings":"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"}