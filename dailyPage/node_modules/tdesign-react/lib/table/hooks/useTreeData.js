/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import React, { useState, useMemo, useEffect } from 'react';
import { AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-react';
import { c as cloneDeep_1 } from '../../_chunks/dep-46dc5ea7.js';
import { g as get_1 } from '../../_chunks/dep-bca278f2.js';
import classNames from 'classnames';
import TableTreeStore from '../../_common/js/table/tree-store.js';
import useClassName from './useClassName.js';
import { renderCell } from '../TR.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-3a12b5c0.js';
import '../../_chunks/dep-1304d812.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-00ad7a91.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-7a725039.js';
import '../../_chunks/dep-e48ce47b.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-75ee7646.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-37dd0f2e.js';
import '../../_chunks/dep-de8845e2.js';
import '../../_chunks/dep-6a110e92.js';
import '../../_chunks/dep-893e0247.js';
import '../../_chunks/dep-2998e451.js';
import '../../_chunks/dep-a58d2703.js';
import '../../_common/js/table/utils.js';
import '../../_chunks/dep-04fa7e7c.js';
import '../../_common/js/log/log.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-98b209dd.js';
import '../../_chunks/dep-7237da98.js';
import '../../_chunks/dep-d905b9e9.js';
import '../../_chunks/dep-87e9108c.js';
import '../../_chunks/dep-873eecd0.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../utils.js';
import './useFixed.js';
import '../../_common/js/utils/helper.js';
import '../../_chunks/dep-fe234c83.js';
import '../../_common/js/utils/getScrollbarWidth.js';
import '../../_util/dom.js';
import 'raf';
import '../../_chunks/dep-f3228585.js';
import '../../_util/easing.js';
import '../../hooks/useDebounce.js';
import '../../_chunks/dep-1997a475.js';
import '../../_chunks/dep-d502af5f.js';
import '../../_util/usePersistFn.js';
import '../Ellipsis.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../hooks/useControlled.js';
import '../../_chunks/dep-8f4dca99.js';
import '../../_chunks/dep-65354ae3.js';
import '../../_chunks/dep-4192679d.js';
import '../../_util/noop.js';
import '../../_util/useAnimation.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../popup/hooks/useTrigger.js';
import 'react-is';
import '../../popup/utils/ref.js';
import '../../_util/composeRefs.js';
import '../../popup/utils/transition.js';
import '../../_util/useMutationObserver.js';
import '../../_util/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../tooltip/defaultProps.js';
import '../../tooltip/TooltipLite.js';
import '../../_util/useSwitch.js';
import '../../_common/js/utils/getPosition.js';
import './useLazyLoad.js';
import '../../_common/js/utils/observe.js';
import './useRowspanAndColspan.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTreeData(props) {
  var _props$tree;

  var data = props.data,
      columns = props.columns,
      tree = props.tree,
      rowKey = props.rowKey,
      treeExpandAndFoldIcon = props.treeExpandAndFoldIcon;

  var _useState = useState(new TableTreeStore()),
      _useState2 = _slicedToArray(_useState, 1),
      store = _useState2[0];

  var _useState3 = useState(function () {
    return getTreeNodeColumnCol();
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      treeNodeCol = _useState4[0],
      setTreeNodeCol = _useState4[1];

  var _useState5 = useState(data || []),
      _useState6 = _slicedToArray(_useState5, 2),
      dataSource = _useState6[0],
      setDataSource = _useState6[1];

  var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;

  var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useGlobalIcon = useGlobalIcon({
    AddRectangleIcon: AddRectangleIcon,
    MinusRectangleIcon: MinusRectangleIcon
  }),
      AddRectangleIcon$1 = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon$1 = _useGlobalIcon.MinusRectangleIcon;

  var rowDataKeys = useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  var checkedColumn = useMemo(function () {
    return columns.find(function (col) {
      return col.colKey === "row-select";
    });
  }, [columns]);
  var uniqueKeys = useMemo(function () {
    var _store$getAllUniqueKe;

    return (store === null || store === void 0 ? void 0 : (_store$getAllUniqueKe = store.getAllUniqueKeys(data, rowDataKeys)) === null || _store$getAllUniqueKe === void 0 ? void 0 : _store$getAllUniqueKe.join()) || "";
  }, [data, rowDataKeys, store]);
  useEffect(function () {
    if (!store || !checkedColumn) return;
    var rowValue = get_1(dataSource[0], rowDataKeys.rowKey);
    if (!store.treeDataMap.get(rowValue)) return;
    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
  }, [checkedColumn]);
  useEffect(function () {
    if (!data || !store) return;

    if (!tree || !Object.keys(tree).length) {
      setDataSource(data);
      return;
    }

    resetData(data);
  }, [uniqueKeys]);
  useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns, (_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.treeNodeColumnIndex]);

  function resetData(data2) {
    var _props$tree2;

    var newVal = cloneDeep_1(data2);
    store.initialTreeStore(newVal, props.columns, rowDataKeys);

    if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
      newVal = store.expandAll(newVal, rowDataKeys);
    }

    setDataSource(newVal);
  }

  function getTreeNodeStyle(level) {
    var _props$tree3, _props$tree4;

    if (level === void 0) return;
    var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) === void 0 ? 24 : (_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent;
    return indent ? {
      paddingLeft: "".concat(level * indent || 1, "px")
    } : {};
  }

  function toggleExpandData(p) {
    var newData = store.toggleExpandData(p, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));

    if (p.trigger === "inner") {
      var _props$onTreeExpandCh, _store$treeDataMap;

      var rowValue = get_1(p.row, rowDataKeys.rowKey);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: store === null || store === void 0 ? void 0 : (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue)
      });
    }
  }

  function getTreeNodeColumnCol() {
    var _props$tree5;

    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.treeNodeColumnIndex) || 0;

    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;

      treeNodeColumnIndex += 1;
    }

    return columns2[treeNodeColumnIndex];
  }

  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;

    var newCol = _objectSpread({}, treeNodeCol);

    newCol.cell = function (p) {
      var cellInfo = renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }), {
        cellEmptyContent: props.cellEmptyContent
      });
      var currentState = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

      var classes = _defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);

      var childrenNodes = get_1(p.row, rowDataKeys.childrenKey);

      if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
        var _store$treeDataMap$ge;

        var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
        var type = expanded ? "fold" : "expand";
        var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
          type: type
        }) || (expanded ? /* @__PURE__ */React.createElement(MinusRectangleIcon$1, null) : /* @__PURE__ */React.createElement(AddRectangleIcon$1, null));
        var iconNode = treeExpandAndFoldIcon ? treeExpandAndFoldIcon(_objectSpread({
          type: type
        }, p)) : defaultIconNode;
        return /* @__PURE__ */React.createElement("div", {
          className: classNames([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React.createElement("span", {
          className: tableTreeClasses.icon,
          onClick: function onClick() {
            return toggleExpandData(_objectSpread(_objectSpread({}, p), {}, {
              trigger: "inner"
            }));
          }
        }, iconNode), cellInfo);
      }

      return /* @__PURE__ */React.createElement("div", {
        style: colStyle,
        className: classNames([classes, tableTreeClasses.leafNode])
      }, /* @__PURE__ */React.createElement("span", {
        className: tableTreeClasses.icon
      }), cellInfo);
    };

    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }

    return newCol;
  }

  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);

    var newData = _toConsumableArray(dataSource);

    newData[rowIndex] = newRowData;
    setDataSource(_toConsumableArray(newData));
  }

  function getData(key) {
    return store.getData(key);
  }

  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));
  }

  function appendTo(key, newData) {
    if (!key) {
      setDataSource(_toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
      return;
    }

    setDataSource(_toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
  }

  function insertAfter(rowValue, newData) {
    setDataSource(_toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
  }

  function insertBefore(rowValue, newData) {
    setDataSource(_toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
  }

  function expandAll() {
    setDataSource(_toConsumableArray(store.expandAll(dataSource, rowDataKeys)));
  }

  function foldAll() {
    setDataSource(_toConsumableArray(store.foldAll(dataSource, rowDataKeys)));
  }

  function swapData(params) {
    var r = store.swapData(params.data, params, rowDataKeys);

    if (r.result) {
      setDataSource(_toConsumableArray(r.dataSource));
    } else {
      var _props$onAbnormalDrag;

      var params2 = {
        code: r.code,
        reason: r.reason
      };
      (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
    }
  }

  function getTreeNode() {
    return store.getTreeNode(dataSource, rowDataKeys);
  }

  function getTreeExpandedRow() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
  }

  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    swapData: swapData,
    setData: setData,
    getData: getData,
    remove: remove,
    appendTo: appendTo,
    insertAfter: insertAfter,
    insertBefore: insertBefore,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData,
    expandAll: expandAll,
    foldAll: foldAll,
    getTreeNode: getTreeNode,
    resetData: resetData,
    getTreeExpandedRow: getTreeExpandedRow
  };
}

export { useTreeData as default };
//# sourceMappingURL=useTreeData.js.map
