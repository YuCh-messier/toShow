/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import React, { useState, useEffect } from 'react';
import { i as intersection_1 } from '../../_chunks/dep-11f8d73a.js';
import { g as get_1 } from '../../_chunks/dep-bca278f2.js';
import { i as isFunction_1 } from '../../_chunks/dep-00ad7a91.js';
import useControlled from '../../hooks/useControlled.js';
import { isRowSelectedDisabled } from '../utils.js';
import { Checkbox } from '../../checkbox/index.js';
import { Radio } from '../../radio/index.js';
import log from '../../_common/js/log/log.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-2998e451.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-893e0247.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-b7bdd272.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-7237da98.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-d905b9e9.js';
import '../../_chunks/dep-e48ce47b.js';
import '../../_chunks/dep-6a110e92.js';
import '../../_chunks/dep-8f4dca99.js';
import '../../_chunks/dep-65354ae3.js';
import '../../_chunks/dep-4192679d.js';
import '../../_util/noop.js';
import '../../_chunks/dep-27763e39.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_chunks/dep-fe234c83.js';
import 'classnames';
import '../../_util/helper.js';
import '../../_chunks/dep-d24ebdc1.js';
import '../../_chunks/dep-504b652f.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-98b209dd.js';
import '../../_chunks/dep-1304d812.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-7a725039.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-75ee7646.js';
import '../../_chunks/dep-87e9108c.js';
import '../../_chunks/dep-873eecd0.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_chunks/dep-04fa7e7c.js';
import '../../checkbox/defaultProps.js';
import '../../_chunks/dep-52579c55.js';
import '../../_util/useCommonClassName.js';
import '../../radio/defaultProps.js';
import '../../_util/useMutationObserver.js';
import '../../_chunks/dep-1997a475.js';
import '../../_chunks/dep-d502af5f.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var selectedRowDataMap = /* @__PURE__ */new Map();
function useRowSelect(props, tableSelectedClasses) {
  var selectedRowKeys = props.selectedRowKeys,
      columns = props.columns,
      data = props.data,
      rowKey = props.rowKey,
      indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      selectedRowClassNames = _useState2[0],
      setSelectedRowClassNames = _useState2[1];

  var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
    defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
  }),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tSelectedRowKeys = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];

  var selectColumn = columns.find(function (_ref) {
    var type = _ref.type;
    return ["multiple", "single"].includes(type);
  });
  var canSelectedRows = data.filter(function (row, rowIndex) {
    return !isDisabled(row, rowIndex);
  });
  var intersectionKeys = intersection_1(tSelectedRowKeys, canSelectedRows.map(function (t) {
    return get_1(t, rowKey || "id");
  }));
  useEffect(function () {
    if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;

    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.disabled(p) ? tableSelectedClasses.disabled : "";
    };

    var disabledRowClass = selectColumn !== null && selectColumn !== void 0 && selectColumn.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys);

    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get_1(row, rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };

    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    setSelectedRowClassNames([disabledRowClass, selectedRowClass]);
  }, [data, columns, tSelectedRowKeys, selectColumn, rowKey]);

  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn, row, rowIndex);
  }

  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;
      var isChecked = intersectionKeys.length !== 0 && canSelectedRows.length !== 0 && intersectionKeys.length === canSelectedRows.length;
      return /* @__PURE__ */React.createElement(Checkbox, {
        checked: isChecked,
        indeterminate: isIndeterminate,
        disabled: !canSelectedRows.length,
        onChange: handleSelectAll
      });
    };
  }

  function renderSelectCell(p) {
    var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row,
        rowIndex = p.rowIndex;
    var checked = tSelectedRowKeys.includes(get_1(row, rowKey || "id"));
    var disabled = typeof column.disabled === "function" ? column.disabled({
      row: row,
      rowIndex: rowIndex
    }) : column.disabled;
    var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : column.checkProps;

    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onChange: function onChange() {
        handleSelectChange(row);
      }
    });

    var onCheckClick = function onCheckClick(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    };

    if (column.type === "single") return /* @__PURE__ */React.createElement(Radio, _objectSpread(_objectSpread({}, selectBoxProps), {}, {
      onClick: onCheckClick
    }));

    if (column.type === "multiple") {
      var isIndeterminate = indeterminateSelectedRowKeys !== null && indeterminateSelectedRowKeys !== void 0 && indeterminateSelectedRowKeys.length ? indeterminateSelectedRowKeys.includes(get_1(row, rowKey)) : false;
      return /* @__PURE__ */React.createElement(Checkbox, _objectSpread(_objectSpread({
        indeterminate: isIndeterminate
      }, selectBoxProps), {}, {
        onClick: onCheckClick
      }));
    }

    return null;
  }

  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys);

    var reRowKey = rowKey || "id";
    var id = get_1(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;

    if (selectColumn.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.type === "single") {
      selectedRowKeys2 = !isExisted ? [id] : [];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }

    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }

  function handleSelectAll(checked) {
    var reRowKey = rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.map(function (record) {
      return get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = (selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }

  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: tableSelectedClasses.checkCell,
      cell: function cell(p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : col.title
    });
  }

  useEffect(function () {
    for (var i = 0, len = data.length; i < len; i++) {
      selectedRowDataMap.set(get_1(data[i], rowKey || "id"), data[i]);
    }
  }, [data, rowKey]);
  return {
    selectedRowClassNames: selectedRowClassNames,
    formatToRowSelectColumn: formatToRowSelectColumn
  };
}

export { useRowSelect as default };
//# sourceMappingURL=useRowSelect.js.map
