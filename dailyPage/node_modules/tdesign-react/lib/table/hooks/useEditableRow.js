/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import { useState, useMemo } from 'react';
import { g as get_1 } from '../../_chunks/dep-bca278f2.js';
import { i as isFunction_1 } from '../../_chunks/dep-00ad7a91.js';
import { validate } from '../../form/formModel.js';
import { getEditableKeysMap } from '../utils.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-6a110e92.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-893e0247.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-2998e451.js';
import '../../_chunks/dep-18bd07e0.js';
import '../../_chunks/dep-fbe9bd73.js';
import '../../_chunks/dep-37dd0f2e.js';
import '../../_chunks/dep-de91e914.js';
import '../../_chunks/dep-f60756e1.js';
import '../../_chunks/dep-a98a054e.js';
import '../../_chunks/dep-d9495851.js';
import '../../_chunks/dep-68ef3987.js';
import '../../_chunks/dep-04fa7e7c.js';
import '../../_common/js/utils/helper.js';
import '../../_chunks/dep-88be14a4.js';
import '../../_chunks/dep-fe234c83.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var cellRuleMap = /* @__PURE__ */new Map();
function useEditableRow(props) {
  var editableRowKeys = props.editableRowKeys;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      errorListMap = _useState2[0],
      setErrorListMap = _useState2[1];

  var editableKeysMap = useMemo(function () {
    return editableRowKeys && getEditableKeysMap(editableRowKeys, props.data, props.rowKey || "id");
  }, [editableRowKeys, props.data, props.rowKey]);

  var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
    var errorMap = {};
    errors.forEach(function (_ref) {
      var row = _ref.row,
          col = _ref.col,
          errorList = _ref.errorList;
      var rowValue = get_1(row, props.rowKey || "id");
      var key = [rowValue, col.colKey].join("__");

      if (errorList !== null && errorList !== void 0 && errorList.length) {
        errorMap[key] = errorList;
      } else {
        delete errorMap[key];
      }
    });
    return errorMap;
  };

  var validateOneRowData = function validateOneRowData(rowValue) {
    var rowRules = cellRuleMap.get(rowValue);
    if (!rowRules) return;
    var list = rowRules.map(function (item) {
      return new Promise(function (resolve) {
        var editedRow = item.editedRow,
            col = item.col;
        var rules = isFunction_1(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;

        if (!col.edit || !rules || !rules) {
          resolve(_objectSpread(_objectSpread({}, item), {}, {
            errorList: []
          }));
          return;
        }

        validate(editedRow[col.colKey], rules).then(function (r) {
          resolve(_objectSpread(_objectSpread({}, item), {}, {
            errorList: r.filter(function (t) {
              return !t.result;
            })
          }));
        });
      });
    });
    return new Promise(function (resolve, reject) {
      Promise.all(list).then(function (errors) {
        resolve({
          errors: errors.filter(function (t) {
            var _t$errorList;

            return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
          }),
          errorMap: getErrorListMapByErrors(errors)
        });
      }, reject);
    });
  };

  var validateRowData = function validateRowData(rowValue) {
    return new Promise(function (resolve, reject) {
      validateOneRowData(rowValue).then(function (_ref2) {
        var _props$onRowValidate;

        var errors = _ref2.errors,
            errorMap = _ref2.errorMap;
        setErrorListMap(errorMap);
        var tTrigger = "parent";
        (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 ? void 0 : _props$onRowValidate.call(props, {
          trigger: tTrigger,
          result: errors
        });
        resolve({
          trigger: tTrigger,
          result: errors
        });
      }, reject);
    });
  };

  var validateTableData = function validateTableData() {
    var promiseList = [];
    var data = props.data || [];

    for (var i = 0, len = data.length; i < len; i++) {
      var rowValue = get_1(data[i], props.rowKey || "id");
      promiseList.push(validateOneRowData(rowValue));
    }

    return new Promise(function (resolve, reject) {
      Promise.all(promiseList).then(function (rList) {
        var _props$onValidate;

        var allErrorListMap = {};
        rList.forEach(function () {
          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            errors: [],
            errorMap: {}
          },
              errorMap = _ref3.errorMap;

          errorMap && Object.assign(allErrorListMap, errorMap);
        });
        setErrorListMap(allErrorListMap);
        (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
          result: allErrorListMap
        });
        resolve({
          result: allErrorListMap
        });
      }, reject);
    });
  };

  var onRuleChange = function onRuleChange(context) {
    if (props.editableRowKeys) {
      var rowValue = get_1(context.row, props.rowKey || "id");
      var rules = cellRuleMap.get(rowValue);

      if (rules) {
        var index = rules.findIndex(function (t) {
          return t.col.colKey === context.col.colKey;
        });

        if (index === -1) {
          rules.push(context);
        } else {
          rules[index] = context;
        }

        cellRuleMap.set(rowValue, rules);
      } else {
        cellRuleMap.set(rowValue, [context]);
      }
    }
  };

  var clearValidateData = function clearValidateData() {
    setErrorListMap({});
  };

  return {
    errorListMap: errorListMap,
    editableKeysMap: editableKeysMap,
    validateRowData: validateRowData,
    validateTableData: validateTableData,
    clearValidateData: clearValidateData,
    onRuleChange: onRuleChange
  };
}

export { useEditableRow };
//# sourceMappingURL=useEditableRow.js.map
