/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import { useState, useEffect } from 'react';
import { g as get_1 } from '../../_chunks/dep-bca278f2.js';
import log from '../../_common/js/log/log.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-6a110e92.js';
import '../../_chunks/dep-c393cab2.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-893e0247.js';
import '../../_chunks/dep-cf61d761.js';
import '../../_chunks/dep-090fa3b2.js';
import '../../_chunks/dep-339b0951.js';
import '../../_chunks/dep-ba4fa05d.js';
import '../../_chunks/dep-00ad7a91.js';
import '../../_chunks/dep-056b9d81.js';
import '../../_chunks/dep-86599c44.js';
import '../../_chunks/dep-2998e451.js';

function getCellKey(row, rowKey, colKey, colIndex) {
  var rowValue = get_1(row, rowKey);

  if (rowValue === void 0) {
    log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
  }

  return [rowValue, colKey || colIndex].join("_");
}
function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
  var _useState = useState( /* @__PURE__ */new Map()),
      _useState2 = _slicedToArray(_useState, 1),
      skipSpansMap = _useState2[0];

  var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
    var rowIndex = params.rowIndex,
        colIndex = params.colIndex;
    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
    var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
    var maxColIndex = colIndex + (skipSpansValue.colspan || 1);

    for (var i = rowIndex; i < maxRowIndex; i++) {
      for (var j = colIndex; j < maxColIndex; j++) {
        if (i !== rowIndex || j !== colIndex) {
          if (!data[i] || !columns[j]) return;
          var cellKey = getCellKey(data[i], rowKey, columns[j].colKey, j);
          var state = skipSpansMap.get(cellKey) || {};
          state.skipped = true;
          skipSpansMap.set(cellKey, state);
        }
      }
    }
  };

  var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
    skipSpansMap.clear();
    if (!data2 || !rowspanAndColspan2) return;

    for (var i = 0, len = data2.length; i < len; i++) {
      var row = data2[i];

      for (var j = 0, colLen = columns2.length; j < colLen; j++) {
        var col = columns2[j];
        var params = {
          row: row,
          col: col,
          rowIndex: i,
          colIndex: j
        };
        var cellKey = getCellKey(row, rowKey, col.colKey, j);
        var state = skipSpansMap.get(cellKey) || {};
        var o = rowspanAndColspan2(params) || {};

        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
          o.rowspan && (state.rowspan = o.rowspan);
          o.colspan && (state.colspan = o.colspan);
          skipSpansMap.set(cellKey, state);
        }

        onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 ? void 0 : onTrRowspanOrColspan(params, state);
      }
    }
  };

  useEffect(function () {
    updateSkipSpansMap(data, columns, rowspanAndColspan);
  }, [data, columns, rowspanAndColspan]);
  return {
    skipSpansMap: skipSpansMap,
    updateSkipSpansMap: updateSkipSpansMap
  };
}

export { useRowspanAndColspan as default, getCellKey };
//# sourceMappingURL=useRowspanAndColspan.js.map
