/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { useMemo } from 'react';
import { c as camelCase_1 } from '../_chunks/dep-d24ebdc1.js';
import { g as get_1 } from '../_chunks/dep-bca278f2.js';
import { p as pick_1 } from '../_chunks/dep-e5ce5161.js';
import classNames from 'classnames';
import TR, { TABLE_PROPS, ROW_LISTENERS } from './TR.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useClassName from './hooks/useClassName.js';
import useRowspanAndColspan from './hooks/useRowspanAndColspan.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-504b652f.js';
import '../_chunks/dep-6a110e92.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-fd4264c2.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-e65dabd7.js';
import '../_chunks/dep-de8845e2.js';
import '../_chunks/dep-d905b9e9.js';
import './utils.js';
import './hooks/useFixed.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-88be14a4.js';
import '../_chunks/dep-fe234c83.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/getScrollbarWidth.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';
import '../hooks/useDebounce.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import '../_util/usePersistFn.js';
import './Ellipsis.js';
import '../tooltip/index.js';
import '../tooltip/Tooltip.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../common/Portal.js';
import 'react-dom';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../_util/useSwitch.js';
import '../_common/js/utils/getPosition.js';
import './hooks/useLazyLoad.js';
import '../_common/js/utils/observe.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
function TBody(props) {
  var data = props.data,
      columns = props.columns,
      rowKey = props.rowKey,
      firstFullRow = props.firstFullRow,
      lastFullRow = props.lastFullRow;

  var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      global = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useClassName = useClassName(),
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableBaseClass = _useClassName.tableBaseClass;

  var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, props.rowspanAndColspan),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;

  var tbodyClasses = useMemo(function () {
    return [tableBaseClass.body];
  }, [tableBaseClass.body]);
  var hasFullRowConfig = useMemo(function () {
    return firstFullRow || lastFullRow;
  }, [firstFullRow, lastFullRow]);

  var renderEmpty = function renderEmpty(columns2) {
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames([tableBaseClass.emptyRow, _defineProperty({}, tableFullRowClasses.base, props.isWidthOverflow)])
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columns2.length
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames([tableBaseClass.empty, _defineProperty({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)]),
      style: props.isWidthOverflow ? {
        width: "".concat(props.tableWidth, "px")
      } : {}
    }, props.empty || t(global.empty))));
  };

  var getFullRow = function getFullRow(columnLength2, type) {
    var tType = camelCase_1(type);
    var fullRowNode = {
      "first-full-row": firstFullRow,
      "last-full-row": lastFullRow
    }[type];
    if (!fullRowNode) return null;
    var isFixedToLeft = props.isWidthOverflow && columns.find(function (col) {
      return col.fixed === "left";
    });
    var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames(classes)
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columnLength2
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(_defineProperty({}, tableFullRowClasses.innerFullRow, isFixedToLeft)),
      style: isFixedToLeft ? {
        width: "".concat(props.tableWidth, "px")
      } : {}
    }, /* @__PURE__ */React.createElement("div", {
      className: tableFullRowClasses.innerFullElement
    }, fullRowNode))));
  };

  var columnLength = columns.length;
  var dataLength = data.length;
  var trNodeList = [];
  var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
  data === null || data === void 0 ? void 0 : data.forEach(function (row, rowIndex) {
    var trProps = _objectSpread(_objectSpread({}, pick_1(props, TABLE_PROPS)), {}, {
      rowKey: props.rowKey || "id",
      row: row,
      columns: columns,
      rowIndex: rowIndex,
      dataLength: dataLength,
      skipSpansMap: skipSpansMap,
      classPrefix: props.classPrefix,
      ellipsisOverlayClassName: props.ellipsisOverlayClassName
    }, pick_1(props, properties));

    if (props.onCellClick) {
      trProps.onCellClick = props.onCellClick;
    }

    var trNode = /* @__PURE__ */React.createElement(TR, _objectSpread(_objectSpread({
      key: get_1(row, props.rowKey || "id") + rowIndex
    }, trProps), {}, {
      onRowMounted: props.handleRowMounted
    }));
    trNodeList.push(trNode);

    if (props.renderExpandedRow) {
      var p = {
        row: row,
        index: rowIndex,
        columns: columns,
        tableWidth: props.tableWidth,
        isWidthOverflow: props.isWidthOverflow
      };
      var expandedContent = props.renderExpandedRow(p);
      expandedContent && trNodeList.push(expandedContent);
    }
  });
  var list = /* @__PURE__ */React.createElement(React.Fragment, null, getFullRow(columnLength, "first-full-row"), trNodeList, getFullRow(columnLength, "last-full-row"));
  var isEmpty = !(data !== null && data !== void 0 && data.length) && !props.loading && !hasFullRowConfig;
  var translate = "translate(0, ".concat(props.translateY, "px)");
  var posStyle = {
    transform: translate,
    "-ms-transform": translate,
    "-moz-transform": translate,
    "-webkit-transform": translate
  };
  return /* @__PURE__ */React.createElement("tbody", {
    className: classNames(tbodyClasses),
    style: props.isVirtual && _objectSpread({}, posStyle)
  }, isEmpty ? renderEmpty(columns) : list);
}
TBody.displayName = "TBody";

export { ROW_AND_TD_LISTENERS, TBody as default, extendTableProps };
//# sourceMappingURL=TBody.js.map
