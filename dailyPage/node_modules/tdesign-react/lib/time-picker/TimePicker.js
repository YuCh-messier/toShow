/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { useState, useEffect } from 'react';
import classNames from 'classnames';
import dayjs from 'dayjs';
import { c as customParseFormat } from '../_chunks/dep-df494df9.js';
import { TimeIcon } from 'tdesign-icons-react';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import useControlled from '../hooks/useControlled.js';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import noop from '../_util/noop.js';
import { SelectInput } from '../select-input/index.js';
import TimeRangePicker from './TimeRangePicker.js';
import TimePickerPanel from './panel/TimePickerPanel.js';
import { useTimePickerTextConfig } from './hooks/useTimePickerTextConfig.js';
import { validateInputValue, formatInputValue } from '../_common/js/time-picker/utils.js';
import { DEFAULT_FORMAT, DEFAULT_STEPS } from '../_common/js/time-picker/const.js';
import { timePickerDefaultProps } from './defaultProps.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-d502af5f.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-090fa3b2.js';
import 'hoist-non-react-statics';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-c393cab2.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/useAnimation.js';
import '../common/Portal.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-1997a475.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-e5ce5161.js';
import '../_chunks/dep-6a110e92.js';
import '../_chunks/dep-fd4264c2.js';
import '../_chunks/dep-e65dabd7.js';
import '../_chunks/dep-de8845e2.js';
import '../input/index.js';
import '../input/Input.js';
import '../_chunks/dep-fe234c83.js';
import '../_util/useLayoutEffect.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-88be14a4.js';
import '../input/InputGroup.js';
import '../locale/LocalReceiver.js';
import '../input/defaultProps.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../range-input/index.js';
import '../range-input/RangeInput.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import './panel/SinglePanel.js';
import '../hooks/useDebounce.js';
import '../_util/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../button/index.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../button/defaultProps.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
dayjs.extend(customParseFormat);
var TimePicker = forwardRefWithStatics(function (props, ref) {
  var TEXT_CONFIG = useTimePickerTextConfig();
  var allowInput = props.allowInput,
      className = props.className,
      clearable = props.clearable,
      disabled = props.disabled,
      style = props.style,
      _props$format = props.format,
      format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
      _props$hideDisabledTi = props.hideDisabledTime,
      hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.placeholder : _props$placeholder,
      disableTime = props.disableTime,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$onOpen = props.onOpen,
      onOpen = _props$onOpen === void 0 ? noop : _props$onOpen;

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isPanelShowed = _useState2[0],
      setPanelShow = _useState2[1];

  var _useState3 = useState(""),
      _useState4 = _slicedToArray(_useState3, 2),
      currentValue = _useState4[0],
      setCurrentValue = _useState4[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = useGlobalIcon({
    TimeIcon: TimeIcon
  }),
      TimeIcon$1 = _useGlobalIcon.TimeIcon;

  var name = "".concat(classPrefix, "-time-picker");
  var inputClasses = classNames("".concat(name, "__group"), _defineProperty({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

  var handleShowPopup = function handleShowPopup(visible, context) {
    setPanelShow(visible);
    visible ? onOpen(context) : onClose(context);
  };

  var handleClear = function handleClear(context) {
    var e = context.e;
    e.stopPropagation();
    setCurrentValue("");
    onChange(null);
  };

  var handleInputChange = function handleInputChange(value2) {
    setCurrentValue(value2);
  };

  var handleInputBlur = function handleInputBlur(value2, _ref) {
    var e = _ref.e;

    if (allowInput) {
      var isValidTime = validateInputValue(currentValue, format);

      if (isValidTime) {
        onChange(formatInputValue(currentValue, format));
      }
    }

    onBlur({
      value: value2,
      e: e
    });
  };

  var handleClickConfirm = function handleClickConfirm() {
    var isValidTime = validateInputValue(currentValue, format);
    if (isValidTime) onChange(currentValue);
    setPanelShow(false);
  };

  useEffect(function () {
    setCurrentValue(isPanelShowed ? value !== null && value !== void 0 ? value : "" : "");
  }, [isPanelShowed, value]);
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(name, className),
    ref: ref,
    style: style
  }, /* @__PURE__ */React.createElement(SelectInput, {
    onFocus: onFocus,
    onClear: handleClear,
    disabled: disabled,
    clearable: clearable,
    allowInput: allowInput,
    className: inputClasses,
    suffixIcon: /* @__PURE__ */React.createElement(TimeIcon$1, null),
    popupVisible: isPanelShowed,
    onInputChange: handleInputChange,
    onBlur: handleInputBlur,
    onPopupVisibleChange: handleShowPopup,
    placeholder: !value ? placeholder : void 0,
    value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
    inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
    inputProps: props.inputProps,
    popupProps: _objectSpread({
      overlayInnerStyle: {
        width: "auto",
        padding: 0
      }
    }, props.popupProps),
    panel: /* @__PURE__ */React.createElement(TimePickerPanel, {
      steps: steps,
      format: format,
      value: currentValue,
      isFooterDisplay: true,
      isShowPanel: isPanelShowed,
      disableTime: disableTime,
      onChange: setCurrentValue,
      hideDisabledTime: hideDisabledTime,
      handleConfirmClick: handleClickConfirm
    })
  }));
}, {
  TimeRangePicker: TimeRangePicker,
  TimePickerPanel: TimePickerPanel
});
TimePicker.displayName = "TimePicker";
TimePicker.defaultProps = timePickerDefaultProps;

export { TimePicker as default };
//# sourceMappingURL=TimePicker.js.map
