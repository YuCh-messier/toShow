/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _typeof } from '../_chunks/dep-3627969a.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import { useState, useMemo } from 'react';
import { i as isObject_1 } from '../_chunks/dep-056b9d81.js';
import { i as isFunction_1 } from '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-cf61d761.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var MAX_POPUP_WIDTH = 1e3;
function useOverlayInnerStyle(props) {
  var popupProps = props.popupProps,
      autoWidth = props.autoWidth,
      readonly = props.readonly,
      onPopupVisibleChange = props.onPopupVisibleChange,
      allowInput = props.allowInput;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      innerPopupVisible = _useState2[0],
      setInnerPopupVisible = _useState2[1];

  var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
    if (!triggerElement || !popupElement) return;
    var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
    var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
    var otherOverlayInnerStyle = {};

    if (popupProps && _typeof(popupProps.overlayInnerStyle) === "object" && !popupProps.overlayInnerStyle.width) {
      otherOverlayInnerStyle = popupProps.overlayInnerStyle;
    }

    return _objectSpread({
      width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
    }, otherOverlayInnerStyle);
  };

  var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
    if (readonly) return;
    var newVisible = context.trigger === "trigger-element-click" && allowInput ? true : visible;
    setInnerPopupVisible(newVisible);
    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(newVisible, context);
  };

  var tOverlayInnerStyle = useMemo(function () {
    var result = {};
    var overlayInnerStyle = (popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle) || {};

    if (isFunction_1(overlayInnerStyle) || isObject_1(overlayInnerStyle) && overlayInnerStyle.width) {
      result = overlayInnerStyle;
    } else if (!autoWidth) {
      result = matchWidthFunc;
    }

    return result;
  }, [autoWidth, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle]);
  return {
    tOverlayInnerStyle: tOverlayInnerStyle,
    innerPopupVisible: innerPopupVisible,
    onInnerPopupVisibleChange: onInnerPopupVisibleChange
  };
}

export { useOverlayInnerStyle as default };
//# sourceMappingURL=useOverlayInnerStyle.js.map
