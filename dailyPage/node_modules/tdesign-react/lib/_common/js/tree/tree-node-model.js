/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../_chunks/dep-ebef14de.js';
import { p as pick_1 } from '../../../_chunks/dep-e5ce5161.js';
import { o as omit_1 } from '../../../_chunks/dep-5374504a.js';
import log from '../log/log.js';
import '../../../_chunks/dep-6a110e92.js';
import '../../../_chunks/dep-c393cab2.js';
import '../../../_chunks/dep-3627969a.js';
import '../../../_chunks/dep-893e0247.js';
import '../../../_chunks/dep-cf61d761.js';
import '../../../_chunks/dep-090fa3b2.js';
import '../../../_chunks/dep-339b0951.js';
import '../../../_chunks/dep-ba4fa05d.js';
import '../../../_chunks/dep-00ad7a91.js';
import '../../../_chunks/dep-056b9d81.js';
import '../../../_chunks/dep-86599c44.js';
import '../../../_chunks/dep-2998e451.js';
import '../../../_chunks/dep-fd4264c2.js';
import '../../../_chunks/dep-7a725039.js';
import '../../../_chunks/dep-e48ce47b.js';
import '../../../_chunks/dep-75ee7646.js';
import '../../../_chunks/dep-d9495851.js';
import '../../../_chunks/dep-f60756e1.js';
import '../../../_chunks/dep-e65dabd7.js';
import '../../../_chunks/dep-de8845e2.js';
import '../../../_chunks/dep-d905b9e9.js';
import '../../../_chunks/dep-3a12b5c0.js';
import '../../../_chunks/dep-1304d812.js';
import '../../../_chunks/dep-de91e914.js';
import '../../../_chunks/dep-a98a054e.js';
import '../../../_chunks/dep-68ef3987.js';
import '../../../_chunks/dep-37dd0f2e.js';
import '../../../_chunks/dep-4192679d.js';
import '../../../_chunks/dep-87e9108c.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getExposedProps(node) {
  var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
  return props;
}

function createNodeModel(node) {
  var props = getExposedProps(node);

  var model = _objectSpread(_objectSpread({}, props), {}, {
    getLevel: function getLevel() {
      return node.getLevel();
    },
    getIndex: function getIndex() {
      return node.getIndex();
    },
    isFirst: function isFirst() {
      return node.isFirst();
    },
    isLast: function isLast() {
      return node.isLast();
    },
    isLeaf: function isLeaf() {
      return node.isLeaf();
    },
    insertBefore: function insertBefore(newData) {
      return node.insertBefore(newData);
    },
    insertAfter: function insertAfter(newData) {
      return node.insertAfter(newData);
    },
    appendData: function appendData(data) {
      return node.append(data);
    },
    getPath: function getPath() {
      var nodes = node.getPath();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getParent: function getParent() {
      var _node$parent;

      return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
    },
    getParents: function getParents() {
      var nodes = node.getParents();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getRoot: function getRoot() {
      var root = node.getRoot();
      return root === null || root === void 0 ? void 0 : root.getModel();
    },
    getSiblings: function getSiblings() {
      var nodes = node.getSiblings();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getChildren: function getChildren(deep) {
      var childrenModel = false;
      var children = node.children;

      if (Array.isArray(children)) {
        if (children.length > 0) {
          if (deep) {
            var nodes = node.walk();
            nodes.shift();
            childrenModel = nodes.map(function (item) {
              return item.getModel();
            });
          } else {
            childrenModel = children.map(function (item) {
              return item.getModel();
            });
          }
        } else {
          childrenModel = false;
        }
      } else if (typeof children === "boolean") {
        childrenModel = children;
      }

      return childrenModel;
    },
    remove: function remove(value) {
      if (!value) {
        node.remove();
        return;
      }

      var tree = node.tree;
      var targetNode = tree.getNode(value);

      if (!targetNode) {
        log.warnOnce("Tree", "`".concat(value, "` is not exist"));
        return;
      }

      var parents = targetNode.getParents();
      var parentValues = parents.map(function (pnode) {
        return pnode.value;
      });

      if (parentValues.indexOf(node.value) < 0) {
        log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
        return;
      }

      targetNode.remove();
    },
    setData: function setData(data) {
      var _data = omit_1(data, ["children", "value", "label"]);

      var keys = node.tree.config.keys;
      var dataValue = data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
      var dataLabel = data[(keys === null || keys === void 0 ? void 0 : keys.label) || "label"];
      if (dataValue !== void 0) _data.value = dataValue;
      if (dataLabel !== void 0) _data.label = dataLabel;
      Object.assign(node.data, _data);
      Object.assign(node, _data);
    }
  });

  return model;
}
function updateNodeModel(model, node) {
  var props = getExposedProps(node);
  Object.assign(model, props);
}

export { createNodeModel, updateNodeModel };
//# sourceMappingURL=tree-node-model.js.map
