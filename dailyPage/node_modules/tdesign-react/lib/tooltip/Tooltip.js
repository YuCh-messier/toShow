/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-fe234c83.js';
import React, { forwardRef, useState, useRef, useEffect, useImperativeHandle } from 'react';
import classNames from 'classnames';
import { Popup } from '../popup/index.js';
import useConfig from '../hooks/useConfig.js';
import { tooltipDefaultProps } from './defaultProps.js';
import '../_chunks/dep-24599104.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-090fa3b2.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../common/Portal.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';

var _excluded = ["theme", "showArrow", "destroyOnClose", "overlayClassName", "children", "duration", "placement"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Tooltip = /*#__PURE__*/forwardRef(function (props, ref) {
  var theme = props.theme,
      _props$showArrow = props.showArrow,
      showArrow = _props$showArrow === void 0 ? true : _props$showArrow,
      _props$destroyOnClose = props.destroyOnClose,
      destroyOnClose = _props$destroyOnClose === void 0 ? true : _props$destroyOnClose,
      overlayClassName = props.overlayClassName,
      children = props.children,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 0 : _props$duration,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState(duration !== 0),
      _useState2 = _slicedToArray(_useState, 2),
      isTipShowed = _useState2[0],
      setTipshow = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      timeup = _useState4[0],
      setTimeup = _useState4[1];

  var popupRef = useRef();
  var timerRef = useRef(null);

  var _useState5 = useState([0, 0]),
      _useState6 = _slicedToArray(_useState5, 2),
      offset = _useState6[0],
      setOffset = _useState6[1];

  var toolTipClass = classNames("".concat(classPrefix, "-tooltip"), _defineProperty({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), overlayClassName);
  var isPlacedByMouse = placement === "mouse";

  var setVisible = function setVisible(v) {
    if (duration !== 0) setTimeup(false);
    setTipshow(v);
  };

  var calculatePos = function calculatePos(e) {
    var rect = e.target.getBoundingClientRect();
    var x = e.clientX - rect.left;
    var y = e.clientY - rect.top;
    return {
      x: x,
      y: y
    };
  };

  var handleShowTip = function handleShowTip(visible, _ref) {
    var e = _ref.e,
        trigger = _ref.trigger;

    if (duration === 0 || duration !== 0 && timeup) {
      if (visible && placement === "mouse" && (trigger === "trigger-element-hover" || trigger === "trigger-element-click")) {
        var _calculatePos = calculatePos(e),
            x = _calculatePos.x;

        setOffset([x, 0]);
      }

      setTipshow(visible);
    }
  };

  useEffect(function () {
    if (duration !== 0 && !timeup) {
      timerRef.current = window.setTimeout(function () {
        setTipshow(false);
        setTimeup(true);
      }, duration);
    }

    return function () {
      if (timerRef.current) window.clearTimeout(timerRef.current);
    };
  }, [duration, timeup]);
  useImperativeHandle(ref, function () {
    return _objectSpread({
      setVisible: setVisible
    }, popupRef.current || {});
  });
  return /* @__PURE__ */React.createElement(Popup, _objectSpread({
    ref: popupRef,
    destroyOnClose: destroyOnClose,
    showArrow: isPlacedByMouse ? false : showArrow,
    overlayClassName: toolTipClass,
    visible: isTipShowed,
    onVisibleChange: handleShowTip,
    popperOptions: {
      modifiers: isPlacedByMouse ? [{
        name: "offset",
        options: {
          offset: offset
        }
      }] : []
    },
    placement: isPlacedByMouse ? "bottom-left" : placement
  }, restProps), children);
});
Tooltip.displayName = "Tooltip";
Tooltip.defaultProps = tooltipDefaultProps;

export { Tooltip as default };
//# sourceMappingURL=Tooltip.js.map
