/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { useRef, useState, useEffect } from 'react';
import classNames from 'classnames';
import { CSSTransition } from 'react-transition-group';
import useSwitch from '../_util/useSwitch.js';
import useAnimation from '../_util/useAnimation.js';
import Portal from '../common/Portal.js';
import useConfig from '../hooks/useConfig.js';
import getPosition from '../_common/js/utils/getPosition.js';
import { tooltipLiteDefaultProps } from './defaultProps.js';
import { getTransitionParams } from '../popup/utils/transition.js';
import '../_chunks/dep-24599104.js';
import '../_util/usePersistFn.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DEFAULT_TRANSITION_TIMEOUT = 180;

var TooltipLite = function TooltipLite(props) {
  var _classnames;

  var style = props.style,
      className = props.className,
      placement = props.placement,
      showArrow = props.showArrow,
      theme = props.theme,
      children = props.children,
      triggerElement = props.triggerElement,
      content = props.content,
      showShadow = props.showShadow;
  var triggerRef = useRef(null);
  var contentRef = useRef(null);
  var popupRef = useRef(null);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useSwitch = useSwitch(),
      _useSwitch2 = _slicedToArray(_useSwitch, 2),
      hover = _useSwitch2[0],
      hoverAction = _useSwitch2[1];

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];

  var _useAnimation = useAnimation(),
      keepFade = _useAnimation.keepFade;

  useEffect(function () {
    if (triggerRef.current && contentRef.current) {
      setPosition(getPosition(triggerRef.current, contentRef.current, placement));
    }
  }, [triggerRef.current, contentRef.current, placement, hover]);

  var getTriggerChildren = function getTriggerChildren(children2) {
    var appendProps = {
      ref: triggerRef,
      onMouseEnter: hoverAction.on,
      onMouseLeave: hoverAction.off
    };

    if (! /*#__PURE__*/React.isValidElement(children2)) {
      return /*#__PURE__*/React.cloneElement( /* @__PURE__ */React.createElement("div", null, children2), _objectSpread({}, appendProps));
    }

    return /*#__PURE__*/React.cloneElement(children2, _objectSpread({}, appendProps));
  };

  return /* @__PURE__ */React.createElement("div", null, getTriggerChildren(children || triggerElement), hover && /* @__PURE__ */React.createElement(Portal, null, /* @__PURE__ */React.createElement(CSSTransition, _objectSpread({
    appear: true,
    timeout: {
      appear: DEFAULT_TRANSITION_TIMEOUT
    },
    "in": hover,
    nodeRef: popupRef
  }, getTransitionParams({
    classPrefix: classPrefix,
    fadeAnimation: keepFade
  })), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup"), "".concat(classPrefix, "-tooltip"), (_classnames = {}, _defineProperty(_classnames, "".concat(classPrefix, "-tooltip--").concat(theme), theme), _defineProperty(_classnames, "".concat(classPrefix, "-tooltip--noshadow"), !showShadow), _classnames), className),
    "data-popper-placement": placement,
    ref: popupRef
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup__content"), _defineProperty({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow)),
    style: _objectSpread({
      position: "absolute",
      left: position === null || position === void 0 ? void 0 : position.left,
      top: position === null || position === void 0 ? void 0 : position.top
    }, style),
    ref: contentRef
  }, content, showArrow && /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-popup__arrow")
  }))))));
};

TooltipLite.displayName = "Tooltiplite";
TooltipLite.defaultProps = tooltipLiteDefaultProps;
var _TooltipLite = /*#__PURE__*/React.memo(TooltipLite);

export { _TooltipLite as default };
//# sourceMappingURL=TooltipLite.js.map
