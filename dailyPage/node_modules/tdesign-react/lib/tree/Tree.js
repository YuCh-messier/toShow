/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { forwardRef, useState, useImperativeHandle, useMemo } from 'react';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { usePersistFn } from '../_util/usePersistFn.js';
import { useTreeConfig } from './useTreeConfig.js';
import useControllable from './useControllable.js';
import TreeItem from './TreeItem.js';
import { useStore } from './useStore.js';
import { TreeDraggableContext } from './TreeDraggableContext.js';
import '../_chunks/dep-24599104.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-090fa3b2.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../locale/LocalReceiver.js';
import '../hooks/useControlled.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-893e0247.js';
import '../_util/noop.js';
import 'tdesign-icons-react';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-88be14a4.js';
import '../_chunks/dep-fe234c83.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../hooks/useGlobalIcon.js';
import '../checkbox/index.js';
import '../_chunks/dep-27763e39.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-d24ebdc1.js';
import '../_chunks/dep-504b652f.js';
import '../_chunks/dep-04fa7e7c.js';
import '../checkbox/defaultProps.js';
import './useDraggable.js';
import '../_chunks/dep-fd92983c.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import '../_util/composeRefs.js';
import '../_chunks/dep-46dc5ea7.js';
import '../_chunks/dep-3a12b5c0.js';
import '../_chunks/dep-37dd0f2e.js';
import '../_chunks/dep-de8845e2.js';
import '../_util/useUpdateEffect.js';
import '../_util/useLayoutEffect.js';
import '../_common/js/tree/tree-store.js';
import '../_chunks/dep-a58d2703.js';
import '../_chunks/dep-9a8a8f67.js';
import '../_chunks/dep-b7bdd272.js';
import '../_chunks/dep-e65dabd7.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-18bd07e0.js';
import '../_chunks/dep-bca278f2.js';
import '../_chunks/dep-6a110e92.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-e5ce5161.js';
import '../_chunks/dep-fd4264c2.js';
import '../_chunks/dep-5374504a.js';
import '../_common/js/log/log.js';
import '../_util/createHookContext.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Tree = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames;

  var _useTreeConfig = useTreeConfig(),
      treeClassNames = _useTreeConfig.treeClassNames,
      transitionNames = _useTreeConfig.transitionNames,
      transitionClassNames = _useTreeConfig.transitionClassNames,
      transitionDuration = _useTreeConfig.transitionDuration,
      locale = _useTreeConfig.locale;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      visibleNodes = _useState2[0],
      setVisibleNodes = _useState2[1];

  var empty = props.empty,
      activable = props.activable,
      disabled = props.disabled,
      checkable = props.checkable,
      checkProps = props.checkProps,
      disableCheck = props.disableCheck,
      hover = props.hover,
      icon = props.icon,
      line = props.line,
      label = props.label,
      operations = props.operations,
      transition = props.transition,
      expandOnClickNode = props.expandOnClickNode,
      onClick = props.onClick;

  var _useControllable = useControllable(props),
      value = _useControllable.value,
      onChange = _useControllable.onChange,
      expanded = _useControllable.expanded,
      onExpand = _useControllable.onExpand,
      onActive = _useControllable.onActive,
      actived = _useControllable.actived;

  var emptyText = locale("empty");
  var store = useStore(_objectSpread(_objectSpread({}, props), {}, {
    value: value,
    onChange: onChange,
    expanded: expanded,
    onExpand: onExpand,
    onActive: onActive,
    actived: actived
  }), function () {
    var nodes = store.getNodes();
    var newVisibleNodes = nodes.filter(function (node) {
      return node.visible;
    });
    setVisibleNodes(newVisibleNodes);
  });
  var setExpanded = usePersistFn(function (node, isExpanded, e) {
    var expanded2 = node.setExpanded(isExpanded);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    e && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
      node: treeNodeModel,
      e: e
    }));
    return expanded2;
  });
  var setActived = usePersistFn(function (node, isActived) {
    var actived2 = node.setActived(isActived);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onActive === null || onActive === void 0 ? void 0 : onActive(actived2, {
      node: treeNodeModel
    });
    return actived2;
  });
  var setChecked = usePersistFn(function (node, isChecked) {
    var checked = node.setChecked(isChecked);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onChange === null || onChange === void 0 ? void 0 : onChange(checked, {
      node: treeNodeModel
    });
    return checked;
  });

  var handleItemClick = function handleItemClick(node, options) {
    if (!node) {
      return;
    }

    var isDisabled = disabled || node.disabled;
    var expand = options.expand,
        active = options.active,
        event = options.event;
    if (expand) setExpanded(node, !node.isExpanded(), event);

    if (active && !isDisabled) {
      setActived(node, !node.isActived());
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onClick === null || onClick === void 0 ? void 0 : onClick({
        node: treeNodeModel,
        e: event
      });
    }
  };

  var handleChange = function handleChange(node) {
    if (!node || disabled || node.disabled) {
      return;
    }

    setChecked(node, !node.isChecked());
  };

  useImperativeHandle(ref, function () {
    return {
      store: store,
      appendTo: function appendTo(value2, newData) {
        var list = [];

        if (Array.isArray(newData)) {
          list = newData;
        } else {
          list = [newData];
        }

        list.forEach(function (item) {
          store.appendNodes(value2, item);
        });
      },
      getIndex: function getIndex(value2) {
        return store.getNodeIndex(value2);
      },
      getItem: function getItem(value2) {
        var node = store.getNode(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value2) {
        var nodes = store.getNodes(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getParent: function getParent(value2) {
        var node = store.getParent(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value2) {
        var nodes = store.getParents(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value2) {
        var node = store.getNode(value2);
        var pathNodes = [];

        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }

        return pathNodes;
      },
      insertAfter: function insertAfter(value2, newData) {
        return store.insertAfter(value2, newData);
      },
      insertBefore: function insertBefore(value2, newData) {
        return store.insertBefore(value2, newData);
      },
      remove: function remove(value2) {
        return store.remove(value2);
      },
      setItem: function setItem(value2, options) {
        var node = this.store.getNode(value2);
        var spec = options;

        if (node && spec) {
          if ("expanded" in options) {
            setExpanded(node, spec.expanded);
            delete spec.expanded;
          }

          if ("actived" in options) {
            setActived(node, spec.actived);
            delete spec.actived;
          }

          if ("checked" in options) {
            setChecked(node, spec.checked);
            delete spec.checked;
          }

          node.set(spec);
        }
      }
    };
  }, [store, setExpanded, setActived, setChecked]);
  var nodeList = useMemo(function () {
    return visibleNodes.map(function () {
      return /*#__PURE__*/React.createRef();
    });
  }, [visibleNodes]);

  var renderEmpty = function renderEmpty() {
    var emptyView = empty || emptyText;

    if (empty instanceof Function) {
      emptyView = empty();
    }

    return emptyView;
  };

  var renderItems = function renderItems() {
    if (visibleNodes.length <= 0) {
      return renderEmpty();
    }

    return /* @__PURE__ */React.createElement(TransitionGroup, {
      name: transitionNames.treeNode,
      className: treeClassNames.treeList
    }, visibleNodes.map(function (node, index) {
      return /* @__PURE__ */React.createElement(CSSTransition, {
        nodeRef: nodeList[index],
        key: node.value,
        timeout: transitionDuration,
        classNames: transitionClassNames
      }, /* @__PURE__ */React.createElement(TreeItem, {
        ref: nodeList[index],
        node: node,
        empty: empty,
        icon: icon,
        label: label,
        line: line,
        transition: transition,
        expandOnClickNode: expandOnClickNode,
        activable: activable,
        operations: operations,
        checkProps: checkProps,
        disableCheck: disableCheck,
        onClick: handleItemClick,
        onChange: handleChange
      }));
    }));
  };

  var draggable = useMemo(function () {
    return {
      props: props,
      store: store
    };
  }, [props, store]);
  return /* @__PURE__ */React.createElement(TreeDraggableContext.Provider, {
    value: draggable
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(treeClassNames.tree, (_classNames = {}, _defineProperty(_classNames, treeClassNames.disabled, disabled), _defineProperty(_classNames, treeClassNames.treeHoverable, hover), _defineProperty(_classNames, treeClassNames.treeCheckable, checkable), _defineProperty(_classNames, treeClassNames.treeFx, transition), _defineProperty(_classNames, treeClassNames.treeBlockNode, expandOnClickNode), _classNames))
  }, renderItems()));
});
Tree.displayName = "Tree";
Tree.defaultProps = {
  data: [],
  empty: "",
  expandLevel: 0,
  icon: true,
  line: false,
  transition: true,
  lazy: true,
  valueMode: "onlyLeaf"
};

export { Tree as default };
//# sourceMappingURL=Tree.js.map
