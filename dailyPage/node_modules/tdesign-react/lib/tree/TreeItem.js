/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import React, { forwardRef, useRef } from 'react';
import classNames from 'classnames';
import { CaretRightSmallIcon } from 'tdesign-icons-react';
import { Loading } from '../loading/index.js';
import useRipple from '../_util/useRipple.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import { Checkbox } from '../checkbox/index.js';
import { useTreeConfig } from './useTreeConfig.js';
import useDraggable from './useDraggable.js';
import composeRefs from '../_util/composeRefs.js';
import '../loading/Loading.js';
import '../_chunks/dep-2baf8638.js';
import '../_chunks/dep-24599104.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3228585.js';
import '../_chunks/dep-cf61d761.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-c393cab2.js';
import '../_chunks/dep-090fa3b2.js';
import '../_util/easing.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-98b209dd.js';
import '../_chunks/dep-1304d812.js';
import '../_chunks/dep-339b0951.js';
import '../_chunks/dep-ba4fa05d.js';
import '../_chunks/dep-00ad7a91.js';
import '../_chunks/dep-056b9d81.js';
import '../_chunks/dep-86599c44.js';
import '../_chunks/dep-de91e914.js';
import '../_chunks/dep-f60756e1.js';
import '../_chunks/dep-a98a054e.js';
import '../_chunks/dep-7a725039.js';
import '../_chunks/dep-e48ce47b.js';
import '../_chunks/dep-d9495851.js';
import '../_chunks/dep-75ee7646.js';
import '../_chunks/dep-68ef3987.js';
import '../_chunks/dep-7237da98.js';
import '../_chunks/dep-d905b9e9.js';
import '../_chunks/dep-87e9108c.js';
import '../_chunks/dep-873eecd0.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-88be14a4.js';
import '../_chunks/dep-fe234c83.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_chunks/dep-27763e39.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-d24ebdc1.js';
import '../_chunks/dep-2998e451.js';
import '../_chunks/dep-893e0247.js';
import '../_chunks/dep-8f4dca99.js';
import '../_chunks/dep-65354ae3.js';
import '../_chunks/dep-4192679d.js';
import '../_chunks/dep-504b652f.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../_chunks/dep-04fa7e7c.js';
import '../checkbox/defaultProps.js';
import '../locale/LocalReceiver.js';
import '../_chunks/dep-fd92983c.js';
import '../_chunks/dep-1997a475.js';
import '../_chunks/dep-d502af5f.js';
import './TreeDraggableContext.js';
import '../_util/createHookContext.js';
import '../_util/usePersistFn.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TreeItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames4;

  var node = props.node,
      icon = props.icon,
      label = props.label,
      line = props.line,
      expandOnClickNode = props.expandOnClickNode,
      activable = props.activable,
      checkProps = props.checkProps,
      disableCheck = props.disableCheck,
      operations = props.operations,
      onClick = props.onClick,
      _onChange = props.onChange;

  var _useGlobalIcon = useGlobalIcon({
    CaretRightSmallIcon: CaretRightSmallIcon
  }),
      CaretRightSmallIcon$1 = _useGlobalIcon.CaretRightSmallIcon;

  var level = node.level;

  var _useTreeConfig = useTreeConfig(),
      treeClassNames = _useTreeConfig.treeClassNames,
      locale = _useTreeConfig.locale;

  var handleClick = function handleClick(evt) {
    onClick === null || onClick === void 0 ? void 0 : onClick(node, {
      event: evt,
      expand: expandOnClickNode,
      active: activable
    });
  };

  var handleItemClick = function handleItemClick(evt) {
    if (node.loading) {
      return;
    }

    onClick === null || onClick === void 0 ? void 0 : onClick(node, {
      event: evt,
      expand: true,
      active: false
    });
  };

  var handleIconClick = function handleIconClick(evt) {
    evt.stopPropagation();
    handleItemClick(evt);
  };

  var stopPropagation = function stopPropagation(e) {
    e.stopPropagation();
  };

  var renderIcon = function renderIcon() {
    var isDefaultIcon = false;

    var renderIconNode = function renderIconNode() {
      if (icon === false) {
        return null;
      }

      if (icon instanceof Function) {
        return icon(node.getModel());
      }

      if ( /*#__PURE__*/React.isValidElement(icon)) {
        return icon;
      }

      if (icon && icon !== true) {
        throw new Error("invalid type of icon");
      }

      if (!node.isLeaf()) {
        isDefaultIcon = true;

        if (node.loading && node.expanded) {
          return /* @__PURE__ */React.createElement(Loading, {
            loading: true
          });
        }

        return /* @__PURE__ */React.createElement(CaretRightSmallIcon$1, {
          className: treeClassNames.treeIconRight
        });
      }

      return null;
    };

    var iconNode = renderIconNode();
    return /* @__PURE__ */React.createElement("span", {
      className: classNames(treeClassNames.treeIcon, treeClassNames.folderIcon, _defineProperty({}, treeClassNames.treeIconDefault, isDefaultIcon)),
      onClick: handleIconClick
    }, iconNode);
  };

  var renderLine = function renderLine() {
    var iconVisible = icon !== false;

    if (line === false) {
      return null;
    }

    if (line instanceof Function) {
      return line(node.getModel());
    }

    if ( /*#__PURE__*/React.isValidElement(line)) {
      return line;
    }

    if (node.parent && node.tree) {
      var _classNames2;

      var shadowStyles = [];
      var parents = node.getParents();
      parents.pop();
      parents.forEach(function (pnode, index) {
        if (!pnode.vmIsLast) {
          shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
        }
      });
      var styles = {
        "--level": level,
        boxShadow: shadowStyles.join(",")
      };
      return /* @__PURE__ */React.createElement("span", {
        className: classNames(treeClassNames.line, (_classNames2 = {}, _defineProperty(_classNames2, treeClassNames.lineIsLeaf, node.vmIsLeaf || !iconVisible), _defineProperty(_classNames2, treeClassNames.lineIsFirst, node.vmIsFirst && iconVisible), _classNames2)),
        style: styles,
        onClick: stopPropagation
      });
    }

    return null;
  };

  var labelRef = useRef();
  useRipple(labelRef);

  var renderLabel = function renderLabel() {
    var emptyView = locale("empty");
    var labelText = "";

    if (label instanceof Function) {
      labelText = label(node.getModel()) || emptyView;
    } else {
      labelText = node.label || emptyView;
    }

    var labelClasses = classNames(treeClassNames.treeLabel, treeClassNames.treeLabelStrictly, _defineProperty({}, treeClassNames.actived, node.isActivable() ? node.actived : false));

    if (node.isCheckable()) {
      var checkboxDisabled;

      if (typeof disableCheck === "function") {
        checkboxDisabled = disableCheck(node.getModel());
      } else {
        checkboxDisabled = !!disableCheck;
      }

      if (node.isDisabled()) {
        checkboxDisabled = true;
      }

      return /* @__PURE__ */React.createElement(Checkbox, _objectSpread({
        ref: labelRef,
        checked: node.checked,
        indeterminate: node.indeterminate,
        disabled: checkboxDisabled,
        name: String(node.value),
        onChange: function onChange() {
          return _onChange(node);
        },
        className: labelClasses
      }, checkProps), /* @__PURE__ */React.createElement("span", {
        "date-target": "label"
      }, labelText));
    }

    return /* @__PURE__ */React.createElement("span", {
      ref: labelRef,
      "date-target": "label",
      className: labelClasses
    }, /* @__PURE__ */React.createElement("span", {
      style: {
        position: "relative"
      }
    }, labelText));
  };

  var renderOperations = function renderOperations() {
    var operationsView = null;

    if (operations) {
      if ( /*#__PURE__*/React.isValidElement(operations)) {
        operationsView = operations;
      } else if (operations instanceof Function) {
        var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
        operationsView = operations(treeNodeModel);
      } else {
        throw new Error("invalid type of operations");
      }
    }

    if (operationsView) {
      return /* @__PURE__ */React.createElement("span", {
        className: treeClassNames.treeOperations,
        "date-target": "operations"
      }, operationsView);
    }

    return null;
  };

  var nodeRef = useRef(null);

  var _useDraggable = useDraggable({
    node: node,
    nodeRef: nodeRef
  }),
      setDragStatus = _useDraggable.setDragStatus,
      isDragging = _useDraggable.isDragging,
      dropPosition = _useDraggable.dropPosition,
      isDragOver = _useDraggable.isDragOver;

  var handleDragStart = function handleDragStart(evt) {
    var node2 = props.node;
    if (!node2.isDraggable()) return;
    evt.stopPropagation();
    setDragStatus("dragStart", evt);

    try {
      var _evt$dataTransfer;

      (_evt$dataTransfer = evt.dataTransfer) === null || _evt$dataTransfer === void 0 ? void 0 : _evt$dataTransfer.setData("text/plain", "");
    } catch (e) {}
  };

  var handleDragEnd = function handleDragEnd(evt) {
    var node2 = props.node;
    if (!node2.isDraggable()) return;
    evt.stopPropagation();
    setDragStatus("dragEnd", evt);
  };

  var handleDragOver = function handleDragOver(evt) {
    var node2 = props.node;
    if (!node2.isDraggable()) return;
    evt.stopPropagation();
    evt.preventDefault();
    setDragStatus("dragOver", evt);
  };

  var handleDragLeave = function handleDragLeave(evt) {
    var node2 = props.node;
    if (!node2.isDraggable()) return;
    evt.stopPropagation();
    setDragStatus("dragLeave", evt);
  };

  var handleDrop = function handleDrop(evt) {
    var node2 = props.node;
    if (!node2.isDraggable()) return;
    evt.stopPropagation();
    evt.preventDefault();
    setDragStatus("drop", evt);
  };

  return /* @__PURE__ */React.createElement("div", {
    ref: composeRefs(ref, nodeRef),
    "data-value": node.value,
    "data-level": level,
    className: classNames(treeClassNames.treeNode, (_classNames4 = {}, _defineProperty(_classNames4, treeClassNames.treeNodeOpen, node.expanded), _defineProperty(_classNames4, treeClassNames.actived, node.isActivable() ? node.actived : false), _defineProperty(_classNames4, treeClassNames.disabled, node.isDisabled()), _defineProperty(_classNames4, treeClassNames.treeNodeDraggable, node.isDraggable()), _defineProperty(_classNames4, treeClassNames.treeNodeDragging, isDragging), _defineProperty(_classNames4, treeClassNames.treeNodeDragTipTop, isDragOver && dropPosition < 0), _defineProperty(_classNames4, treeClassNames.treeNodeDragTipBottom, isDragOver && dropPosition > 0), _defineProperty(_classNames4, treeClassNames.treeNodeDragTipHighlight, !isDragging && isDragOver && dropPosition === 0), _classNames4)),
    style: {
      "--level": level,
      boxShadow: ""
    },
    onClick: handleClick,
    draggable: node.isDraggable(),
    onDragStart: handleDragStart,
    onDragEnd: handleDragEnd,
    onDragOver: handleDragOver,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop
  }, renderLine(), renderIcon(), renderLabel(), renderOperations());
});
TreeItem.displayName = "TreeItem";

export { TreeItem as default };
//# sourceMappingURL=TreeItem.js.map
