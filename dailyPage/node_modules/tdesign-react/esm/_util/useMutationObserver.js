/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { useRef, useEffect } from 'react';
import { d as debounce_1 } from '../_chunks/dep-622322f2.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-abf310d4.js';
import '../_chunks/dep-1a0fcc8a.js';
import '../_chunks/dep-c6a2f197.js';

var DEFAULT_OPTIONS = {
  debounceTime: 0,
  config: {
    attributes: true,
    childList: true,
    characterData: true,
    subtree: true
  }
};
function useMutationObservable(targetEl, cb) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;
  var observeRef = useRef(null);
  useEffect(function () {
    if (!cb || typeof cb !== "function") return;
    var debounceTime = options.debounceTime;
    observeRef.current = new MutationObserver(debounceTime > 0 ? debounce_1(cb, debounceTime) : cb);
  }, [cb, options]);
  useEffect(function () {
    if (!targetEl || !(targetEl !== null && targetEl !== void 0 && targetEl.nodeType)) return;
    var config = options.config;

    try {
      observeRef.current.observe(targetEl, config);
    } catch (e) {
      console.error(e);
    }

    return function () {
      observeRef.current.disconnect();
    };
  }, [targetEl, options]);
}

export { useMutationObservable as default };
//# sourceMappingURL=useMutationObserver.js.map
