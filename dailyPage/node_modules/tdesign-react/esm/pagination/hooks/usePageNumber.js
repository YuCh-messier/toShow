/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import React, { useState, useMemo } from 'react';
import classNames from 'classnames';
import { EllipsisIcon, ChevronLeftDoubleIcon, ChevronRightDoubleIcon } from 'tdesign-icons-react';
import useConfig from '../../hooks/useConfig.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import '../../_chunks/dep-24599104.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-588efa4a.js';
import '../../_chunks/dep-a407cb09.js';
import '../../_chunks/dep-dd4cd0af.js';
import '../../_chunks/dep-f162740d.js';
import '../../_chunks/dep-22eee49a.js';
import '../../_chunks/dep-f2b0265c.js';
import '../../_chunks/dep-91563b2d.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-e10ccd97.js';
import '../../_chunks/dep-6f568a94.js';
import '../../_chunks/dep-646bb331.js';
import '../../_chunks/dep-1f71931a.js';
import '../../_chunks/dep-3b5c7604.js';
import '../../_chunks/dep-51566efd.js';
import '../../_chunks/dep-c6a2f197.js';
import '../../_chunks/dep-a6b91546.js';
import '../../_chunks/dep-5fef4495.js';
import '../../_chunks/dep-a97b932f.js';
import '../../_chunks/dep-9e2d72a2.js';
import '../../_chunks/dep-342e02ed.js';
import '../../_chunks/dep-a89633b7.js';
import '../../_chunks/dep-a91fe24d.js';
import '../../_chunks/dep-27e7ca24.js';
import '../../_chunks/dep-f40ed698.js';
import '../../_chunks/dep-ab50f53f.js';
import '../../_chunks/dep-9703c0d5.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';

function usePageNumber(props) {
  var _classNames, _classNames5;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useGlobalIcon = useGlobalIcon({
    EllipsisIcon: EllipsisIcon,
    ChevronLeftDoubleIcon: ChevronLeftDoubleIcon,
    ChevronRightDoubleIcon: ChevronRightDoubleIcon
  }),
      EllipsisIcon$1 = _useGlobalIcon.EllipsisIcon,
      ChevronLeftDoubleIcon$1 = _useGlobalIcon.ChevronLeftDoubleIcon,
      ChevronRightDoubleIcon$1 = _useGlobalIcon.ChevronRightDoubleIcon;

  var name = "".concat(classPrefix, "-pagination");

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hoverPreMore = _useState2[0],
      toggleHoverPreMore = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hoverNextMore = _useState4[0],
      toggleHoverNextMore = _useState4[1];

  var showPageNumber = props.showPageNumber,
      maxPageBtn = props.maxPageBtn,
      disabled = props.disabled,
      current = props.current,
      pageCount = props.pageCount,
      foldedMaxPageBtn = props.foldedMaxPageBtn,
      changeCurrent = props.changeCurrent,
      pageEllipsisMode = props.pageEllipsisMode;
  var isMidEllipsis = pageEllipsisMode === "mid";
  var pivot = Math.ceil((foldedMaxPageBtn - 1) / 2);
  var pageList = useMemo(function () {
    var isPrevMoreShow = 2 + pivot < current;
    var isNextMoreShow = pageCount - 1 - pivot > current;
    var array = [];
    var start;
    var end;

    if (pageCount > maxPageBtn) {
      if (isPrevMoreShow && isNextMoreShow) {
        start = current - pivot;
        end = current + pivot;
      } else {
        var foldedStart = isMidEllipsis ? 2 : 1;
        var foldedEnd = isMidEllipsis ? pageCount - 1 : pageCount;
        start = isPrevMoreShow ? pageCount - foldedMaxPageBtn + 1 : foldedStart;
        end = isPrevMoreShow ? foldedEnd : foldedMaxPageBtn;
      }
    } else {
      start = 1;
      end = pageCount;
    }

    for (var i = start; i <= end; i++) {
      array.push(i);
    }

    return array;
  }, [current, pageCount, foldedMaxPageBtn, isMidEllipsis, maxPageBtn, pivot]);
  var isFolded = pageCount > maxPageBtn;
  var pageNumberContrl = showPageNumber && /* @__PURE__ */React.createElement("ul", {
    className: "".concat(name, "__pager")
  }, isFolded && isMidEllipsis && /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("li", {
    key: 1,
    className: classNames("".concat(name, "__number"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-current"), current === 1), _classNames)),
    onClick: function onClick() {
      return changeCurrent(1);
    }
  }, "1"), 2 + pivot < current && /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled)),
    onMouseEnter: function onMouseEnter() {
      return toggleHoverPreMore(true);
    },
    onMouseLeave: function onMouseLeave() {
      return toggleHoverPreMore(false);
    },
    onClick: function onClick() {
      return changeCurrent(current - foldedMaxPageBtn);
    }
  }, !hoverPreMore ? /* @__PURE__ */React.createElement(EllipsisIcon$1, null) : /* @__PURE__ */React.createElement(ChevronLeftDoubleIcon$1, null))), pageList.map(function (item) {
    var _classNames3;

    return /* @__PURE__ */React.createElement("li", {
      key: item,
      className: classNames("".concat(name, "__number"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames3, "".concat(classPrefix, "-is-current"), current === item), _classNames3)),
      onClick: function onClick() {
        return changeCurrent(item);
      }
    }, item);
  }), isFolded && isMidEllipsis && /* @__PURE__ */React.createElement(React.Fragment, null, pageCount - 1 - pivot > current && /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled)),
    onMouseEnter: function onMouseEnter() {
      return toggleHoverNextMore(true);
    },
    onMouseLeave: function onMouseLeave() {
      return toggleHoverNextMore(false);
    },
    onClick: function onClick() {
      return changeCurrent(current + foldedMaxPageBtn);
    }
  }, !hoverNextMore ? /* @__PURE__ */React.createElement(EllipsisIcon$1, null) : /* @__PURE__ */React.createElement(ChevronRightDoubleIcon$1, null)), /* @__PURE__ */React.createElement("li", {
    key: pageCount,
    className: classNames("".concat(name, "__number"), (_classNames5 = {}, _defineProperty(_classNames5, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames5, "".concat(classPrefix, "-is-current"), current === pageCount), _classNames5)),
    onClick: function onClick() {
      return changeCurrent(pageCount);
    }
  }, pageCount)));
  return {
    pageNumberContrl: pageNumberContrl
  };
}

export { usePageNumber as default };
//# sourceMappingURL=usePageNumber.js.map
