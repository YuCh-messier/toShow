/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import React from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-588efa4a.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-ab50f53f.js';
import '../_chunks/dep-9703c0d5.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';

var CARD_SCALE = 210 / 332;
var itemWidth = 0.415;

var disposeIndex = function disposeIndex(index, currentIndex, childrenLength) {
  if (currentIndex === 0 && index === childrenLength - 1) {
    return -1;
  }

  if (currentIndex === childrenLength - 1 && index === 0) {
    return childrenLength;
  }

  if (index < currentIndex - 1 && currentIndex - index >= childrenLength / 2) {
    return childrenLength + 1;
  }

  if (index > currentIndex + 1 && index - currentIndex >= childrenLength / 2) {
    return -2;
  }

  return index;
};

var calculateTranslate = function calculateTranslate(index, currentIndex, parentWidth, inStage) {
  if (inStage) {
    return parentWidth * ((index - currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
  }

  if (index < currentIndex) {
    return -itemWidth * (1 + CARD_SCALE) * parentWidth / 2;
  }

  return (2 + itemWidth * (CARD_SCALE - 1)) * parentWidth / 2;
};

var getZindex = function getZindex(isActivity, inStage) {
  if (isActivity) {
    return 2;
  }

  if (inStage) {
    return 1;
  }

  return 0;
};

var SwiperItem = function SwiperItem(props) {
  var _classnames;

  var children = props.children,
      currentIndex = props.currentIndex,
      index = props.index,
      animation = props.animation,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 300 : _props$duration,
      needAnimation = props.needAnimation,
      _props$type = props.type,
      type = _props$type === void 0 ? "default" : _props$type,
      childrenLength = props.childrenLength,
      getWrapAttribute = props.getWrapAttribute;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var getSwiperItemStyle = function getSwiperItemStyle() {
    if (animation === "fade") {
      return {
        opacity: currentIndex === index ? 1 : 0,
        transition: needAnimation ? "opacity ".concat(duration / 1e3, "s") : ""
      };
    }

    if (type === "card") {
      var wrapWidth = getWrapAttribute("offsetWidth");
      var translateIndex = index !== currentIndex && childrenLength > 2 ? disposeIndex(index, currentIndex, childrenLength) : index;
      var inStage = Math.round(Math.abs(translateIndex - currentIndex)) <= 1;
      var translate = calculateTranslate(translateIndex, currentIndex, wrapWidth, inStage).toFixed(2);
      var isActivity = translateIndex === currentIndex;
      var zIndex = getZindex(isActivity, inStage);
      return {
        msTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        WebkitTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        transform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
        transition: "transform ".concat(duration / 1e3, "s ease"),
        zIndex: zIndex
      };
    }

    return {};
  };

  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-swiper__container__item"), (_classnames = {}, _defineProperty(_classnames, "".concat(classPrefix, "-swiper__card"), type === "card"), _defineProperty(_classnames, "".concat(classPrefix, "-is-active"), type === "card" && index === currentIndex), _defineProperty(_classnames, "".concat(classPrefix, "-swiper__fade"), animation === "fade"), _classnames)),
    style: getSwiperItemStyle()
  }, children);
};

SwiperItem.displayName = "SwiperItem";

export { SwiperItem as default };
//# sourceMappingURL=SwiperItem.js.map
