/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _toConsumableArray } from '../_chunks/dep-88be14a4.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React, { forwardRef, useState, useEffect } from 'react';
import classNames from 'classnames';
import dayjs from 'dayjs';
import useConfig from '../hooks/useConfig.js';
import { RangeInputPopup } from '../range-input/index.js';
import RangePanel from './panel/RangePanel.js';
import useRange from './hooks/useRange.js';
import { initYearMonthTime } from './hooks/useRangeValue.js';
import { getDefaultFormat, formatDate, formatTime, parseToDayjs, isValidDate } from '../_common/js/date-picker/format.js';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils.js';
import { dateRangePickerDefaultProps } from './defaultProps.js';
import '../_common/js/log/index.js';
import log from '../_common/js/log/log.js';
import '../_chunks/dep-24599104.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-588efa4a.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-ab50f53f.js';
import '../_chunks/dep-9703c0d5.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../range-input/RangeInput.js';
import '../_chunks/dep-fe234c83.js';
import 'tdesign-icons-react';
import '../input/index.js';
import '../input/Input.js';
import '../_util/useLayoutEffect.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-2968ca73.js';
import '../_util/easing.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../hooks/useGlobalIcon.js';
import '../_common/js/utils/helper.js';
import '../input/InputGroup.js';
import '../hooks/useControlled.js';
import '../_chunks/dep-6f296cb1.js';
import '../_chunks/dep-8b68327e.js';
import '../_chunks/dep-094f627b.js';
import '../_chunks/dep-8e8d0d95.js';
import '../_chunks/dep-1a0fcc8a.js';
import '../_util/noop.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../input/defaultProps.js';
import '../input/style/index.js';
import '../input/type.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/useAnimation.js';
import '../common/Portal.js';
import 'react-dom';
import '../popup/hooks/useTrigger.js';
import 'react-is';
import '../popup/utils/ref.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-622322f2.js';
import '../_chunks/dep-abf310d4.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../range-input/style/index.js';
import '../range-input/type.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-eaafd9b2.js';
import '../_chunks/dep-41762eda.js';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_chunks/dep-4c44a6fb.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../common/FakeArrow.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-17055df6.js';
import '../_chunks/dep-81e269a3.js';
import '../_chunks/dep-80d1a65c.js';
import '../_chunks/dep-9a198ec7.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag/style/index.js';
import '../tag/type.js';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../tag-input/style/index.js';
import '../tag-input/type.js';
import '../select-input/defaultProps.js';
import '../select-input/style/index.js';
import '../select-input/type.js';
import '../select/base/PopupContent.js';
import '../select/style/index.js';
import '../select/type.js';
import '../jumper/index.js';
import '../jumper/Jumper.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../button/style/index.js';
import '../button/type.js';
import '../jumper/defaultProps.js';
import '../jumper/style/index.js';
import '../jumper/type.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/index.js';
import '../time-picker/TimePicker.js';
import '../_chunks/dep-e23ef400.js';
import '../time-picker/TimeRangePicker.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../time-picker/panel/SinglePanel.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../_common/js/time-picker/const.js';
import '../_common/js/time-picker/utils.js';
import '../hooks/useDebounce.js';
import '../_util/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../time-picker/defaultProps.js';
import '../time-picker/style/index.js';
import '../time-picker/type.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './hooks/useTableData.js';
import './hooks/useDisableDate.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DateRangePicker = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      onPick = props.onPick;

  var _useRange = useRange(props),
      inputValue = _useRange.inputValue,
      popupVisible = _useRange.popupVisible,
      rangeInputProps = _useRange.rangeInputProps,
      popupProps = _useRange.popupProps,
      value = _useRange.value,
      year = _useRange.year,
      month = _useRange.month,
      time = _useRange.time,
      activeIndex = _useRange.activeIndex,
      isHoverCell = _useRange.isHoverCell,
      setActiveIndex = _useRange.setActiveIndex,
      onChange = _useRange.onChange,
      setIsHoverCell = _useRange.setIsHoverCell,
      setInputValue = _useRange.setInputValue,
      setPopupVisible = _useRange.setPopupVisible,
      setTime = _useRange.setTime,
      setYear = _useRange.setYear,
      setMonth = _useRange.setMonth,
      isFirstValueSelected = _useRange.isFirstValueSelected,
      setIsFirstValueSelected = _useRange.setIsFirstValueSelected,
      cacheValue = _useRange.cacheValue,
      setCacheValue = _useRange.setCacheValue;

  var _getDefaultFormat = getDefaultFormat({
    mode: mode,
    enableTimePicker: enableTimePicker,
    format: props.format,
    valueType: props.valueType
  }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  useEffect(function () {
    if (popupVisible) {
      setIsSelected(false);
      setCacheValue(formatDate(value || [], {
        format: format
      }));
      setTime(formatTime(value || [dayjs().format(timeFormat), dayjs().format(timeFormat)], timeFormat));

      if (!value.length) {
        setYear(initYearMonthTime({
          value: value,
          mode: mode,
          format: format
        }).year);
        setMonth(initYearMonthTime({
          value: value,
          mode: mode,
          format: format,
          enableTimePicker: enableTimePicker
        }).month);
      } else if (value.length === 2 && !enableTimePicker) {
        var nextMonth = value.map(function (v) {
          return parseToDayjs(v, format).month();
        });

        if (year[0] === year[1] && nextMonth[0] === nextMonth[1]) {
          nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
        }

        setYear(value.map(function (v) {
          return parseToDayjs(v, format).year();
        }));
        setMonth(nextMonth);
      } else {
        setYear(value.map(function (v) {
          return parseToDayjs(v, format).year();
        }));
        setMonth(value.map(function (v) {
          return parseToDayjs(v, format).month();
        }));
      }
    } else {
      setIsHoverCell(false);
      setIsFirstValueSelected(false);
      setInputValue(formatDate(value || [], {
        format: format
      }));
    }
  }, [popupVisible]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);

    var nextValue = _toConsumableArray(inputValue);

    nextValue[activeIndex] = formatDate(date, {
      format: format
    });
    setInputValue(nextValue);
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setInputValue(cacheValue);
  }

  function onCellClick(date, _ref) {
    var e = _ref.e,
        partial = _ref.partial;
    onPick === null || onPick === void 0 ? void 0 : onPick(date, {
      e: e,
      partial: activeIndex ? "end" : "start"
    });
    setIsHoverCell(false);
    setIsSelected(true);

    var nextValue = _toConsumableArray(inputValue);

    nextValue[activeIndex] = formatDate(date, {
      format: format
    });
    setCacheValue(nextValue);
    setInputValue(nextValue);

    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs(date).month() !== month[partialIndex];

      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
      }
    }

    if (enableTimePicker) return;
    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !isValidDate(v, format);
    });

    if (notValidIndex === -1 && nextValue.length === 2) {
      if (!isFirstValueSelected && parseToDayjs(nextValue[0], format).isAfter(parseToDayjs(nextValue[1], format))) {
        nextValue[activeIndex ? 0 : 1] = "";
        setCacheValue(nextValue);
        setInputValue(nextValue);
      } else {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return parseToDayjs(v, format);
          }),
          trigger: "pick"
        });
      }
    }

    if (!isFirstValueSelected) {
      var nextIndex = notValidIndex;
      if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
      setActiveIndex(nextIndex);
      setIsFirstValueSelected(true);
    } else {
      setPopupVisible(false);
    }
  }

  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger,
        partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;

    if (trigger === "prev") {
      next = subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = addMonth(current, monthCount);
    }

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = next.getFullYear();

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = next.getMonth();

    if (partialIndex === 0) {
      nextYear[1] = Math.max(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      }
    }

    if (partialIndex === 1) {
      nextYear[0] = Math.min(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }
    }

    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextInputValue = _toConsumableArray(inputValue);

    var changedInputValue = inputValue[activeIndex];
    var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;

    var nextTime = _toConsumableArray(time);

    nextTime[activeIndex] = val;
    setTime(nextTime);
    setIsSelected(true);
    setInputValue(formatDate(nextInputValue, {
      format: format
    }));
    setCacheValue(formatDate(nextInputValue, {
      format: format
    }));
  }

  function onConfirmClick() {
    var nextValue = _toConsumableArray(inputValue);

    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !isValidDate(v, format);
    });

    if (notValidIndex === -1 && nextValue.length === 2) {
      if (!isFirstValueSelected && parseToDayjs(nextValue[0], format).isAfter(parseToDayjs(nextValue[1], format))) {
        nextValue[activeIndex ? 0 : 1] = "";
        setCacheValue(nextValue);
        setInputValue(nextValue);
      } else {
        onChange(formatDate(nextValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return parseToDayjs(v, format);
          }),
          trigger: "confirm"
        });
      }
    }

    if (!isFirstValueSelected) {
      var nextIndex = notValidIndex;
      if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
      setActiveIndex(nextIndex);
      setIsFirstValueSelected(true);
    } else {
      setPopupVisible(false);
    }
  }

  function onPresetClick(preset) {
    var presetValue = preset;

    if (typeof preset === "function") {
      presetValue = preset();
    }

    if (!Array.isArray(presetValue)) {
      log.error("DateRangePicker", "preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
    } else {
      onChange(formatDate(presetValue, {
        format: format,
        targetFormat: valueType
      }), {
        dayjsValue: presetValue.map(function (p) {
          return parseToDayjs(p, format);
        }),
        trigger: "preset"
      });
      setPopupVisible(false);
    }
  }

  function onYearChange(nextVal, _ref3) {
    var partial = _ref3.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = nextVal;
    if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
    if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
    setYear(nextYear);
  }

  function onMonthChange(nextVal, _ref4) {
    var partial = _ref4.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = nextVal;

    if (year[0] === year[1]) {
      if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
    }

    setMonth(nextMonth);
  }

  var panelProps = {
    hoverValue: isHoverCell ? inputValue : [],
    value: isSelected ? cacheValue : value,
    isFirstValueSelected: isFirstValueSelected,
    panelPreselection: panelPreselection,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    activeIndex: activeIndex,
    popupVisible: popupVisible,
    onCellClick: onCellClick,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange
  };
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-date-range-picker"), className),
    style: style,
    ref: ref
  }, /* @__PURE__ */React.createElement(RangeInputPopup, {
    disabled: disabled,
    status: props.status,
    tips: props.tips,
    inputValue: inputValue,
    popupProps: popupProps,
    rangeInputProps: rangeInputProps,
    popupVisible: popupVisible,
    panel: /* @__PURE__ */React.createElement(RangePanel, _objectSpread({}, panelProps))
  }));
});
DateRangePicker.displayName = "DateRangePicker";
DateRangePicker.defaultProps = dateRangePickerDefaultProps;

export { DateRangePicker as default };
//# sourceMappingURL=DateRangePicker.js.map
