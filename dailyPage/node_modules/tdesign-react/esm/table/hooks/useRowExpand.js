/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import React from 'react';
import { ChevronRightCircleIcon } from 'tdesign-icons-react';
import { g as get_1 } from '../../_chunks/dep-eaafd9b2.js';
import { i as isFunction_1 } from '../../_chunks/dep-f2b0265c.js';
import classNames from 'classnames';
import useClassName from './useClassName.js';
import useControlled from '../../hooks/useControlled.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-a407cb09.js';
import '../../_chunks/dep-41762eda.js';
import '../../_chunks/dep-342e02ed.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-1a0fcc8a.js';
import '../../_chunks/dep-91563b2d.js';
import '../../_chunks/dep-c6a2f197.js';
import '../../_chunks/dep-f162740d.js';
import '../../_chunks/dep-22eee49a.js';
import '../../_chunks/dep-646bb331.js';
import '../../_chunks/dep-e10ccd97.js';
import '../../_chunks/dep-6f568a94.js';
import '../../_chunks/dep-1f71931a.js';
import '../../_chunks/dep-8e8d0d95.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-588efa4a.js';
import '../../_chunks/dep-dd4cd0af.js';
import '../../_chunks/dep-3b5c7604.js';
import '../../_chunks/dep-51566efd.js';
import '../../_chunks/dep-a6b91546.js';
import '../../_chunks/dep-5fef4495.js';
import '../../_chunks/dep-a97b932f.js';
import '../../_chunks/dep-9e2d72a2.js';
import '../../_chunks/dep-a89633b7.js';
import '../../_chunks/dep-a91fe24d.js';
import '../../_chunks/dep-27e7ca24.js';
import '../../_chunks/dep-f40ed698.js';
import '../../_chunks/dep-ab50f53f.js';
import '../../_chunks/dep-9703c0d5.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_chunks/dep-6f296cb1.js';
import '../../_chunks/dep-8b68327e.js';
import '../../_chunks/dep-094f627b.js';
import '../../_util/noop.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';

function useRowExpand(props) {
  var _props$columns, _props$columns$;

  var expandIcon = props.expandIcon;

  var _useGlobalIcon = useGlobalIcon({
    ChevronRightCircleIcon: ChevronRightCircleIcon
  }),
      ChevronRightCircleIcon$1 = _useGlobalIcon.ChevronRightCircleIcon;

  var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
      locale = _useLocaleReceiver2[0];

  var _useClassName = useClassName(),
      tableExpandClasses = _useClassName.tableExpandClasses,
      positiveRotate90 = _useClassName.positiveRotate90,
      tableFullRowClasses = _useClassName.tableFullRowClasses;

  var _useControlled = useControlled(props, "expandedRowKeys", props.onExpandChange, {
    defaultExpandedRowKeys: props.defaultExpandedRowKeys || []
  }),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tExpandedRowKeys = _useControlled2[0],
      setTExpandedRowKeys = _useControlled2[1];

  var showExpandedRow = Boolean(props.expandedRow);
  var showExpandIconColumn = props.expandIcon !== false && showExpandedRow;
  var isFirstColumnFixed = ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";

  var onToggleExpand = function onToggleExpand(e, row) {
    props.expandOnRowClick && e.stopPropagation();
    var currentId = get_1(row, props.rowKey || "id");
    var index = tExpandedRowKeys.indexOf(currentId);

    var newKeys = _toConsumableArray(tExpandedRowKeys);

    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
    setTExpandedRowKeys(newKeys, {
      expandedRowData: props.data.filter(function (t) {
        return newKeys.includes(get_1(t, props.rowKey || "id"));
      }),
      currentRowData: row
    });
  };

  var renderExpandIcon = function renderExpandIcon(p, expandIcon2) {
    var row = p.row,
        rowIndex = p.rowIndex;
    var currentId = get_1(row, props.rowKey || "id");
    var expanded = tExpandedRowKeys.includes(currentId);
    var defaultIcon = locale.expandIcon || /* @__PURE__ */React.createElement(ChevronRightCircleIcon$1, null);
    var icon = defaultIcon;

    if (expandIcon2 === false || expandIcon2 === null) {
      icon = null;
    } else if (isFunction_1(expandIcon2)) {
      icon = expandIcon2({
        row: row,
        index: rowIndex
      });
    }

    var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty({}, positiveRotate90, expanded)];
    return /* @__PURE__ */React.createElement("span", {
      className: classNames(classes),
      onClick: function onClick(e) {
        return onToggleExpand(e, row);
      }
    }, icon);
  };

  var getExpandColumn = function getExpandColumn() {
    var expandCol = {
      colKey: "__EXPAND_ROW_ICON_COLUMN__",
      width: 64,
      className: tableExpandClasses.iconCell,
      fixed: isFirstColumnFixed ? "left" : void 0,
      cell: function cell(p) {
        return renderExpandIcon(p, expandIcon);
      }
    };
    return expandCol;
  };

  var renderExpandedRow = function renderExpandedRow(p) {
    var rowId = get_1(p.row, props.rowKey || "id");
    if (!tExpandedRowKeys || !tExpandedRowKeys.includes(rowId)) return null;
    var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
      return item.fixed === "left";
    });
    return /* @__PURE__ */React.createElement("tr", {
      key: "expand_".concat(rowId),
      className: classNames([tableExpandClasses.row, _defineProperty({}, tableFullRowClasses.base, isFixedLeft)])
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: p.columns.length
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames([tableExpandClasses.rowInner, _defineProperty({}, tableFullRowClasses.innerFullRow, isFixedLeft)]),
      style: isFixedLeft ? {
        width: "".concat(p.tableWidth, "px")
      } : {}
    }, /* @__PURE__ */React.createElement("div", {
      className: tableFullRowClasses.innerFullElement
    }, props.expandedRow(p)))));
  };

  var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
    onToggleExpand(p.e, p.row);
  };

  return {
    showExpandedRow: showExpandedRow,
    showExpandIconColumn: showExpandIconColumn,
    getExpandColumn: getExpandColumn,
    renderExpandedRow: renderExpandedRow,
    onInnerExpandRowClick: onInnerExpandRowClick
  };
}

export { useRowExpand as default };
//# sourceMappingURL=useRowExpand.js.map
