/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import { i as isNumber_1 } from '../../_chunks/dep-4c44a6fb.js';
import { i as isFunction_1 } from '../../_chunks/dep-f2b0265c.js';
import { c as cloneDeep_1 } from '../../_chunks/dep-d8c173c9.js';
import { getFullPathLabel, getTreeValue } from './helper.js';
import '../../_chunks/dep-24599104.js';
import '../../_chunks/dep-a407cb09.js';
import '../../_chunks/dep-91563b2d.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-c6a2f197.js';
import '../../_chunks/dep-e10ccd97.js';
import '../../_chunks/dep-6f568a94.js';
import '../../_chunks/dep-08858747.js';
import '../../_chunks/dep-dd4cd0af.js';
import '../../_chunks/dep-f162740d.js';
import '../../_chunks/dep-22eee49a.js';
import '../../_chunks/dep-646bb331.js';
import '../../_chunks/dep-1f71931a.js';
import '../../_chunks/dep-3b5c7604.js';
import '../../_chunks/dep-51566efd.js';
import '../../_chunks/dep-a6b91546.js';
import '../../_chunks/dep-5fef4495.js';
import '../../_chunks/dep-a97b932f.js';
import '../../_chunks/dep-9e2d72a2.js';
import '../../_chunks/dep-342e02ed.js';
import '../../_chunks/dep-a89633b7.js';
import '../../_chunks/dep-a91fe24d.js';
import '../../_chunks/dep-ba50895d.js';
import '../../_chunks/dep-9a198ec7.js';
import '../../_chunks/dep-2ac1b781.js';

function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
  var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      setTreeNodes = cascaderContext.setTreeNodes,
      setExpend = cascaderContext.setExpend,
      value = cascaderContext.value,
      max = cascaderContext.max,
      valueType = cascaderContext.valueType;
  var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
  if (isDisabled) return;

  if (propsTrigger === trigger && !node.isLeaf()) {
    var expanded = node.setExpanded(true);
    treeStore.refreshNodes();
    treeStore.replaceExpanded(expanded);
    var nodes = treeStore.getNodes().filter(function (node2) {
      return node2.visible;
    });
    setTreeNodes(nodes);

    if (multiple) {
      setExpend(expanded);
    }
  }

  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
    treeStore.resetChecked();
    var checked = node.setChecked(!node.checked);

    var _checked = _slicedToArray(checked, 1),
        value2 = _checked[0];

    setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
      return item.value;
    }), "check", node.getModel());

    if (!checkStrictly) {
      setVisible(false, {});
    }
  }
}
function valueChangeEffect(node, cascaderContext) {
  var disabled = cascaderContext.disabled,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal,
      multiple = cascaderContext.multiple,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      treeNodes = cascaderContext.treeNodes,
      treeStore = cascaderContext.treeStore,
      valueType = cascaderContext.valueType;

  if (!node || disabled || node.disabled) {
    return;
  }

  var checked = node.setChecked(!node.isChecked());

  if (isNumber_1(max) && max < 0) {
    console.warn("TDesign Warn:", "max should > 0");
  }

  if (checked.length > max && isNumber_1(max) && max > 0) {
    return;
  }

  if (checked.length === 0) {
    var expanded = treeStore.getExpanded();
    setTimeout(function () {
      treeStore.replaceExpanded(expanded);
      treeStore.refreshNodes();
    }, 0);
  }

  if (!multiple) {
    setVisible(false, {});
  }

  var isSelectAll = treeNodes.every(function (item) {
    return checked.indexOf(item.value) > -1;
  });

  if (inputVal && isSelectAll) {
    setVisible(false, {});
  }

  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, "check", node.getModel());
}
function closeIconClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setExpend = cascaderContext.setExpend,
      setValue = cascaderContext.setValue;
  setVisible(false, {});

  if (multiple) {
    setExpend([]);
  }

  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext, index, onRemove) {
  var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue,
      value = cascaderContext.value,
      valueType = cascaderContext.valueType,
      treeStore = cascaderContext.treeStore;
  if (disabled) return;
  var newValue = cloneDeep_1(value);
  var res = newValue.splice(index, 1);
  var node = treeStore.getNodes(res[0])[0];
  setValue(newValue, "uncheck", node.getModel());
  var checked = node.setChecked(!node.isChecked());
  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, "uncheck", node.getModel());

  if (isFunction_1(onRemove)) {
    onRemove({
      value: checked,
      node: node
    });
  }
}
var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
  if (!treeStore) return;
  var nodes = [];

  if (inputVal) {
    var filterMethods = function filterMethods(node) {
      if (!node.isLeaf()) return;

      if (isFunction_1(filter)) {
        return filter("".concat(inputVal), node);
      }

      var fullPathLabel = getFullPathLabel(node, "");
      return fullPathLabel.indexOf("".concat(inputVal)) > -1;
    };

    nodes = treeStore.nodes.filter(filterMethods);
  } else {
    nodes = treeStore.getNodes().filter(function (node) {
      return node.visible;
    });
  }

  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
  var treeValue = getTreeValue(value);
  if (!treeStore) return;

  if (Array.isArray(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */new Map();

    var _treeValue = _slicedToArray(treeValue, 1),
        val = _treeValue[0];

    if (val) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);

      if (!node) {
        treeStore.refreshNodes();
        return;
      }

      node.getParents().forEach(function (tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    } else {
      treeStore.resetExpanded();
    }
  }

  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }

  treeStore.refreshNodes();
};

export { closeIconClickEffect, expendClickEffect, handleRemoveTagEffect, treeNodesEffect, treeStoreExpendEffect, valueChangeEffect };
//# sourceMappingURL=effect.js.map
