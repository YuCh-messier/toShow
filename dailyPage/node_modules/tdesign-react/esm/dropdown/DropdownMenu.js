/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import React from 'react';
import classNames from 'classnames';
import { ChevronRightIcon, ChevronLeftIcon } from 'tdesign-icons-react';
import useConfig from '../hooks/useConfig.js';
import { Divider } from '../divider/index.js';
import DropdownItem from './DropdownItem.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-588efa4a.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-ab50f53f.js';
import '../_chunks/dep-9703c0d5.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../divider/Divider.js';
import '../_chunks/dep-fe234c83.js';
import '../divider/defaultProps.js';
import '../divider/style/index.js';
import '../divider/type.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-2968ca73.js';
import '../_util/easing.js';
import './defaultProps.js';
import '../_util/helper.js';
import '../_chunks/dep-2baf8638.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-8537a9ca.js';
import '../_chunks/dep-8e8d0d95.js';
import '../_chunks/dep-1a0fcc8a.js';
import '../_chunks/dep-6f296cb1.js';
import '../_chunks/dep-8b68327e.js';
import '../_chunks/dep-094f627b.js';
import '../_chunks/dep-c4ea35cf.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 160 : _props$maxColumnWidth,
      direction = props.direction;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var dropdownClass = "".concat(classPrefix, "-dropdown");
  var dropdownMenuClass = "".concat(dropdownClass, "__menu");

  var _useGlobalIcon = useGlobalIcon({
    ChevronRightIcon: ChevronRightIcon,
    ChevronLeftIcon: ChevronLeftIcon
  }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon,
      ChevronLeftIcon$1 = _useGlobalIcon.ChevronLeftIcon;

  var handleItemClick = function handleItemClick(options2) {
    var _data$onClick, _props$onClick;

    var data = options2.data,
        context = options2.context;
    data === null || data === void 0 ? void 0 : (_data$onClick = data.onClick) === null || _data$onClick === void 0 ? void 0 : _data$onClick.call(data, data, context);
    (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
  };

  var renderOptions = function renderOptions(data) {
    var _data$forEach;

    var arr = [];
    var renderContent;
    (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, function (menu, idx) {
      var optionItem = _objectSpread({}, menu);

      if (optionItem.children) {
        var _classNames;

        optionItem.children = renderOptions(optionItem.children);
        renderContent = /* @__PURE__ */React.createElement("div", {
          key: idx
        }, /* @__PURE__ */React.createElement(DropdownItem, {
          className: classNames("".concat(dropdownClass, "__item"), "".concat(dropdownClass, "__item--suffix")),
          value: optionItem.value,
          theme: optionItem.theme,
          active: optionItem.active,
          prefixIcon: optionItem.prefixIcon,
          disabled: optionItem.disabled,
          minColumnWidth: minColumnWidth,
          maxColumnWidth: maxColumnWidth,
          isSubmenu: true
        }, /* @__PURE__ */React.createElement("div", {
          className: "".concat(dropdownClass, "__item-content")
        }, direction === "right" ? /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "__item-text")
        }, optionItem.content), /* @__PURE__ */React.createElement(ChevronRightIcon$1, {
          className: "".concat(dropdownClass, "__item-direction"),
          size: "16"
        })) : /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(ChevronLeftIcon$1, {
          className: "".concat(dropdownClass, "__item-direction"),
          size: "16"
        }), /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "__item-text")
        }, optionItem.content))), /* @__PURE__ */React.createElement("div", {
          className: classNames("".concat(dropdownClass, "__submenu"), (_classNames = {}, _defineProperty(_classNames, "".concat(dropdownClass, "__submenu--disabled"), optionItem.disabled), _defineProperty(_classNames, "".concat(dropdownClass, "__submenu--").concat(direction), direction), _classNames)),
          style: {
            top: "".concat(idx * 30, "px")
          }
        }, /* @__PURE__ */React.createElement("ul", null, optionItem.children))), optionItem.divider ? /* @__PURE__ */React.createElement(Divider, null) : null);
      } else {
        renderContent = /* @__PURE__ */React.createElement("div", {
          key: idx
        }, /* @__PURE__ */React.createElement(DropdownItem, {
          className: "".concat(dropdownClass, "__item"),
          value: optionItem.value,
          theme: optionItem.theme,
          active: optionItem.active,
          prefixIcon: optionItem.prefixIcon,
          disabled: optionItem.disabled,
          minColumnWidth: minColumnWidth,
          maxColumnWidth: maxColumnWidth,
          onClick: optionItem.disabled || optionItem.children ? function () {
            return null;
          } : function (value, context) {
            return handleItemClick({
              data: optionItem,
              context: context
            });
          }
        }, /* @__PURE__ */React.createElement("span", {
          className: "".concat(dropdownClass, "-text")
        }, optionItem.content)), optionItem.divider ? /* @__PURE__ */React.createElement(Divider, null) : null);
      }

      arr.push(renderContent);
    });
    return arr;
  };

  return /* @__PURE__ */React.createElement("div", {
    className: classNames(dropdownMenuClass, "".concat(dropdownMenuClass, "--").concat(direction)),
    style: {
      maxHeight: "".concat(maxHeight, "px")
    }
  }, renderOptions(options));
};

DropdownMenu.displayName = "DropdownMenu";

export { DropdownMenu as default };
//# sourceMappingURL=DropdownMenu.js.map
