/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import React, { useRef, useEffect, isValidElement } from 'react';
import { isFragment } from 'react-is';
import classNames from 'classnames';
import useConfig from '../../hooks/useConfig.js';
import { getRefDom, supportRef } from '../utils/ref.js';
import composeRefs from '../../_util/composeRefs.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-ebef14de.js';
import '../../_chunks/dep-588efa4a.js';
import '../../_chunks/dep-a407cb09.js';
import '../../_chunks/dep-dd4cd0af.js';
import '../../_chunks/dep-f162740d.js';
import '../../_chunks/dep-22eee49a.js';
import '../../_chunks/dep-f2b0265c.js';
import '../../_chunks/dep-91563b2d.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-e10ccd97.js';
import '../../_chunks/dep-6f568a94.js';
import '../../_chunks/dep-646bb331.js';
import '../../_chunks/dep-1f71931a.js';
import '../../_chunks/dep-3b5c7604.js';
import '../../_chunks/dep-51566efd.js';
import '../../_chunks/dep-c6a2f197.js';
import '../../_chunks/dep-a6b91546.js';
import '../../_chunks/dep-5fef4495.js';
import '../../_chunks/dep-a97b932f.js';
import '../../_chunks/dep-9e2d72a2.js';
import '../../_chunks/dep-342e02ed.js';
import '../../_chunks/dep-a89633b7.js';
import '../../_chunks/dep-a91fe24d.js';
import '../../_chunks/dep-27e7ca24.js';
import '../../_chunks/dep-f40ed698.js';
import '../../_chunks/dep-ab50f53f.js';
import '../../_chunks/dep-9703c0d5.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';

var ESC_KEY = "Escape";
function useTrigger(_ref) {
  var content = _ref.content,
      disabled = _ref.disabled,
      trigger = _ref.trigger,
      visible = _ref.visible,
      onVisibleChange = _ref.onVisibleChange,
      triggerRef = _ref.triggerRef;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var hasPopupMouseDown = useRef(false);
  var mouseDownTimer = useRef(0);
  var triggerDataKey = useRef("".concat(classPrefix, "-popup--").concat(Math.random().toFixed(10)));
  var shouldToggle = !disabled && content;
  useEffect(function () {
    if (!shouldToggle) return;

    var handleDocumentClick = function handleDocumentClick(e) {
      if (getRefDom(triggerRef).contains(e.target) || hasPopupMouseDown.current) {
        return;
      }

      visible && onVisibleChange(false, {
        e: e,
        trigger: "document"
      });
    };

    document.addEventListener("mousedown", handleDocumentClick);
    document.addEventListener("touchend", handleDocumentClick);
    return function () {
      document.removeEventListener("mousedown", handleDocumentClick);
      document.removeEventListener("touchend", handleDocumentClick);
    };
  }, [shouldToggle, visible, onVisibleChange, triggerRef]);

  function getPopupProps() {
    if (!shouldToggle) return {};
    return {
      onMouseEnter: function onMouseEnter(e) {
        if (trigger === "hover") {
          onVisibleChange(true, {
            e: e,
            trigger: "trigger-element-hover"
          });
        }
      },
      onMouseLeave: function onMouseLeave(e) {
        if (trigger === "hover") {
          onVisibleChange(false, {
            e: e,
            trigger: "trigger-element-hover"
          });
        }
      },
      onMouseDown: function onMouseDown() {
        clearTimeout(mouseDownTimer.current);
        hasPopupMouseDown.current = true;
        mouseDownTimer.current = window.setTimeout(function () {
          hasPopupMouseDown.current = false;
        });
      },
      onTouchEnd: function onTouchEnd() {
        clearTimeout(mouseDownTimer.current);
        hasPopupMouseDown.current = true;
        mouseDownTimer.current = window.setTimeout(function () {
          hasPopupMouseDown.current = false;
        });
      }
    };
  }

  function getTriggerProps(triggerNode) {
    if (!shouldToggle) return {};
    var triggerProps = {
      className: visible ? classNames(triggerNode.props.className, "".concat(classPrefix, "-popup-open")) : triggerNode.props.className,
      onClick: function onClick(e) {
        var _triggerNode$props$on, _triggerNode$props;

        if (trigger === "click") {
          onVisibleChange(!visible, {
            e: e,
            trigger: "trigger-element-click"
          });
        }

        (_triggerNode$props$on = (_triggerNode$props = triggerNode.props).onClick) === null || _triggerNode$props$on === void 0 ? void 0 : _triggerNode$props$on.call(_triggerNode$props, e);
      },
      onTouchStart: function onTouchStart(e) {
        var _triggerNode$props$on2, _triggerNode$props2;

        if (trigger === "hover") {
          onVisibleChange(true, {
            e: e,
            trigger: "trigger-element-hover"
          });
        }

        (_triggerNode$props$on2 = (_triggerNode$props2 = triggerNode.props).onTouchStart) === null || _triggerNode$props$on2 === void 0 ? void 0 : _triggerNode$props$on2.call(_triggerNode$props2, e);
      },
      onMouseEnter: function onMouseEnter(e) {
        var _triggerNode$props$on3, _triggerNode$props3;

        if (trigger === "hover") {
          onVisibleChange(true, {
            e: e,
            trigger: "trigger-element-hover"
          });
        }

        (_triggerNode$props$on3 = (_triggerNode$props3 = triggerNode.props).onMouseEnter) === null || _triggerNode$props$on3 === void 0 ? void 0 : _triggerNode$props$on3.call(_triggerNode$props3, e);
      },
      onMouseLeave: function onMouseLeave(e) {
        var _triggerNode$props$on4, _triggerNode$props4;

        if (trigger === "hover") {
          onVisibleChange(false, {
            e: e,
            trigger: "trigger-element-hover"
          });
        }

        (_triggerNode$props$on4 = (_triggerNode$props4 = triggerNode.props).onMouseLeave) === null || _triggerNode$props$on4 === void 0 ? void 0 : _triggerNode$props$on4.call(_triggerNode$props4, e);
      },
      onFocus: function onFocus() {
        var _triggerNode$props$on5, _triggerNode$props5;

        if (trigger === "focus") {
          onVisibleChange(true, {
            trigger: "trigger-element-focus"
          });
        }

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_triggerNode$props$on5 = (_triggerNode$props5 = triggerNode.props).onFocus) === null || _triggerNode$props$on5 === void 0 ? void 0 : _triggerNode$props$on5.call.apply(_triggerNode$props$on5, [_triggerNode$props5].concat(args));
      },
      onBlur: function onBlur() {
        var _triggerNode$props$on6, _triggerNode$props6;

        if (trigger === "focus") {
          onVisibleChange(false, {
            trigger: "trigger-element-blur"
          });
        }

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_triggerNode$props$on6 = (_triggerNode$props6 = triggerNode.props).onBlur) === null || _triggerNode$props$on6 === void 0 ? void 0 : _triggerNode$props$on6.call.apply(_triggerNode$props$on6, [_triggerNode$props6].concat(args));
      },
      onContextMenu: function onContextMenu(e) {
        var _triggerNode$props$on7, _triggerNode$props7;

        if (trigger === "context-menu") {
          onVisibleChange(true, {
            e: e,
            trigger: "context-menu"
          });
        }

        (_triggerNode$props$on7 = (_triggerNode$props7 = triggerNode.props).onContextMenu) === null || _triggerNode$props$on7 === void 0 ? void 0 : _triggerNode$props$on7.call(_triggerNode$props7, e);
      },
      onKeyDown: function onKeyDown(e) {
        var _triggerNode$props$on8, _triggerNode$props8;

        if ((e === null || e === void 0 ? void 0 : e.key) === ESC_KEY) {
          onVisibleChange(false, {
            e: e,
            trigger: "keydown-esc"
          });
        }

        (_triggerNode$props$on8 = (_triggerNode$props8 = triggerNode.props).onKeyDown) === null || _triggerNode$props$on8 === void 0 ? void 0 : _triggerNode$props$on8.call(_triggerNode$props8, e);
      }
    };

    if (supportRef(triggerNode)) {
      triggerProps.ref = composeRefs(triggerRef, triggerNode.ref);
    } else {
      triggerProps["data-popup"] = triggerDataKey.current;
    }

    return triggerProps;
  }

  function getTriggerNode(children) {
    var triggerNode = /*#__PURE__*/isValidElement(children) && !isFragment(children) ? children : /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-trigger")
    }, children);
    return /*#__PURE__*/React.cloneElement(triggerNode, getTriggerProps(triggerNode));
  }

  function getTriggerDom() {
    return document.querySelector("[data-popup=\"".concat(triggerDataKey.current, "\"]"));
  }

  return {
    getTriggerNode: getTriggerNode,
    getPopupProps: getPopupProps,
    getTriggerDom: getTriggerDom
  };
}

export { useTrigger as default };
//# sourceMappingURL=useTrigger.js.map
