/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../_chunks/dep-ebef14de.js';
import { _ as _toConsumableArray } from '../../../_chunks/dep-88be14a4.js';
import { _ as _slicedToArray } from '../../../_chunks/dep-2baf8638.js';
import React, { forwardRef, useRef, useState, useCallback, useEffect } from 'react';
import classNames from 'classnames';
import tinyColor from 'tinycolor2';
import useCommonClassName from '../../../_util/useCommonClassName.js';
import useControlled from '../../../hooks/useControlled.js';
import { useLocaleReceiver } from '../../../locale/LocalReceiver.js';
import useClassNames from '../../hooks/useClassNames.js';
import PanelHeader from './header.js';
import { Color, getColorObject } from '../../../_common/js/color-picker/color.js';
import { DEFAULT_COLOR, DEFAULT_LINEAR_GRADIENT, TD_COLOR_USED_COLORS_MAX_SIZE, DEFAULT_SYSTEM_SWATCH_COLORS } from '../../const.js';
import { colorPickerDefaultProps } from '../../defaultProps.js';
import LinearGradient from './linear-gradient.js';
import SaturationPanel from './saturation.js';
import HUESlider from './hue.js';
import AlphaSlider from './alpha.js';
import FormatPanel from './format/index.js';
import SwatchesPanel from './swatches.js';
import '../../../_chunks/dep-24599104.js';
import '../../../hooks/useConfig.js';
import '../../../config-provider/ConfigContext.js';
import '../../../_chunks/dep-588efa4a.js';
import '../../../_chunks/dep-a407cb09.js';
import '../../../_chunks/dep-dd4cd0af.js';
import '../../../_chunks/dep-f162740d.js';
import '../../../_chunks/dep-22eee49a.js';
import '../../../_chunks/dep-f2b0265c.js';
import '../../../_chunks/dep-91563b2d.js';
import '../../../_chunks/dep-3627969a.js';
import '../../../_chunks/dep-e10ccd97.js';
import '../../../_chunks/dep-6f568a94.js';
import '../../../_chunks/dep-646bb331.js';
import '../../../_chunks/dep-1f71931a.js';
import '../../../_chunks/dep-3b5c7604.js';
import '../../../_chunks/dep-51566efd.js';
import '../../../_chunks/dep-c6a2f197.js';
import '../../../_chunks/dep-a6b91546.js';
import '../../../_chunks/dep-5fef4495.js';
import '../../../_chunks/dep-a97b932f.js';
import '../../../_chunks/dep-9e2d72a2.js';
import '../../../_chunks/dep-342e02ed.js';
import '../../../_chunks/dep-a89633b7.js';
import '../../../_chunks/dep-a91fe24d.js';
import '../../../_chunks/dep-27e7ca24.js';
import '../../../_chunks/dep-f40ed698.js';
import '../../../_chunks/dep-ab50f53f.js';
import '../../../_chunks/dep-9703c0d5.js';
import '../../../locale/zh_CN.js';
import '../../../_common/js/global-config/locale/zh_CN.js';
import '../../../_common/js/global-config/default-config.js';
import '../../../_chunks/dep-6f296cb1.js';
import '../../../_chunks/dep-8b68327e.js';
import '../../../_chunks/dep-094f627b.js';
import '../../../_chunks/dep-8e8d0d95.js';
import '../../../_chunks/dep-1a0fcc8a.js';
import '../../../_util/noop.js';
import '../../../config-provider/index.js';
import '../../../config-provider/ConfigProvider.js';
import '../../../radio/index.js';
import '../../../_chunks/dep-c25250d7.js';
import '../../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../../common/Check.js';
import '../../../_chunks/dep-fe234c83.js';
import '../../../_util/helper.js';
import '../../../_chunks/dep-8537a9ca.js';
import '../../../_chunks/dep-c4ea35cf.js';
import '../../../radio/defaultProps.js';
import '../../../_util/useMutationObserver.js';
import '../../../_chunks/dep-622322f2.js';
import '../../../_chunks/dep-abf310d4.js';
import '../../../radio/style/css.js';
import '../../../radio/type.js';
import '../../../_chunks/dep-a58d2703.js';
import '../../../_common/js/color-picker/cmyk.js';
import '../../../_common/js/color-picker/gradient.js';
import '../../../_chunks/dep-d8c173c9.js';
import '../../../_chunks/dep-08858747.js';
import '../../../_chunks/dep-ba50895d.js';
import '../../../_chunks/dep-9a198ec7.js';
import '../../../input-number/index.js';
import '../../../input-number/InputNumber.js';
import 'tdesign-icons-react';
import '../../../input/index.js';
import '../../../input/Input.js';
import '../../../_util/useLayoutEffect.js';
import '../../../_util/dom.js';
import 'raf';
import '../../../_chunks/dep-2968ca73.js';
import '../../../_util/easing.js';
import '../../../hooks/useGlobalIcon.js';
import '../../../_common/js/utils/helper.js';
import '../../../input/InputGroup.js';
import '../../../input/defaultProps.js';
import '../../../input/style/css.js';
import '../../../input/type.js';
import '../../../button/index.js';
import '../../../button/Button.js';
import '../../../_util/useRipple.js';
import '../../../_util/useAnimation.js';
import '../../../_util/setStyle.js';
import '../../../loading/index.js';
import '../../../loading/Loading.js';
import '../../../common/Portal.js';
import 'react-dom';
import '../../../loading/gradient.js';
import '../../../_common/js/loading/circle-adapter.js';
import '../../../_common/js/utils/set-style.js';
import '../../../loading/defaultProps.js';
import '../../../loading/plugin.js';
import '../../../loading/style/css.js';
import '../../../loading/type.js';
import '../../../button/defaultProps.js';
import '../../../button/style/css.js';
import '../../../button/type.js';
import '../../../input-number/useInputNumber.js';
import '../../../_common/js/input-number/number.js';
import '../../../_chunks/dep-4c44a6fb.js';
import '../../../_common/js/input-number/large-number.js';
import '../../../_common/js/log/log.js';
import '../../../_common/js/log/index.js';
import '../../../input-number/defaultProps.js';
import '../../../input-number/style/css.js';
import '../../../input-number/type.js';
import '../../../_util/useDrag.js';
import './slider.js';
import '../../../select/index.js';
import '../../../select/base/Select.js';
import '../../../_chunks/dep-eaafd9b2.js';
import '../../../_chunks/dep-41762eda.js';
import '../../../select/util/helper.js';
import '../../../select/base/OptionGroup.js';
import '../../../select/defaultProps.js';
import '../../../select/base/Option.js';
import '../../../common/FakeArrow.js';
import '../../../select-input/index.js';
import '../../../select-input/SelectInput.js';
import '../../../popup/index.js';
import '../../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../../popup/hooks/useTrigger.js';
import 'react-is';
import '../../../popup/utils/ref.js';
import '../../../_util/composeRefs.js';
import '../../../popup/utils/transition.js';
import '../../../_util/useWindowSize.js';
import '../../../popup/defaultProps.js';
import '../../../popup/style/css.js';
import '../../../popup/type.js';
import '../../../select-input/useSingle.js';
import '../../../_chunks/dep-17055df6.js';
import '../../../_chunks/dep-81e269a3.js';
import '../../../_chunks/dep-80d1a65c.js';
import '../../../select-input/useMultiple.js';
import '../../../tag-input/index.js';
import '../../../tag-input/TagInput.js';
import '../../../_util/useDragSorter.js';
import '../../../tag-input/useTagScroll.js';
import '../../../tag-input/useTagList.js';
import '../../../tag/index.js';
import '../../../tag/Tag.js';
import '../../../tag/CheckTag.js';
import '../../../tag/defaultProps.js';
import '../../../tag/style/css.js';
import '../../../tag/type.js';
import '../../../tag-input/useHover.js';
import '../../../tag-input/defaultProps.js';
import '../../../tag-input/style/css.js';
import '../../../tag-input/type.js';
import '../../../select-input/useOverlayInnerStyle.js';
import '../../../select-input/defaultProps.js';
import '../../../select-input/style/css.js';
import '../../../select-input/type.js';
import '../../../select/base/PopupContent.js';
import '../../../select/style/css.js';
import '../../../select/type.js';
import './format/inputs.js';
import '../../../_chunks/dep-0b05e6c9.js';
import './format/config.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var mathRound = Math.round;
var Panel = /*#__PURE__*/forwardRef(function (props, ref) {
  var baseClassName = useClassNames();

  var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;

  var _useLocaleReceiver = useLocaleReceiver("colorPicker"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var value = props.value,
      disabled = props.disabled,
      onChange = props.onChange,
      _props$enableAlpha = props.enableAlpha,
      enableAlpha = _props$enableAlpha === void 0 ? false : _props$enableAlpha,
      format = props.format,
      onPaletteBarChange = props.onPaletteBarChange,
      swatchColors = props.swatchColors,
      className = props.className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      togglePopup = props.togglePopup,
      closeBtn = props.closeBtn,
      _props$colorModes = props.colorModes,
      colorModes = _props$colorModes === void 0 ? ["linear-gradient", "monochrome"] : _props$colorModes;

  var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      innerValue = _useControlled2[0],
      setInnerValue = _useControlled2[1];

  var colorInstanceRef = useRef(new Color(innerValue || DEFAULT_COLOR));
  var getmodeByColor = colorInstanceRef.current.isGradient ? "linear-gradient" : "monochrome";

  var _useState = useState((colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1 ? colorModes[0] : getmodeByColor),
      _useState2 = _slicedToArray(_useState, 2),
      mode = _useState2[0],
      setMode = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      updateId = _useState4[0],
      setUpdateId = _useState4[1];

  var update = useCallback(function (value2) {
    colorInstanceRef.current.update(value2);
    setUpdateId(updateId + 1);
  }, [updateId]);
  var formatValue = useCallback(function () {
    if (mode === "linear-gradient") {
      return colorInstanceRef.current.linearGradient;
    }

    return colorInstanceRef.current.getFormatsColorMap()[format] || colorInstanceRef.current.css;
  }, [format, mode]);
  var emitColorChange = useCallback(function (trigger) {
    setInnerValue(formatValue(), {
      color: getColorObject(colorInstanceRef.current),
      trigger: trigger || "palette-saturation-brightness"
    });
  }, [formatValue, setInnerValue]);
  useEffect(function () {
    if (typeof value === "undefined" || mode === "linear-gradient") {
      return;
    }

    var newUniqColor = tinyColor(value).toRgb();
    var r = newUniqColor.r,
        g = newUniqColor.g,
        b = newUniqColor.b,
        a = newUniqColor.a;
    var newUniqRgbaColor = "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
    var newColor = new Color(value);
    var formattedColor = newUniqRgbaColor || DEFAULT_COLOR;
    var currentColor = colorInstanceRef.current.rgba;
    var isInRightMode = mode === "monochrome" && !newColor.isGradient;

    if (formattedColor !== currentColor && isInRightMode) {
      update(value);
      setMode(newColor.isGradient ? "linear-gradient" : "monochrome");
    }
  }, [value, formatValue, setInnerValue, mode, update]);
  useEffect(function () {
    if (colorModes.length === 1) {
      setMode(colorModes[0]);
    } else {
      setMode(getmodeByColor);
    }
  }, [colorModes, getmodeByColor]);
  var formatRef = useRef(colorInstanceRef.current.isGradient ? "CSS" : "RGB");
  var onRecentColorsChange = props.onRecentColorsChange;

  var _useControlled3 = useControlled(props, "recentColors", onRecentColorsChange, {
    defaultRecentColors: colorPickerDefaultProps.recentColors
  }),
      _useControlled4 = _slicedToArray(_useControlled3, 2),
      recentlyUsedColors = _useControlled4[0],
      setRecentlyUsedColors = _useControlled4[1];

  var baseProps = {
    color: colorInstanceRef.current,
    disabled: disabled,
    baseClassName: baseClassName
  };

  var handleModeChange = function handleModeChange(value2) {
    setMode(value2);
    var _colorInstanceRef$cur = colorInstanceRef.current,
        rgba = _colorInstanceRef$cur.rgba,
        gradientColors = _colorInstanceRef$cur.gradientColors,
        linearGradient = _colorInstanceRef$cur.linearGradient;

    if (value2 === "linear-gradient") {
      colorInstanceRef.current = new Color(gradientColors.length > 0 ? linearGradient : DEFAULT_LINEAR_GRADIENT);
      return;
    }

    colorInstanceRef.current = new Color(rgba);
  };

  var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
    setRecentlyUsedColors(colors);
  };

  var addRecentlyUsedColor = function addRecentlyUsedColor() {
    var colors = _toConsumableArray(recentlyUsedColors || []);

    var _colorInstanceRef$cur2 = colorInstanceRef.current,
        isGradient2 = _colorInstanceRef$cur2.isGradient,
        linearGradient = _colorInstanceRef$cur2.linearGradient,
        rgba = _colorInstanceRef$cur2.rgba;
    var currentColor = isGradient2 ? linearGradient : rgba;
    var index = colors.indexOf(currentColor);

    if (index > -1) {
      colors.splice(index, 1);
    }

    colors.unshift(currentColor);

    if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
      colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
    }

    handleRecentlyUsedColorsChange(colors);
  };

  var handleSaturationChange = function handleSaturationChange(_ref) {
    var saturation = _ref.saturation,
        value2 = _ref.value;
    var _colorInstanceRef$cur3 = colorInstanceRef.current,
        sat = _colorInstanceRef$cur3.saturation,
        val = _colorInstanceRef$cur3.value;
    var changeTrigger = "palette-saturation-brightness";

    if (value2 !== val && saturation !== sat) {
      changeTrigger = "palette-saturation-brightness";
      colorInstanceRef.current.saturation = saturation;
      colorInstanceRef.current.value = value2;
    } else if (saturation !== sat) {
      changeTrigger = "palette-saturation";
      colorInstanceRef.current.saturation = saturation;
    } else if (value2 !== val) {
      changeTrigger = "palette-brightness";
      colorInstanceRef.current.value = value2;
    } else {
      return;
    }

    emitColorChange(changeTrigger);
  };

  var handleHUEChange = function handleHUEChange(hue) {
    colorInstanceRef.current.hue = hue;
    emitColorChange("palette-hue-bar");
    onPaletteBarChange === null || onPaletteBarChange === void 0 ? void 0 : onPaletteBarChange({
      color: getColorObject(colorInstanceRef.current)
    });
  };

  var handleAlphaChange = function handleAlphaChange(alpha) {
    colorInstanceRef.current.alpha = alpha;
    emitColorChange("palette-alpha-bar");
    onPaletteBarChange === null || onPaletteBarChange === void 0 ? void 0 : onPaletteBarChange({
      color: getColorObject(colorInstanceRef.current)
    });
  };

  var handleGradientChange = function handleGradientChange(_ref2) {
    var key = _ref2.key,
        payload = _ref2.payload;
    var trigger = "palette-saturation-brightness";

    switch (key) {
      case "degree":
        colorInstanceRef.current.gradientDegree = payload;
        trigger = "input";
        break;

      case "selectedId":
        colorInstanceRef.current.gradientSelectedId = payload;
        setUpdateId(function (prevId) {
          return prevId + 1;
        });
        break;

      case "colors":
        colorInstanceRef.current.gradientColors = payload;
        break;
    }

    emitColorChange(trigger);
  };

  var handleFormatModeChange = function handleFormatModeChange(format2) {
    return formatRef.current = format2;
  };

  var handleInputChange = function handleInputChange(input, alpha) {
    update(input);
    colorInstanceRef.current.alpha = alpha;
    emitColorChange("input");
  };

  var SwatchesArea = /*#__PURE__*/React.memo(function () {
    var _systemColors;

    var showUsedColors = recentlyUsedColors !== null && recentlyUsedColors !== false;
    var systemColors = swatchColors;

    if (systemColors === void 0) {
      systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
    }

    var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;

    if (!showSystemColors && !showUsedColors) {
      return null;
    }

    var handleSetColor = function handleSetColor(value2) {
      var isGradientValue = Color.isGradientColor(value2);
      var color = colorInstanceRef.current;

      if (isGradientValue) {
        if (colorModes.includes("linear-gradient")) {
          setMode("linear-gradient");
          color.update(value2);
          color.updateCurrentGradientColor();
        } else {
          console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
        }
      } else if (mode === "linear-gradient") {
        color.updateStates(value2);
        color.updateCurrentGradientColor();
      } else {
        color.update(value2);
      }

      emitColorChange();
    };

    return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("div", {
      className: "".concat(baseClassName, "__swatches-wrap")
    }, showUsedColors && /* @__PURE__ */React.createElement(SwatchesPanel, _objectSpread(_objectSpread({}, baseProps), {}, {
      title: t(local.recentColorTitle),
      editable: true,
      handleAddColor: addRecentlyUsedColor,
      colors: recentlyUsedColors,
      onSetColor: function onSetColor(color) {
        return handleSetColor(color);
      },
      onChange: handleRecentlyUsedColorsChange
    })), showSystemColors && /* @__PURE__ */React.createElement(SwatchesPanel, _objectSpread(_objectSpread({}, baseProps), {}, {
      title: t(local.swatchColorTitle),
      colors: systemColors,
      onSetColor: function onSetColor(color) {
        return handleSetColor(color);
      }
    }))));
  });
  var isGradient = mode === "linear-gradient";
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(baseClassName, "__panel"), disabled ? STATUS.disabled : false, className),
    onClick: function onClick(e) {
      return e.stopPropagation();
    },
    style: _objectSpread({}, style),
    ref: ref
  }, /* @__PURE__ */React.createElement(PanelHeader, {
    baseClassName: baseClassName,
    mode: mode,
    colorModes: colorModes,
    closeBtn: closeBtn,
    togglePopup: togglePopup,
    onModeChange: handleModeChange
  }), /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__body")
  }, isGradient && /* @__PURE__ */React.createElement(LinearGradient, _objectSpread(_objectSpread({}, baseProps), {}, {
    onChange: handleGradientChange
  })), /* @__PURE__ */React.createElement(SaturationPanel, _objectSpread(_objectSpread({}, baseProps), {}, {
    onChange: handleSaturationChange
  })), /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__sliders-wrapper")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__sliders")
  }, /* @__PURE__ */React.createElement(HUESlider, _objectSpread(_objectSpread({}, baseProps), {}, {
    onChange: handleHUEChange
  })), enableAlpha && /* @__PURE__ */React.createElement(AlphaSlider, _objectSpread(_objectSpread({}, baseProps), {}, {
    onChange: handleAlphaChange
  }))), /* @__PURE__ */React.createElement("div", {
    className: classNames(["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")])
  }, /* @__PURE__ */React.createElement("span", {
    className: "".concat(baseClassName, "__sliders-preview-inner"),
    style: {
      background: isGradient ? colorInstanceRef.current.linearGradient : colorInstanceRef.current.rgba
    }
  }))), /* @__PURE__ */React.createElement(FormatPanel, _objectSpread(_objectSpread(_objectSpread({}, props), baseProps), {}, {
    format: formatRef.current,
    onModeChange: handleFormatModeChange,
    onInputChange: handleInputChange
  })), /* @__PURE__ */React.createElement(SwatchesArea, null)));
});
var ColorPanel = /*#__PURE__*/React.memo(Panel);

export { ColorPanel as default };
//# sourceMappingURL=index.js.map
