{"version":3,"file":"TreeDraggableContext.js","sources":["../../src/tree/TreeDraggableContext.tsx"],"sourcesContent":["import { useRef, DragEvent } from 'react';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TreeProps } from './Tree';\nimport { createHookContext } from '../_util/createHookContext';\n\ninterface Value {\n  props: TreeProps;\n  store: TreeStore;\n}\n\nexport const TreeDraggableContext = createHookContext((value: Value) => {\n  const { props, store } = value;\n\n  const dragNode = useRef<TreeNode | null>(null);\n\n  const onDragStart = (context: { node: TreeNode; e: DragEvent }) => {\n    dragNode.current = context.node;\n    props.onDragStart?.({\n      ...context,\n      node: context.node.model,\n    });\n  };\n\n  const onDragEnd = (context: { node: TreeNode; e: DragEvent }) => {\n    dragNode.current = context.node;\n    props.onDragEnd?.({\n      ...context,\n      node: context.node.model,\n    });\n  };\n\n  const onDragOver = (context: { node: TreeNode; e: DragEvent }) => {\n    props.onDragOver?.({\n      ...context,\n      node: context.node.model,\n    });\n  };\n\n  const onDragLeave = (context: { node: TreeNode; e: DragEvent }) => {\n    props.onDragLeave?.({\n      ...context,\n      node: context.node.model,\n    });\n  };\n\n  const onDrop = (context: { node: TreeNode; dropPosition: number; e: DragEvent }) => {\n    const { node, dropPosition } = context;\n    if (\n      node.value === dragNode.current.value ||\n      node.getParents().some((_node) => _node.value === dragNode.current.value)\n    )\n      return;\n\n    const nodes = store.getNodes() as TreeNode[];\n    nodes.some((_node) => {\n      if (_node.value === node.value) {\n        if (dropPosition === 0) {\n          dragNode.current?.appendTo(store, _node);\n        } else if (dropPosition < 0) {\n          node.insertBefore(dragNode.current);\n        } else {\n          node.insertAfter(dragNode.current);\n        }\n        return true;\n      }\n      return false;\n    });\n    props.onDrop?.({\n      ...context,\n      dragNode: dragNode.current.model,\n      dropNode: node.model,\n    });\n  };\n\n  return {\n    onDragStart,\n    onDragEnd,\n    onDragOver,\n    onDragLeave,\n    onDrop,\n  };\n});\n\nexport const useTreeDraggableContext = () => TreeDraggableContext.use();\n"],"names":["TreeDraggableContext","createHookContext","value","props","store","dragNode","useRef","onDragStart","context","current","node","model","onDragEnd","onDragOver","onDragLeave","onDrop","dropPosition","getParents","some","_node","nodes","getNodes","appendTo","insertBefore","insertAfter","dropNode","useTreeDraggableContext","use"],"mappings":"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"}