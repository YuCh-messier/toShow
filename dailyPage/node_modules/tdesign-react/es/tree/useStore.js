/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { useRef } from 'react';
import { c as cloneDeep_1 } from '../_chunks/dep-d8c173c9.js';
import useUpdateEffect from '../_util/useUpdateEffect.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import { usePersistFn } from '../_util/usePersistFn.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-08858747.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-ba50895d.js';
import '../_chunks/dep-9a198ec7.js';
import '../_util/useLayoutEffect.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-2968ca73.js';
import '../_util/easing.js';
import '../_chunks/dep-ebef14de.js';
import '../_chunks/dep-a58d2703.js';
import '../_chunks/dep-0388ec88.js';
import '../_chunks/dep-742d4a49.js';
import '../_chunks/dep-8e8d0d95.js';
import '../_chunks/dep-1a0fcc8a.js';
import '../_chunks/dep-80d1a65c.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-8537a9ca.js';
import '../_chunks/dep-6f296cb1.js';
import '../_chunks/dep-8b68327e.js';
import '../_chunks/dep-094f627b.js';
import '../_chunks/dep-c4ea35cf.js';
import '../_chunks/dep-ab50f53f.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-619196bb.js';
import '../_chunks/dep-88be14a4.js';
import '../_chunks/dep-24599104.js';
import '../_chunks/dep-eaafd9b2.js';
import '../_chunks/dep-41762eda.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-17055df6.js';
import '../_chunks/dep-81e269a3.js';
import '../_chunks/dep-69e3334d.js';
import '../_common/js/log/log.js';

function useStore(props, refresh) {
  var storeRef = useRef();
  var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      draggable = props.draggable,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad,
      _props$allowFoldNodeO = props.allowFoldNodeOnFilter,
      allowFoldNodeOnFilter = _props$allowFoldNodeO === void 0 ? false : _props$allowFoldNodeO;
  var handleUpdate = usePersistFn(function () {
    refresh();
  });

  var getExpandedArr = function getExpandedArr(arr, store2) {
    var expandedMap = /* @__PURE__ */new Map();
    arr.forEach(function (val) {
      expandedMap.set(val, true);

      if (expandParent) {
        var node = store2.getNode(val);
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
      }
    });
    return Array.from(expandedMap.keys());
  };

  var createStore = function createStore() {
    var store2 = new TreeStore({
      keys: keys,
      activable: activable,
      activeMultiple: activeMultiple,
      checkable: checkable,
      checkStrictly: checkStrictly,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      disabled: disabled,
      draggable: draggable,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      filter: filter,
      onLoad: function onLoad(info) {
        var node = info.node;
        _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
          node: node.getModel()
        });
      },
      onUpdate: handleUpdate,
      allowFoldNodeOnFilter: allowFoldNodeOnFilter
    });
    var list = cloneDeep_1(data);

    if (!Array.isArray(list)) {
      list = [];
    }

    store2.append(list);
    store2.refreshNodes();

    if (Array.isArray(value)) {
      store2.setChecked(value);
    }

    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store2);
      store2.setExpanded(expandedArr);
    }

    if (Array.isArray(actived)) {
      store2.setActived(actived);
    }

    store2.refreshNodes();
    return store2;
  };

  if (!storeRef.current) {
    storeRef.current = createStore();
  }

  var store = storeRef.current;
  useUpdateEffect(function () {
    if (data && Array.isArray(data)) {
      var expanded2 = store.getExpanded();
      var checked = store.getChecked();
      var actived2 = store.getActived();
      store.removeAll();
      store.append(data);
      store.setChecked(checked);
      store.setActived(actived2);
      store.setExpanded(expanded2);
    }
  }, [data, store]);
  useUpdateEffect(function () {
    store.setConfig({
      keys: keys,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      activable: activable,
      activeMultiple: activeMultiple,
      disabled: disabled,
      checkable: checkable,
      checkStrictly: checkStrictly,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    });
    store.refreshState();
  }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
  useUpdateEffect(function () {
    if (Array.isArray(value)) {
      store.replaceChecked(value);
    }
  }, [store, value]);
  useUpdateEffect(function () {
    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store);
      store.replaceExpanded(expandedArr);
    }
  }, [expanded, store]);
  useUpdateEffect(function () {
    if (Array.isArray(actived)) {
      store.replaceActived(actived);
    }
  }, [actived, store]);
  useUpdateEffect(function () {
    store.setConfig({
      filter: filter
    });
    store.updateAll();
  }, [filter, store]);
  return storeRef.current;
}

export { useStore };
//# sourceMappingURL=useStore.js.map
