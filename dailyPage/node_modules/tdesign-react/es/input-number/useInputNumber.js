/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import { useState, useRef, useEffect } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import useControlled from '../hooks/useControlled.js';
import useCommonClassName from '../_util/useCommonClassName.js';
import { canReduceNumber, canAddNumber, formatToNumber, getMaxOrMinValidateResult, getStepValue, canInputNumber } from '../_common/js/input-number/number.js';
import '../_chunks/dep-24599104.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-588efa4a.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-ab50f53f.js';
import '../_chunks/dep-9703c0d5.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../_chunks/dep-6f296cb1.js';
import '../_chunks/dep-8b68327e.js';
import '../_chunks/dep-094f627b.js';
import '../_chunks/dep-8e8d0d95.js';
import '../_chunks/dep-1a0fcc8a.js';
import '../_util/noop.js';
import '../_chunks/dep-2968ca73.js';
import '../_chunks/dep-4c44a6fb.js';
import '../_common/js/input-number/large-number.js';
import '../_common/js/log/log.js';
import '../_common/js/log/index.js';

function useInputNumber(props) {
  var _classNames;

  var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      userInput = _useState2[0],
      setUserInput = _useState2[1];

  var _useState3 = useState(""),
      _useState4 = _slicedToArray(_useState3, 2),
      displayValue = _useState4[0],
      setDisplayValue = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      isError = _useState6[0],
      setIsError = _useState6[1];

  var inputRef = useRef(null);
  var max = props.max,
      min = props.min,
      largeNumber = props.largeNumber,
      onValidate = props.onValidate;
  var disabledReduce = props.disabled || !canReduceNumber(value, props.min, props.largeNumber);
  var disabledAdd = props.disabled || !canAddNumber(value, props.max, props.largeNumber);
  var wrapClasses = classNames("".concat(classPrefix, "-input-number"), SIZE[props.size], (_classNames = {}, _defineProperty(_classNames, STATUS.disabled, props.disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-controls-right"), props.theme === "column"), _defineProperty(_classNames, "".concat(classPrefix, "-input-number--").concat(props.theme), props.theme), _defineProperty(_classNames, "".concat(classPrefix, "-input-number--auto-width"), props.autoWidth), _classNames));
  var reduceClasses = classNames("".concat(classPrefix, "-input-number__decrease"), _defineProperty({}, STATUS.disabled, disabledReduce));
  var addClasses = classNames("".concat(classPrefix, "-input-number__increase"), _defineProperty({}, STATUS.disabled, disabledAdd));

  var getUserInput = function getUserInput(value2) {
    var _inputRef$current$cur, _inputRef$current$cur2;

    if (!value2 && value2 !== 0) return "";
    var inputStr = value2 || value2 === 0 ? String(value2) : "";

    if (!((_inputRef$current$cur = (_inputRef$current$cur2 = inputRef.current.currentElement).contains) !== null && _inputRef$current$cur !== void 0 && _inputRef$current$cur.call(_inputRef$current$cur2, document.activeElement))) {
      var num = formatToNumber(inputStr, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });
      inputStr = num || num === 0 ? String(num) : "";

      if (props.format) {
        inputStr = String(props.format(value2, {
          fixedNumber: inputStr
        }));
      }
    }

    return inputStr;
  };

  useEffect(function () {
    var inputValue = [void 0, null].includes(value) ? "" : String(value);
    setUserInput(getUserInput(inputValue));
  }, [value]);
  useEffect(function () {
    if ([void 0, "", null].includes(value)) return;
    var error = getMaxOrMinValidateResult({
      value: value,
      max: max,
      min: min,
      largeNumber: largeNumber
    });
    setIsError(error);
    onValidate === null || onValidate === void 0 ? void 0 : onValidate({
      error: error
    });
  }, [value, max, min, largeNumber, onValidate]);

  var handleStepValue = function handleStepValue(op) {
    return getStepValue({
      op: op,
      step: props.step,
      max: props.max,
      min: props.min,
      lastValue: value,
      largeNumber: props.largeNumber
    });
  };

  var handleReduce = function handleReduce(e) {
    if (disabledReduce || props.readonly) return;
    var newValue = handleStepValue("reduce");
    onChange(newValue, {
      type: "reduce",
      e: e
    });
  };

  var handleAdd = function handleAdd(e) {
    if (disabledAdd || props.readonly) return;
    var newValue = handleStepValue("add");
    onChange(newValue, {
      type: "add",
      e: e
    });
  };

  var onInnerInputChange = function onInnerInputChange(val, ctx) {
    if (!canInputNumber(val, props.largeNumber)) return;
    setUserInput(val);
    var isDelete = ctx.e.inputType === "deleteContentBackward";
    var newVal = isDelete || props.largeNumber || !val ? val : Number(val);

    if (newVal !== value && !["-", ".", "e", "E"].includes(val.slice(-1))) {
      onChange(newVal, {
        type: "input",
        e: ctx.e
      });
    }
  };

  var handleBlur = function handleBlur(value2, ctx) {
    var _props$onBlur;

    setUserInput(getUserInput(value2));
    var newValue = formatToNumber(value2, {
      decimalPlaces: props.decimalPlaces,
      largeNumber: props.largeNumber
    });
    console.log(getUserInput(value2), newValue);

    if (newValue !== value2 && String(newValue) !== value2) {
      onChange(newValue, {
        type: "blur",
        e: ctx.e
      });
    }

    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, newValue, ctx);
  };

  var handleFocus = function handleFocus(_, ctx) {
    var _props$onFocus;

    setUserInput(value);
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value, ctx);
  };

  var handleKeydown = function handleKeydown(value2, ctx) {
    var _props$onKeydown;

    var e = ctx.e;
    var keyEvent = {
      ArrowUp: handleAdd,
      ArrowDown: handleReduce
    };

    if (keyEvent[e.key] !== void 0) {
      keyEvent[e.key](e);
    }

    (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, value2, ctx);
  };

  var handleKeyup = function handleKeyup(value2, ctx) {
    var _props$onKeyup;

    (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, value2, ctx);
  };

  var handleKeypress = function handleKeypress(value2, ctx) {
    var _props$onKeypress;

    (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, value2, ctx);
  };

  var handleEnter = function handleEnter(value2, ctx) {
    var _props$onEnter;

    setUserInput(getUserInput(value2));
    var newValue = formatToNumber(value2, {
      decimalPlaces: props.decimalPlaces,
      largeNumber: props.largeNumber
    });

    if (newValue !== value2 && String(newValue) !== value2) {
      onChange(newValue, {
        type: "enter",
        e: ctx.e
      });
    }

    (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, ctx);
  };

  var focus = function focus() {
    inputRef.current.focus();
  };

  var blur = function blur() {
    inputRef.current.blur();
  };

  var listeners = {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onKeydown: handleKeydown,
    onKeyup: handleKeyup,
    onKeypress: handleKeypress,
    onEnter: handleEnter,
    onClick: focus
  };
  return {
    classPrefix: classPrefix,
    wrapClasses: wrapClasses,
    reduceClasses: reduceClasses,
    addClasses: addClasses,
    inputRef: inputRef,
    listeners: listeners,
    displayValue: displayValue,
    setDisplayValue: setDisplayValue,
    isError: isError,
    setIsError: setIsError,
    userInput: userInput,
    setUserInput: setUserInput,
    value: value,
    focus: focus,
    blur: blur,
    onChange: onChange,
    handleReduce: handleReduce,
    handleAdd: handleAdd,
    onInnerInputChange: onInnerInputChange
  };
}

export { useInputNumber as default };
//# sourceMappingURL=useInputNumber.js.map
