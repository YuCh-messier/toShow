/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import React, { useRef, useState, useEffect } from 'react';
import { CalendarIcon } from 'tdesign-icons-react';
import dayjs from 'dayjs';
import classNames from 'classnames';
import useConfig from '../../hooks/useConfig.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { getDefaultFormat, formatDate, isValidDate, parseToDayjs } from '../../_common/js/date-picker/format.js';
import useRange$1 from './useRangeValue.js';
import '../../_chunks/dep-24599104.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-588efa4a.js';
import '../../_chunks/dep-a407cb09.js';
import '../../_chunks/dep-dd4cd0af.js';
import '../../_chunks/dep-f162740d.js';
import '../../_chunks/dep-22eee49a.js';
import '../../_chunks/dep-f2b0265c.js';
import '../../_chunks/dep-91563b2d.js';
import '../../_chunks/dep-3627969a.js';
import '../../_chunks/dep-e10ccd97.js';
import '../../_chunks/dep-6f568a94.js';
import '../../_chunks/dep-646bb331.js';
import '../../_chunks/dep-1f71931a.js';
import '../../_chunks/dep-3b5c7604.js';
import '../../_chunks/dep-51566efd.js';
import '../../_chunks/dep-c6a2f197.js';
import '../../_chunks/dep-a6b91546.js';
import '../../_chunks/dep-5fef4495.js';
import '../../_chunks/dep-a97b932f.js';
import '../../_chunks/dep-9e2d72a2.js';
import '../../_chunks/dep-342e02ed.js';
import '../../_chunks/dep-a89633b7.js';
import '../../_chunks/dep-a91fe24d.js';
import '../../_chunks/dep-27e7ca24.js';
import '../../_chunks/dep-f40ed698.js';
import '../../_chunks/dep-ab50f53f.js';
import '../../_chunks/dep-9703c0d5.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/date-picker/utils.js';
import '../../_chunks/dep-e23ef400.js';
import '../../_chunks/dep-abf310d4.js';
import '../../_chunks/dep-1a0fcc8a.js';
import '../../_chunks/dep-094f627b.js';
import '../../_common/js/log/index.js';
import '../../_common/js/log/log.js';
import '../../hooks/useControlled.js';
import '../../_chunks/dep-6f296cb1.js';
import '../../_chunks/dep-8b68327e.js';
import '../../_chunks/dep-8e8d0d95.js';
import '../../_util/noop.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function useRange(props) {
  var _props$separator, _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps, _props$popupProps2;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var _useGlobalIcon = useGlobalIcon({
    CalendarIcon: CalendarIcon
  }),
      CalendarIcon$1 = _useGlobalIcon.CalendarIcon;

  var name = "".concat(classPrefix, "-date-range-picker");
  var isMountedRef = useRef(false);
  var inputRef = useRef();

  var _useRangeValue = useRange$1(props),
      value = _useRangeValue.value,
      onChange = _useRangeValue.onChange,
      time = _useRangeValue.time,
      setTime = _useRangeValue.setTime,
      month = _useRangeValue.month,
      setMonth = _useRangeValue.setMonth,
      year = _useRangeValue.year,
      setYear = _useRangeValue.setYear,
      cacheValue = _useRangeValue.cacheValue,
      setCacheValue = _useRangeValue.setCacheValue,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected,
      setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected;

  var _getDefaultFormat = getDefaultFormat({
    mode: props.mode,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      activeIndex = _useState6[0],
      setActiveIndex = _useState6[1];

  var _useState7 = useState(formatDate(value, {
    format: format
  })),
      _useState8 = _slicedToArray(_useState7, 2),
      inputValue = _useState8[0],
      setInputValue = _useState8[1];

  var rangeInputProps = _objectSpread(_objectSpread({}, props.rangeInputProps), {}, {
    ref: inputRef,
    separator: (_props$separator = props.separator) !== null && _props$separator !== void 0 ? _props$separator : globalDatePickerConfig.rangeSeparator,
    clearable: props.clearable,
    prefixIcon: props.prefixIcon,
    readonly: !props.allowInput,
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
    activeIndex: popupVisible ? activeIndex : void 0,
    suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React.createElement(CalendarIcon$1, null),
    className: classNames(_defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClick: function onClick(_ref) {
      var position = _ref.position;
      setActiveIndex(position === "first" ? 0 : 1);
    },
    onClear: function onClear(_ref2) {
      var e = _ref2.e;
      e.stopPropagation();
      setPopupVisible(false);
      onChange([], {
        dayjsValue: [],
        trigger: "clear"
      });
    },
    onBlur: function onBlur(newVal, _ref3) {
      var _props$onBlur;

      var e = _ref3.e,
          position = _ref3.position;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
        value: newVal,
        partial: PARTIAL_MAP[position],
        e: e
      });
    },
    onFocus: function onFocus(newVal, _ref4) {
      var _props$onFocus;

      var e = _ref4.e,
          position = _ref4.position;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
        value: newVal,
        partial: PARTIAL_MAP[position],
        e: e
      });
      setActiveIndex(position === "first" ? 0 : 1);
    },
    onChange: function onChange(newVal, _ref5) {
      var _props$onInput;

      var e = _ref5.e,
          position = _ref5.position;
      var index = position === "first" ? 0 : 1;
      (_props$onInput = props.onInput) === null || _props$onInput === void 0 ? void 0 : _props$onInput.call(props, {
        input: newVal[index],
        value: value,
        partial: PARTIAL_MAP[position],
        e: e
      });
      setInputValue(newVal);
      if (!isValidDate(newVal, format)) return;
      var newYear = [];
      var newMonth = [];
      var newTime = [];
      newVal.forEach(function (v, i) {
        newYear.push(dayjs(v).year() || year[i]);
        newMonth.push(dayjs(v).month() || month[i]);
        newTime.push(dayjs(v).format(timeFormat) || time[i]);
      });
      setYear(newYear);
      setMonth(newMonth);
      setTime(newTime);
    },
    onEnter: function onEnter(newVal) {
      if (!isValidDate(newVal, format) && !isValidDate(value, format)) return;
      setPopupVisible(false);

      if (isValidDate(newVal, format)) {
        onChange(formatDate(newVal, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: newVal.map(function (v) {
            return parseToDayjs(v, format);
          }),
          trigger: "enter"
        });
      } else if (isValidDate(value, format)) {
        setInputValue(formatDate(value, {
          format: format
        }));
      } else {
        setInputValue([]);
      }
    }
  });

  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, props.popupProps), {}, {
    overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
      width: "auto"
    },
    overlayClassName: classNames((_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible, context) {
      if (context.trigger === "trigger-element-click") {
        var indexMap = {
          0: "first",
          1: "second"
        };
        inputRef.current.focus({
          position: indexMap[activeIndex]
        });
        return setPopupVisible(true);
      }

      setPopupVisible(visible);
    }
  });

  useEffect(function () {
    if (!value) {
      setInputValue([]);
      return;
    }

    if (!isValidDate(value, format)) return;
    setInputValue(formatDate(value, {
      format: format
    }));
  }, [value]);
  useEffect(function () {
    if (!isMountedRef.current) {
      isMountedRef.current = true;
      return;
    }

    var indexMap = {
      0: "first",
      1: "second"
    };
    inputRef.current.focus({
      position: indexMap[activeIndex]
    });
  }, [activeIndex]);
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    rangeInputProps: rangeInputProps,
    popupProps: popupProps,
    isHoverCell: isHoverCell,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTime: setTime,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    activeIndex: activeIndex,
    setActiveIndex: setActiveIndex,
    isFirstValueSelected: isFirstValueSelected,
    setIsFirstValueSelected: setIsFirstValueSelected,
    cacheValue: cacheValue,
    setCacheValue: setCacheValue
  };
}

export { PARTIAL_MAP, useRange as default };
//# sourceMappingURL=useRange.js.map
