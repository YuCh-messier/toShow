/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-2baf8638.js';
import { _ as _defineProperty } from '../../_chunks/dep-ebef14de.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-88be14a4.js';
import '../../_chunks/dep-24599104.js';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getMapValue(name, formMapRef) {
  if (!formMapRef.current) return;

  var mapKeys = _toConsumableArray(formMapRef.current.keys());

  var key = mapKeys.find(function (key2) {
    return String(key2) === String(name);
  });
  return formMapRef.current.get(key);
}
function calcFieldValue(name, value) {
  if (Array.isArray(name)) {
    var fieldValue = name.reduceRight(function (prev, curr) {
      return _defineProperty({}, curr, prev);
    }, value);
    return _objectSpread({}, fieldValue);
  }

  return _defineProperty({}, name, value);
}
function travelMapFromObject(obj, formMapRef, callback) {
  var _iterator = _createForOfIteratorHelper(formMapRef.current.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          mapName = _step$value[0],
          formItemRef = _step$value[1];

      if (Array.isArray(mapName)) {
        var symbol = Symbol("name");
        var fieldValue = null;

        for (var i = 0; i < mapName.length; i++) {
          var item = mapName[i];

          if (Reflect.has(fieldValue || obj, item)) {
            fieldValue = Reflect.get(fieldValue || obj, item);
          } else {
            fieldValue = symbol;
            break;
          }
        }

        if (fieldValue !== symbol) {
          callback(formItemRef, fieldValue);
        }
      } else if (Reflect.has(obj, mapName)) {
        callback(formItemRef, obj[mapName]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

export { calcFieldValue, getMapValue, travelMapFromObject };
//# sourceMappingURL=index.js.map
