/**
 * tdesign v0.42.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-2baf8638.js';
import React from 'react';
import useConfig from '../hooks/useConfig.js';
import usePrefixClass from './hooks/usePrefixClass.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { blockName } from './_util.js';
import '../_chunks/dep-24599104.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-ebef14de.js';
import '../_chunks/dep-588efa4a.js';
import '../_chunks/dep-a407cb09.js';
import '../_chunks/dep-dd4cd0af.js';
import '../_chunks/dep-f162740d.js';
import '../_chunks/dep-22eee49a.js';
import '../_chunks/dep-f2b0265c.js';
import '../_chunks/dep-91563b2d.js';
import '../_chunks/dep-3627969a.js';
import '../_chunks/dep-e10ccd97.js';
import '../_chunks/dep-6f568a94.js';
import '../_chunks/dep-646bb331.js';
import '../_chunks/dep-1f71931a.js';
import '../_chunks/dep-3b5c7604.js';
import '../_chunks/dep-51566efd.js';
import '../_chunks/dep-c6a2f197.js';
import '../_chunks/dep-a6b91546.js';
import '../_chunks/dep-5fef4495.js';
import '../_chunks/dep-a97b932f.js';
import '../_chunks/dep-9e2d72a2.js';
import '../_chunks/dep-342e02ed.js';
import '../_chunks/dep-a89633b7.js';
import '../_chunks/dep-a91fe24d.js';
import '../_chunks/dep-27e7ca24.js';
import '../_chunks/dep-f40ed698.js';
import '../_chunks/dep-ab50f53f.js';
import '../_chunks/dep-9703c0d5.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_common/js/global-config/default-config.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import 'dayjs';

var CalendarCellComp = function CalendarCellComp(props) {
  var mode = props.mode,
      cell = props.cell,
      cellAppend = props.cellAppend,
      theme = props.theme,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      cellData = props.cellData,
      isCurrent = props.isCurrent,
      isNow = props.isNow,
      fillWithZero = props.fillWithZero,
      createCalendarCell = props.createCalendarCell,
      onCellClick = props.onCellClick,
      onCellDoubleClick = props.onCellDoubleClick,
      onCellRightClick = props.onCellRightClick;

  var _useLocaleReceiver = useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var monthLabelList = t(local.cellMonth).split(",");

  var getMonthCN = function getMonthCN(month) {
    return monthLabelList[month];
  };

  var _useConfig = useConfig(),
      calendarConfig = _useConfig.calendar;

  var fix0 = function fix0(num) {
    var _ref;

    var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : calendarConfig.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
    return fillZero ? "0".concat(num) : num;
  };

  var prefixCls = usePrefixClass();
  return /* @__PURE__ */React.createElement("td", {
    className: prefixCls([blockName, "table-body-cell"], isDisabled ? "is-disabled" : null, isCurrent ? "is-checked" : null, isNow ? [blockName, "table-body-cell--now"] : null),
    onClick: onCellClick,
    onDoubleClick: onCellDoubleClick,
    onContextMenu: onCellRightClick
  }, function () {
    if (cell && typeof cell === "function") return cell(mode === "month" ? createCalendarCell(cellData) : cellData);
    if (cell && typeof cell !== "function") return cell;
    var cellCtx;

    if (mode === "year") {
      var mIndex = cellData.date.getMonth();
      cellCtx = theme === "full" ? getMonthCN(mIndex) : t(local.monthSelection, {
        month: "".concat(mIndex + 1)
      });
    } else {
      cellCtx = fix0(cellData.date.getDate());
    }

    return /* @__PURE__ */React.createElement("div", {
      className: prefixCls([blockName, "table-body-cell-display"])
    }, cellCtx);
  }(), function () {
    var cellCtx;

    if (cellAppend && typeof cellAppend === "function") {
      cellCtx = cellAppend(mode === "month" ? createCalendarCell(cellData) : cellData);
    }

    if (cellAppend && typeof cellAppend !== "function") {
      cellCtx = cellAppend;
    }

    return cellAppend && /* @__PURE__ */React.createElement("div", {
      className: prefixCls([blockName, "table-body-cell-content"])
    }, cellCtx);
  }());
};

export { CalendarCellComp as default };
//# sourceMappingURL=CalendarCellComp.js.map
